<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GET http::8080/sockjs-node/info?t=1597300795947 net::ERR_ADDRESS_UNREACHABLE</title>
      <link href="/articl/abd69df0.html"/>
      <url>/articl/abd69df0.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f37589b14195aa594e61816.jpg" alt=""></p><a id="more"></a><br><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815113414.png" alt=""></p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>node_modules依赖中，sockjs-client/dist/sockjs.js,1608行注释掉。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815113138.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815113223.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 迎刃而解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中使用函数防抖和节流</title>
      <link href="/articl/cce40a5e.html"/>
      <url>/articl/cce40a5e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f3748ae14195aa594e1b5c1.jpg" alt=""></p><a id="more"></a><br><p><strong>函数防抖（Debounce）</strong>：指触发事件后在n秒内函数只执行一次，如果在n秒内又触发了事件，则会重新计算函数执行时间。<strong>如</strong>：搜素框，滚动条<br><strong>函数节流（throttle）</strong>：指连续触发事件但在n秒中只执行一次，避免某些事件频繁触发。<strong>如</strong>：按钮点击</p><p><strong>Vue中使用防抖和节流</strong></p><p><strong>第一步：定义公共防抖和节流函数</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 函数防抖</span></span><br><span class="line"><span class="comment">   * 触发事件后在n秒后执行，如果n秒内又触发事件，则重新计算时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  debounce(fn, wait = <span class="number">1000</span>) {</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">      <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="keyword">if</span> (timer) clearTimeout(timer);</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        fn.apply(context, args);</span><br><span class="line">      }, wait)</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 函数节流</span></span><br><span class="line"><span class="comment">   * 触发事件立即执行，但在n秒内连续触发则不执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  throttle(fn, wait = <span class="number">1000</span>) {</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">      <span class="keyword">if</span> (timer != <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      }, wait);</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong><br>防抖和节流函数中return的函数不能使用箭头函数，如果使用箭头函数则this就会指向globalFunction，就会有问题</p><p><strong>第二步：新建Vue组件</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"btnDebounce('函数','防抖')"</span>&gt;</span>函数防抖<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"btnThrottle('函数','节流')"</span>&gt;</span>函数节流<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>第三步：引用globalFunction并在methods中使用</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> globalFunction <span class="keyword">from</span> <span class="string">"../../utils/globalFunction"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">"test"</span>,</span><br><span class="line">    methods: {</span><br><span class="line"></span><br><span class="line">      btnDebounce: globalFunction.debounce(<span class="function"><span class="keyword">function</span> (<span class="params">str1, str2</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(str1, str2);</span><br><span class="line">      }, <span class="number">2000</span>),</span><br><span class="line"></span><br><span class="line">      btnThrottle: globalFunction.throttle(<span class="function"><span class="keyword">function</span> (<span class="params">str1, str2</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(str1, str2);</span><br><span class="line">      }, <span class="number">2000</span>),</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>说明：</strong><br><strong>globalFunction类的debounce、throttle返回的一个函数，就相当于</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btnDebounce: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(args);</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure><p><strong>所以可以拿到当前this和arguments参数，因为argument获取的是一个类似数组的对象，所以可以通过调用函数的apply方法来传递参数</strong></p><br><p>参考：<a href="https://blog.csdn.net/Liu_yunzhao/article/details/92850993?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-5-92850993.nonecase&amp;utm_term=%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0vue" target="_blank" rel="noopener">传送门</a></p><p><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数防抖 </tag>
            
            <tag> 函数节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决使用Better-Scroll可滚动区域的问题（事件总线，防抖操作）</title>
      <link href="/articl/88dd5720.html"/>
      <url>/articl/88dd5720.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f3748ae14195aa594e1b5be.png" alt=""></p><a id="more"></a><br><p>Better-Scroll在决定有多少区域可以滚动时, 是根据scrollerHeight属性决定。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815091734.png" alt=""></p><p>scrollerHeight属性是根据放Better-Scroll的content中的子组件的高度</p><p>但是我们的首页中, 刚开始在计算scrollerHeight属性时, 是没有将图片计算在内的</p><p>所以, 计算出来的告诉是错误的(1300+)</p><p>后来图片加载进来之后有了新的高度, 但是scrollerHeight属性并没有进行更新.</p><p>所以滚动出现了问题</p><br><p>如何解决这个问题了?</p><ul><li>监听每一张图片是否加载完成, 只要有一张图片加载完成了, 执行一次<code>this.scroll.refresh()</code></li><li>如何监听图片加载完成了 ?<ul><li>原生的js监听图片: img.onload = function() {}</li><li>Vue中监听: @load=’方法’</li></ul></li><li>调用scroll的<code>this.scroll.refresh()</code></li></ul><br><h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>如何将GoodsListItem.vue中的事件传入到Home.vue中</p><p>因为涉及到非父子组件的通信, 所以这里我们选择了<strong>事件总线</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815094317.png" alt=""></p><p>步骤：</p><ul><li><p>Vue.prototype.$bus = new Vue()</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815093116.png" alt=""></p><br></li><li><p>this.bus.emit(‘事件名称’, 参数)</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815093144.png" alt=""></p><br></li><li><p>this.bus.on(‘事件名称’, 回调函数(参数))</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815093211.png" alt=""></p><br></li></ul><p>问题一: refresh找不到的问题</p><ul><li><p>第一: 在Scroll.vue中, 调用this.scroll的方法之前, 判断this.scroll对象是否有值</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815093528.png" alt=""></p><br></li><li><p>第二: 在mounted() 生命周期函数中使用<code>this.$refs.scroll</code>而不是created() 中 （为什么这样做：<a href="https://aqingya.cn/articl/4d16d636.html#4-mounted" target="_blank" rel="noopener">传送门</a>）</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200815093612.png" alt=""></p></li></ul><br><h2 id="防抖操作"><a href="#防抖操作" class="headerlink" title="防抖操作"></a>防抖操作</h2><p>问题二: 对于refresh非常频繁的问题, 进行防抖操作</p><p>定义：多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行。</p><p>防抖函数起作用的过程:</p><ul><li>如果我们直接执行refresh, 那么refresh函数会被执行30次.</li><li>可以将refresh函数传入到debounce函数中, 生成一个新的函数.</li><li>之后在调用非常频繁的时候, 就使用新生成的函数.</li><li>而新生成的函数, 并不会非常频繁的调用, 如果下一次执行来的非常快, 那么会将上一次取消掉</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> mounted() {   </span><br><span class="line">    <span class="comment">// 放抖动函数使用</span></span><br><span class="line">    <span class="keyword">const</span> refresh = <span class="keyword">this</span>.debounce(<span class="keyword">this</span>.$refs.scroll &amp;&amp; <span class="keyword">this</span>.$refs.scroll.refresh, <span class="number">500</span>)</span><br><span class="line">    <span class="comment">//解决滚动区域bug 使用事件总线 </span></span><br><span class="line">    <span class="keyword">this</span>.$bus.$on(<span class="string">'itemimgload'</span>,()=&gt;{</span><br><span class="line">    refresh()</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 放抖动函数</span></span><br><span class="line">    debounce(func, delay){</span><br><span class="line">      <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>{</span><br><span class="line">        <span class="keyword">if</span>(timer) clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">          func.apply(<span class="keyword">this</span>,args)</span><br><span class="line">        },delay)</span><br><span class="line">      }</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可滚动区域的问题 </tag>
            
            <tag> 事件总线 </tag>
            
            <tag> 防抖操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流光按钮</title>
      <link href="/articl/7de2e147.html"/>
      <url>/articl/7de2e147.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/ca3347eed35bad49c5efd048587f7211.png" alt=""></p><a id="more"></a><p>话不多说 ，直接上代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue生命周期学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.btn</span> {</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 50%;</span><br><span class="line">      left: 50%;</span><br><span class="line">      transform: translate(-50%, -50%);</span><br><span class="line">      width: 230px;</span><br><span class="line">      height: 90px;</span><br><span class="line">      line-height: 90px;</span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">      font-size: 24px;</span><br><span class="line">      text-transform: uppercase;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">      font-family: sans-serif;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#03a9f4</span>, <span class="selector-id">#f441a5</span>, <span class="selector-id">#ffeb3b</span>, <span class="selector-id">#03a9f4</span>);</span></span><br><span class="line">      background-size: 400%;</span><br><span class="line">      border-radius: 60px;</span><br><span class="line">      z-index: 1;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line">      animation: animate 8s linear infinite;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> animate {</span></span><br><span class="line">      0% {</span><br><span class="line">        background-position: 0%;</span><br><span class="line">      }</span><br><span class="line">      100% {</span><br><span class="line">        background-position: 400%;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.btn</span><span class="selector-pseudo">::before</span> {</span></span><br><span class="line">      content: '';</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: -5px;</span><br><span class="line">      left: -5px;</span><br><span class="line">      right: -5px;</span><br><span class="line">      bottom: -5px;</span><br><span class="line">      z-index: -1;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-id">#03a9f4</span>, <span class="selector-id">#f441a5</span>, <span class="selector-id">#ffeb3b</span>, <span class="selector-id">#03a9f4</span>);</span></span><br><span class="line">      background-size: 400%;</span><br><span class="line">      border-radius: 40px;</span><br><span class="line">      opacity: 0;</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: 0<span class="selector-class">.5s</span>;</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> {</span></span><br><span class="line">      filter: blur(20px);</span><br><span class="line">      opacity: 1;</span><br><span class="line">      animation: animate 8s linear infinite;</span><br><span class="line">    }</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>效果：</p><br><p><img src="https://pic.downk.cc/item/5f35083e14195aa5944ac884.gif" alt=""></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试100题</title>
      <link href="/articl/99a4a732.html"/>
      <url>/articl/99a4a732.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/46.jpg" alt=""></p><a id="more"></a><h1 id="前端面试100题"><a href="#前端面试100题" class="headerlink" title="前端面试100题"></a>前端面试100题</h1><h2 id="1、介绍一下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？"><a href="#1、介绍一下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？" class="headerlink" title="1、介绍一下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？"></a>1、介绍一下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？</h2><p>当我们输入 npm install 的时候，虽然没有在后面加模块名，它会自动去 package.json 中去寻找，我们之前安装过的 依赖项，然后把这些依赖项安装。</p><br><h2 id="2-、连等赋值"><a href="#2-、连等赋值" class="headerlink" title="2 、连等赋值"></a>2 、连等赋值</h2><p>输出一下代码的执行结果，并解释为什么</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = {<span class="attr">n</span>: <span class="number">1</span>};</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.x = a = {<span class="attr">n</span>: <span class="number">2</span>};</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.x)  <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b.x)  <span class="comment">//{n:2}</span></span><br></pre></td></tr></tbody></table></figure><p>这道题考的就是我们对连等赋值的理解。</p><p><span style="color:red"><strong>连等开始之前，程序会把所有引用都保存下来，连等的过程中，这些值是不变的，等到连等都完事了，再一块变</strong>。</span></p><p>我们来看一下这个图：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812135235.png" alt=""></p><p>① a 指向 了{n:1}</p><p>② b 等于 a ，则b的内存也指向了 {n:1}</p><p>③ 这是连等赋值，连等开始之前，程序会把所有引用都保存下来，连等的过程中，这些值是不变的，等到连等都完事了，再一块变，程序从右往左，先看<code>a = {n:2}</code> 也就是如图的③.1 ，a 指向了 {n:2}，</p><p>但是由于是连等赋值，此时 a 还是保持这对 {n:1} 的引用。然后再看 <code>a.x = a</code> 也就是如图的 ③.2 , 在a引用的内存地址中 添加一个 x 属性，并赋值为 {n:2}。再然后 如图③.3 等到整个语句完成后,a不再指向{n:1}，而指向了 {n:2}。</p><p>所以最后的结果变成了<br>a=={n: 2};<br>console.log(a.x) =&gt; undefined //因为a没有x属性</p><p>b=={n: 1, x: {n: 2}}<br>console.log(b.x) =&gt; {n: 2}</p><br><p>另一种解释：</p><p>1.首先，这个问题最关键的是连等赋值本身的行为，用最简单的话说。连等，会让所有变量都变成最右边的值，这是基础。</p><p><code>a=b=c=value</code></p><p>2.那么问题来了——这句话，到底计算机是怎么理解的<br><code>a.x = a = {n: 2};</code></p><p>3.这里的重点是a.x到底是谁</p><p>简单来说，在赋值过程开始时，a其实是{n:1}</p><p><code>a.x=a={n:2}</code><br>其实在计算机眼中是长成这样的：<br><code>{n:1}.x=a={n:2}</code></p><p>4.所以，这个赋值发生了两件事</p><p>//1.把”a”变成了{n:2}<br>//2.把{n:1}的x变成了{n:2}——————–</p><p>也就是说：<br><code>a.x = a = {n: 2};</code><br>其实被计算机执行成了<br><code>{n:1}.x={n: 2};</code><br><code>a={n: 2};</code></p><p>所以最后的结果变成了<br>a=={n: 2};<br>console.log(a.x) =&gt; undefined //因为a没有x属性</p><p>b=={n: 1, x: {n: 2}}<br>console.log(b.x) =&gt; {n: 2}</p><p><br><br></p><h2 id="3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？"><a href="#3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？" class="headerlink" title="3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？"></a>3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？</h2><p>回答： 完全一样</p><p>解释： 数组是随机访问的。数组在内存中是一段连续内存空间，实际上你只要知道首地址和偏移量，首地址就是Arrary本身，偏移量就是下标。两者一相加就是我们要找的位置。实际上数组的寻址操作是一样的，无论是加1也好还是加1000000也罢，cup计算加法是完全一样的。</p><p><br><br><br></p><hr><p>持续更新中。。。</p><p><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解vue生命周期</title>
      <link href="/articl/4d16d636.html"/>
      <url>/articl/4d16d636.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/6a82b44338264afa9149b23210cb9495.jpeg" alt=""></p><a id="more"></a><h2 id="vue生命周期介绍"><a href="#vue生命周期介绍" class="headerlink" title="vue生命周期介绍"></a>vue生命周期介绍</h2><p>首先，每个Vue实例在被<strong>创建</strong>之前都要经过一系列的初始化过程,这个过程就是vue的生命周期。首先看一张图吧~这是官方文档上的图片相信大家一定都会很熟悉：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/564745745235235.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/aksjdhfkjshd1.jpg" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812105315.png" alt=""></p><p>可以看到在vue一整个的生命周期中会有很多<strong>钩子函数</strong>提供给我们在vue生命周期不同的时刻进行操作, 那么先列出所有的钩子函数，然后我们再一一详解:</p><ul><li><strong>beforeCreate</strong></li><li><strong>created</strong></li><li><strong>beforeMount</strong></li><li><strong>mounted</strong></li><li><strong>beforeUpdate</strong></li><li><strong>updated</strong></li><li><strong>beforeDestroy</strong></li><li><strong>destroyed</strong></li></ul><p>先来一波代码，各位复制在浏览器中运行，打开console查看就行了：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue生命周期学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.4.2/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="actionscript">      message: <span class="string">'Vue的生命周期'</span></span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    beforeCreate: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">'------beforeCreate创建前状态------'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span> , <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//undefined </span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message) </span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    created: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">'------created创建完毕状态------'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化</span></span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    beforeMount: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">'------beforeMount挂载前状态------'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + (<span class="keyword">this</span>.$el)); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化  </span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化  </span></span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">'------mounted 挂载结束状态------'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);    </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化 </span></span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    beforeUpdate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">'beforeUpdate 更新前状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);   </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    updated: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">'updated 更新完成状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el); </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    beforeDestroy: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">'beforeDestroy 销毁前状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);    </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span></span><br><span class="line">    },</span><br><span class="line"><span class="actionscript">    destroyed: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.group(<span class="string">'destroyed 销毁完成状态===============》'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);  </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message)</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>运行后打开console可以看到打印出来内容如下:</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812100721.png" alt=""></p><p>可以看到一个vue实例在创建过程中调用的几个生命周期钩子。</p><br><h2 id="1-在beforeCreate和created钩子函数之间的生命周期"><a href="#1-在beforeCreate和created钩子函数之间的生命周期" class="headerlink" title="1. 在beforeCreate和created钩子函数之间的生命周期"></a><strong>1. 在beforeCreate和created钩子函数之间的生命周期</strong></h2><p>在这个生命周期之间，进行<strong>初始化事件，进行数据的观测</strong>，可以看到在<strong>created</strong>的时候数据已经和<strong>data属性进行绑定</strong>（放在data中的属性当值发生改变的同时，视图也会改变）。<br>注意看下：此时还是没有el选项</p><br><h2 id="2-created钩子函数和beforeMount间的生命周期"><a href="#2-created钩子函数和beforeMount间的生命周期" class="headerlink" title="2. created钩子函数和beforeMount间的生命周期"></a><strong>2. created钩子函数和beforeMount间的生命周期</strong></h2><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812100833.png" alt=""></p><p>在这一阶段发生的事情还是比较多的。</p><p>首先会判断对象是否有<strong>el选项</strong>。<strong>如果有的话就继续向下编译，如果没有</strong>el选项<strong>，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用vm.$mount(el)。</strong>此时注释掉代码中:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el: '#app',</span><br></pre></td></tr></tbody></table></figure><p>然后运行可以看到到created的时候就停止了：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101020.png" alt=""></p><p>如果我们在后面继续调用vm.$mount(el),可以发现代码继续向下执行了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$mount(el) <span class="comment">//这个el参数就是挂在的dom接点</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101258.png" alt=""></p><p>然后，我们往下看，<strong>template</strong>参数选项的有无对生命周期的影响。<br>（1）.如果vue实例对象中有template参数选项，则将其作为模板编译成render函数。<br>（2）.如果没有template选项，则将外部HTML作为模板编译。<br>（3）.可以看到template中的模板优先级要高于outer HTML的优先级。<br>修改代码如下, 在HTML结构中增加了一串html，在vue对象中增加了<strong>template选项</strong>：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue生命周期学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.4.2/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--html中修改的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{message + '这是在outer HTML中的'}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">{{message +'这是在template中的'}}</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>", //在vue配置项中修改的</span></span></span><br><span class="line">    data: {</span><br><span class="line"><span class="actionscript">      message: <span class="string">'Vue的生命周期'</span></span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>执行后的结果可以看到在页面中显示的是：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101357.png" alt=""></p><p>那么将vue对象中template的选项注释掉后打印如下信息：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101411.png" alt=""></p><p>这下就可以想想什么<strong>el的判断</strong>要在template之前了~是因为vue需要通过el找到对应的outer template。</p><p>在vue对象中还有一个<strong>render函数</strong>，它是以createElement作为参数，然后做渲染操作，而且我们可以直接嵌入JSX.</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">'h1'</span>, <span class="string">'this is createElement'</span>)</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>可以看到页面中渲染的是：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101446.png" alt=""></p><p>所以综合排名优先级：<br>render函数选项 &gt; template选项 &gt; outer HTML.</p><br><h2 id="3-beforeMount和mounted-钩子函数间的生命周期"><a href="#3-beforeMount和mounted-钩子函数间的生命周期" class="headerlink" title="3. beforeMount和mounted 钩子函数间的生命周期"></a><strong>3. beforeMount和mounted 钩子函数间的生命周期</strong></h2><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101543.png" alt=""></p><p>可以看到此时是给vue实例对象添加<strong>$el成员</strong>，并且替换掉挂在的DOM元素。因为在之前console中打印的结果可以看到<strong>beforeMount</strong>之前el上还是undefined。</p><br><h2 id="4-mounted"><a href="#4-mounted" class="headerlink" title="4. mounted"></a><strong>4. mounted</strong></h2><p>注意看下面截图：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101622.png" alt=""></p><p>在mounted之前h1中还是通过<strong></strong>进行占位的，因为此时还有挂在到页面上，还是JavaScript中的虚拟DOM形式存在的。在mounted之后可以看到h1中的内容发生了变化。</p><br><h2 id="5-beforeUpdate钩子函数和updated钩子函数间的生命周期"><a href="#5-beforeUpdate钩子函数和updated钩子函数间的生命周期" class="headerlink" title="5. beforeUpdate钩子函数和updated钩子函数间的生命周期"></a><strong>5. beforeUpdate钩子函数和updated钩子函数间的生命周期</strong></h2><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101652.png" alt=""></p><p>当vue发现data中的数据发生了改变，会<strong>触发对应组件的重新渲染</strong>，先后调用<strong>beforeUpdate</strong>和<strong>updated</strong>钩子函数。我们在console中输入：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.message = <span class="string">'触发组件更新'</span></span><br></pre></td></tr></tbody></table></figure><p>发现触发了组件的更新：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101722.png" alt=""></p><br><h2 id="6-beforeDestroy和destroyed钩子函数间的生命周期"><a href="#6-beforeDestroy和destroyed钩子函数间的生命周期" class="headerlink" title="6.beforeDestroy和destroyed钩子函数间的生命周期"></a><strong>6.beforeDestroy和destroyed钩子函数间的生命周期</strong></h2><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812101744.png" alt=""></p><p><strong>beforeDestroy</strong>钩子函数在实例销毁之前调用。在这一步，实例仍然完全可用。<br><strong>destroyed</strong>钩子函数在Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p><br><p><a href="https://segmentfault.com/a/1190000011381906" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011381906</a></p><p><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 之 better-scroll 详解</title>
      <link href="/articl/e996cf12.html"/>
      <url>/articl/e996cf12.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200812000321.jpg" alt=""></p><a id="more"></a><h2 id="better-scroll-是什么"><a href="#better-scroll-是什么" class="headerlink" title="better-scroll 是什么"></a>better-scroll 是什么</h2><p>better-scroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 <a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a> 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p><p>better-scroll 是基于原生 JS 实现的，不依赖任何框架。它编译后的代码大小是 63kb，压缩后是 35kb，gzip 后仅有 9kb，是一款非常轻量的 JS lib。</p><br><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>学习使用 better-scroll 最好的方式是看它的 demo 代码，我们把代码都放在了 <a href="https://github.com/ustbhuangyi/better-scroll/tree/master/example" target="_blank" rel="noopener">example</a> 目录。由于目前最适合移动端开发的前端 mvvm 框架是 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">Vue</a>，并且 better-scroll 可以很好的和 Vue 配合使用的，所以 demo 我都用 Vue 进行了重写。</p><p>better-scroll 最常见的应用场景是列表滚动，我们来看一下它的 html 结构</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span> <span class="attr">ref</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里可以放一些其它的 DOM，但不会影响滚动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面的代码中 better-scroll 是作用在外层 wrapper 容器上的，滚动的部分是 content 元素。这里要注意的是，better-scroll 只处理容器（wrapper）的第一个子元素（content）的滚动，其它的元素都会被忽略。</p><p>最简单的初始化代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span><br><span class="line"><span class="comment">//let wrapper = document.querySelector('.wrapper')  // 现在一般是使用ref 来获取wrapper 比较准确</span></span><br><span class="line"><span class="keyword">let</span> wrapper = <span class="keyword">this</span>.$refs.wrapper</span><br><span class="line"><span class="keyword">let</span> scroll = <span class="keyword">new</span> BScroll(wrapper)</span><br></pre></td></tr></tbody></table></figure><p>better-scroll 提供了一个类，实例化的第一个参数是一个原生的 DOM 对象。当然，如果传递的是一个字符串，better-scroll 内部会尝试调用 querySelector 去获取这个 DOM 对象，所以初始化代码也可以是这样：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span><br><span class="line"><span class="keyword">let</span> scroll = <span class="keyword">new</span> BScroll(<span class="string">'.wrapper'</span>)</span><br></pre></td></tr></tbody></table></figure><br><h2 id="滚动原理"><a href="#滚动原理" class="headerlink" title="滚动原理"></a>滚动原理</h2><p>很多人已经用过 better-scroll，我收到反馈最多的问题是：</p><blockquote><p>better-scroll 初始化了， 但是没法滚动。</p></blockquote><p>不能滚动是现象，我们得搞清楚这其中的根本原因。在这之前，我们先来看一下浏览器的滚动原理： <strong>浏览器的滚动条大家都会遇到，当页面内容的高度超过视口高度的时候，会出现纵向滚动条；当页面内容的宽度超过视口宽度的时候，会出现横向滚动条。也就是当我们的视口展示不下内容的时候，会通过滚动条的方式让用户滚动屏幕看到剩余的内容。</strong></p><p>better-scroll 也是一样的原理，我们可以用一张图更直观的感受一下：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811215946.png" alt=""></p><p><span style="color:red">绿色部分为 wrapper，也就是父容器，它会有<strong>固定的高度</strong>。黄色部分为 content，它是父容器的<strong>第一个子元素</strong>，它的高度会随着内容的大小而撑高。那么，当 content 的高度不超过父容器的高度，是不能滚动的，而它一旦超过了父容器的高度，我们就可以滚动内容区了，这就是 better-scroll 的滚动原理。</span></p><br><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><br><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>better-scroll 托管在 Npm 上，执行如下命令安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install better-scroll --save</span><br></pre></td></tr></tbody></table></figure><p>接下来就可以在代码中引入了，<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 等构建工具都支持从 node_modules 里引入代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span><br></pre></td></tr></tbody></table></figure><p>如果是 ES5 的语法，如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BScroll = <span class="built_in">require</span>(<span class="string">'better-scroll'</span>)</span><br></pre></td></tr></tbody></table></figure><br><h3 id="script-加载"><a href="#script-加载" class="headerlink" title="script 加载"></a>script 加载</h3><p>better-scroll 也支持直接用 script 加载的方式，加载后会在 window 上挂载一个 BScroll 的对象。</p><p>你可以直接用：<code>https://unpkg.com/better-scroll/dist/bscroll.min.js</code> 这个地址。也可以把 dist 目录下的文件拷贝出去发布到自己的 cdn 服务器。</p><br><h2 id="better-scroll-在Vue项目中的使用"><a href="#better-scroll-在Vue项目中的使用" class="headerlink" title="better-scroll 在Vue项目中的使用"></a>better-scroll 在Vue项目中的使用</h2><br><h3 id="对better-scroll-的简单使用"><a href="#对better-scroll-的简单使用" class="headerlink" title="对better-scroll 的简单使用"></a>对better-scroll 的简单使用</h3><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811222540.png" alt=""></p><br><p>1、由上面知道我们在使用better-scroll 的时候，必须将内容包括在一个wrapper 容器中，里面还有一个content容器，而且我们滚动的内容必须包括在一个标签中，比如上面的ul ，content中只有ul标签。</p><p>2、<strong>我们在better-scroll 初始化的时候，必须在 mounted() 函数中。因为在vue的生命周期中，到了mounted阶段才有真实的DOM，我们才可以获取到 wrapper 。</strong></p><p>3、我们还要给wrapper设置一个固定的高度，用于显示滚动。</p><br><p>测试结果：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811223454.png" alt=""></p><br><h3 id="监听滚动位置"><a href="#监听滚动位置" class="headerlink" title="监听滚动位置"></a>监听滚动位置</h3><br><p><strong>默认情况下 better-scroll 是无法实时监听页面的滚动位置的。</strong> 这样我们就需要给 better-scroll 进行一些配置。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted () {</span><br><span class="line">  <span class="keyword">this</span>.bscorll = <span class="keyword">new</span> bScorll(<span class="keyword">this</span>.$refs.wrapper,{</span><br><span class="line">   <span class="comment">//在这里添加配置项  </span></span><br><span class="line">  })</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811224350.png" alt=""></p><br><p>probeType</p><p>  类型：Number</p><p>  默认值：0</p><p>  可选值：1、2、3</p><p>作用：有时候我们需要知道滚动的位置。</p><p>当 probeType 为 1 的时候，会非实时（屏幕滑动超过一定时间后）派发<a href="https://better-scroll.github.io/docs/zh-CN/guide/api.html#scroll" target="_blank" rel="noopener">scroll 事件</a>；</p><p>当 probeType 为 2 的时候，会在屏幕滑动的过程中实时的派发 scroll 事件；（在手指滚动的过程中侦测，手指离开后的惯性滚动过程中不侦测。）</p><p>当 probeType 为 3 的时候，不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件。( 就是我们用手用力滑动的时候，手放开之后，屏幕还在滑动，这就叫momentum 滚动动画 )</p><p>如果没有设置该值，其默认值为 0，即不派发 scroll 事件。</p><br><h3 id="上拉加载更多"><a href="#上拉加载更多" class="headerlink" title="上拉加载更多"></a>上拉加载更多</h3><br><p><a href="https://better-scroll.github.io/docs/zh-CN/plugins/pullup.html#pullup" target="_blank" rel="noopener">传送门</a></p><p>当我们上拉页面的时候 有时候需要请求更多的数据，这个时候就可以使用上拉加载pullup 。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811225600.png" alt=""></p><p>效果图：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811225703.png" alt=""></p><br><p>等我们将新的数据展示完成之后，如果我们还有继续去上拉加载请求数据的话，就不行了。</p><p>我们可以这样做：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811230405.png" alt=""></p><p><strong>在请求完成数据之后，用bscorll 实例去调用 finnishPullUp() 函数。这样在可以多次使用上拉加载了。</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811230559.png" alt=""></p><h3 id="click-事件"><a href="#click-事件" class="headerlink" title="click 事件"></a>click 事件</h3><p>BetterScroll 默认会阻止浏览器的原生 click 事件。当设置为 true，BetterScroll 会派发一个 click 事件，我们会给派发的 event 参数加一个私有属性 <code>_constructed</code>，值为 true。</p><p>比如我们给 第一个里添加一个点击事件liclick。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811231017.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811231227.png" alt=""></p><p><strong>我们发现设置点击事件之后 点击并没有什么反应。</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811231206.png" alt=""></p><br><p>当我配置了 click：true 之后。我们在点击，就会有效果。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811231453.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811231431.png" alt=""></p><br><h2 id="对better-scroll-进行封装"><a href="#对better-scroll-进行封装" class="headerlink" title="对better-scroll 进行封装"></a>对better-scroll 进行封装</h2><br><p>我们为什么要对better-scroll 进行封装呐？我们来看一个图</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811232034.png" alt=""></p><br><p>如果我们不封装，直接在每一个页面中都引入better-scroll ，耦合度太强，由于better-scroll是第三方插件，如果哪一天这个插件不能使用，不再出现重大bug，不再维护了，我们就需要每个页面都需要修改，很是不好。</p><p>当我们封装一下的时候，我们使用滚动的时候，只需要面向 我们封装的scroll.vue 来使用，而scroll.vue 是面向 better-scroll 的。这样即使有一天这个插件不能使用，不再出现重大bug，不再维护了。我们只需修改我们封装的scroll.vue 即可。</p><br><p>我这里对scroll.vue 进行简单的封装一下 。scroll.vue</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">      &lt;slot&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      scroll: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 组件创建完后调用。</span></span><br><span class="line">  mounted () {</span><br><span class="line">    <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.wrapper,{</span><br><span class="line">      click:<span class="literal">true</span></span><br><span class="line">      </span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></tbody></table></figure><p>如果有需要其他的功能，我们可以自己添加。</p><p>使用：</p><p>引入scroll.vue，并注册，将滚动的内容 添加到 注册的标签中。并为其设置一个高度</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811234651.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200811235048.png" alt=""></p><br><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>BetterScroll 2.X 里面，我们将 1.X 耦合的 feature 拆分至插件，以达到按需加载、减少包体积的目的。因此，<code>@better-scroll/core</code> 只提供了最核心的滚动能力。如果想要实现<strong>上拉刷新</strong>、<strong>下拉加载</strong>的功能，你需要使用对应的<a href="https://better-scroll.github.io/zh-CN/plugins" target="_blank" rel="noopener">插件</a>。</p><p>BetterScroll 1.x : <a href="https://ustbhuangyi.github.io/better-scroll/doc/zh-hans/#better-scroll%20%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener">传送门</a></p><p>BetterScroll 2.x ：<a href="https://better-scroll.github.io/docs/zh-CN/guide/#betterscroll-%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener">传送门</a></p><p>当 better-scroll 遇见 Vue：<a href="https://zhuanlan.zhihu.com/p/27407024" target="_blank" rel="noopener">传送门</a></p><br><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> BetterScroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 长度单位</title>
      <link href="/articl/6478c671.html"/>
      <url>/articl/6478c671.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/51479d14d0014d2ebbc2c58d5f0c478d.jpg" alt=""></p><a id="more"></a><p>CSS 有几个不同的单位用于表示长度。</p><p>一些设置 CSS 长度的属性有 width, margin, padding, font-size, border-width, 等。</p><p>长度有一个数字和单位组成如 10px, 2em, 等。</p><p>数字与单位之间不能出现空格。如果长度值为 0，则可以省略单位。</p><p>对于一些 CSS 属性，长度可以是负数。</p><p>有两种类型的长度单位：相对和绝对。</p><br><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>下表中的数字表示支持该长度单位的最低浏览器版本。</p><table><thead><tr><th align="left">长度单位</th><th align="left">Chrome</th><th align="left">IE</th><th align="left">Firefox</th><th align="left">Safari</th><th align="left">Opera</th></tr></thead><tbody><tr><td align="left">em, ex, %, px, cm, mm, in, pt, pc</td><td align="left">1.0</td><td align="left">3.0</td><td align="left">1.0</td><td align="left">1.0</td><td align="left">3.5</td></tr><tr><td align="left">ch</td><td align="left">27.0</td><td align="left">9.0</td><td align="left">1.0</td><td align="left">7.0</td><td align="left">20.0</td></tr><tr><td align="left">rem</td><td align="left">4.0</td><td align="left">9.0</td><td align="left">3.6</td><td align="left">4.1</td><td align="left">11.6</td></tr><tr><td align="left">vh, vw</td><td align="left">20.0</td><td align="left">9.0</td><td align="left">19.0</td><td align="left">6.0</td><td align="left">20.0</td></tr><tr><td align="left">vmin</td><td align="left">20.0</td><td align="left">9.0*</td><td align="left">19.0</td><td align="left">6.0</td><td align="left">20.0</td></tr><tr><td align="left">vmax</td><td align="left">26.0</td><td align="left">不支持</td><td align="left">19.0</td><td align="left">不支持</td><td align="left">20.0</td></tr></tbody></table><p><span style="color:red"><strong>注意:</strong> Internet Explorer 9 通过不标准的名称 vm 来支持 vmin 。</span></p><br><h2 id="相对长度"><a href="#相对长度" class="headerlink" title="相对长度"></a>相对长度</h2><p>相对长度单位指定了一个长度相对于另一个长度的属性。对于不同的设备相对长度更适用。</p><table><thead><tr><th align="left">单位</th><th align="left">描述</th><th align="left">在线实例</th></tr></thead><tbody><tr><td align="left">em</td><td align="left">它是描述相对于应用在当前元素的字体尺寸，所以它也是相对长度单位。一般浏览器字体大小默认为16px，则2em == 32px；</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_em" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">ex</td><td align="left">依赖于英文字母小 x 的高度</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_ex" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">ch</td><td align="left">数字 0 的宽度</td><td align="left"></td></tr><tr><td align="left">rem</td><td align="left">rem 是根 em（root em）的缩写，rem作用于非根元素时，相对于根元素字体大小；rem作用于根元素字体大小时，相对于其出初始字体大小。</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_rem" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">vw</td><td align="left">viewpoint width，视窗宽度，1vw=视窗宽度的1%</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_vw" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left"><span style="color:red">vh</span></td><td align="left"><span style="color:red"><strong>viewpoint height，视窗高度，1vh=视窗高度的1%</strong></span></td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_vh" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">vmin</td><td align="left">vw和vh中较小的那个。</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_vmin" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">vmax</td><td align="left">vw和vh中较大的那个。</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_vmax" target="_blank" rel="noopener">尝试一下</a></td></tr></tbody></table><p><span style="color:red"><strong>提示:</strong> rem与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。</span></p><br><h2 id="绝对长度"><a href="#绝对长度" class="headerlink" title="绝对长度"></a>绝对长度</h2><p>绝对长度单位是一个固定的值，它反应一个真实的物理尺寸。绝对长度单位视输出介质而定，不依赖于环境（显示器、分辨率、操作系统等）。</p><table><thead><tr><th align="left">单位</th><th align="left">描述</th><th align="left">在线实例</th></tr></thead><tbody><tr><td align="left">cm</td><td align="left">厘米</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_cm" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">mm</td><td align="left">毫米</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_mm" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">in</td><td align="left">英寸 (1in = 96px = 2.54cm)</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_in" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">px</td><td align="left">像素 (1px = 1/96th of 1in)</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_px" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">pt</td><td align="left">point，大约1/72英寸； (1pt = 1/72in)</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_pt" target="_blank" rel="noopener">尝试一下</a></td></tr><tr><td align="left">pc</td><td align="left">pica，大约6pt，1/6英寸； (1pc = 12 pt)</td><td align="left"><a href="https://www.runoob.com/try/tryit.php?filename=trycss_unit_pc" target="_blank" rel="noopener">尝试一下</a></td></tr></tbody></table><p>像素或许被认为是最好的”设备像素”，而这种像素长度和你在显示器上看到的文字屏幕像素无关。px实际上是一个按角度度量的单位。</p><br><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目开发前的一些准备</title>
      <link href="/articl/6a344f14.html"/>
      <url>/articl/6a344f14.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/f98515ce90ba41fdaa00b85e9b6270ab.jpeg" alt=""></p><a id="more"></a><h2 id="1、项目的创建和GitHub托管"><a href="#1、项目的创建和GitHub托管" class="headerlink" title="1、项目的创建和GitHub托管"></a>1、项目的创建和GitHub托管</h2><br><p>使用脚手架创建项目。🏳️‍🌈 <a href="https://aqingya.cn/articl/cd2405e1.html#Vue-CLI%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">传送门</a> 🏳️‍🌈</p><br><p>将项目托管到GitHub上。🏳️‍🌈 <a href="https://aqingya.cn/articl/24707660.html#Git-%E7%BB%93%E5%90%88Github" target="_blank" rel="noopener">传送门</a> 🏳️‍🌈</p><br><h2 id="2、划分项目的目录结构"><a href="#2、划分项目的目录结构" class="headerlink" title="2、划分项目的目录结构"></a>2、划分项目的目录结构</h2><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200809120108.png" alt=""></p><br><h2 id="3、基本css文件的引入"><a href="#3、基本css文件的引入" class="headerlink" title="3、基本css文件的引入"></a>3、基本css文件的引入</h2><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200809120242.png" alt=""></p><p>我们一般需要这两个基本文件</p><p>base.css 放一些我们要公共使用的基本css样式。</p><p>normalize.css 不同的浏览器，部分样式可能有一些差异，所以我们要统一他们，就可以使用 normalize.css 。<a href="https://github.com/necolas/normalize.css" target="_blank" rel="noopener">下载地址</a> 。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200809120735.png" alt=""></p><p>引入css文件：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200809120820.png" alt=""></p><br><p>这样我们在做项目的时候，专心在他们对应的组件内写样式就可以了。</p><br><h2 id="3、给项目路径起别名"><a href="#3、给项目路径起别名" class="headerlink" title="3、给项目路径起别名"></a>3、给项目路径起别名</h2><p>VueCLI 2 起别名 。 🏳️‍🌈 <a href="https://aqingya.cn/articl/cd2405e1.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%EF%BC%9A%E8%B5%B7%E5%88%AB%E5%90%8D" target="_blank" rel="noopener">传送门</a> 🏳️‍🌈</p><p>VueCLI 3 起别名 。</p><p>在项目中src根目录创建 vue.config.js文件。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  configureWebpack: {</span><br><span class="line">    resolve: {</span><br><span class="line">      alias: {</span><br><span class="line">        <span class="string">'views'</span>: <span class="string">'@/views'</span>,</span><br><span class="line">        <span class="string">'components'</span>: <span class="string">'@/components'</span>,</span><br><span class="line">        <span class="string">'network'</span>: <span class="string">'@/network'</span>,</span><br><span class="line">        <span class="string">'common'</span>: <span class="string">'@/common'</span>,</span><br><span class="line">        <span class="string">'assets'</span>: <span class="string">'@/assets'</span>,</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>@</code> 是vue内部给我们设置好的别名，<code>"@": "src"</code>，所以这里我们直接使用<code>@</code> 。</p><br><h2 id="4、添加代码规范"><a href="#4、添加代码规范" class="headerlink" title="4、添加代码规范"></a>4、添加代码规范</h2><p>.editorconfig 文件里面说明了一些 我们当前项目中的代码规范。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200809123055.png" alt=""></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue之axios详解</title>
      <link href="/articl/5dae9880.html"/>
      <url>/articl/5dae9880.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/94b7a45ee1c049bda243f034e6172c19.jpg" alt=""></p><a id="more"></a><h2 id="为什么选择axios"><a href="#为什么选择axios" class="headerlink" title="为什么选择axios?"></a>为什么选择axios?</h2><p>🔷 功能特点:</p><p>  🔹在浏览器中发送 XMLHttpRequests 请求</p><p>  🔹在 node.js 中发送 http请求</p><p>  🔹支持 Promise API</p><p>  🔹拦截请求和响应</p><p>  🔹转换请求和响应数据</p><br><h2 id="axios-的请求方式"><a href="#axios-的请求方式" class="headerlink" title="axios 的请求方式"></a>axios 的请求方式</h2><p>🔷 支持多种请求方式:</p><p>  🔹 axios(config)</p><p>  🔹 axios.request(config)</p><p>  🔹 axios.get(url[, config])</p><p>  🔹 axios.delete(url[, config])</p><p>  🔹 axios.head(url[, config])</p><p>  🔹 axios.post(url[, data[, config]])</p><p>  🔹 axios.put(url[, data[, config]])</p><p>  🔹 axios.patch(url[, data[, config]])</p><br><h2 id="axios-发送基本请求"><a href="#axios-发送基本请求" class="headerlink" title="axios 发送基本请求"></a>axios 发送基本请求</h2><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807114603.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807115413.png" alt=""></p><p>这里我们使用了axios(config) 的请求方式。</p><p><span style="color:red"><strong>config是一个对象，它默认是采用 GET 请求的，当然如果想要使用POST请求，可以添加 <code>method：“POST”</code></strong></span></p><p><span style="color:red"><strong>axios 它返回的是一个Promise对象，可以直接在后面使用then catch等方法。</strong></span></p><br><p>使用 axios.get(url[, config]) 发送请求演示。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807115332.png" alt=""></p><br><h2 id="发送并发请求"><a href="#发送并发请求" class="headerlink" title="发送并发请求"></a>发送并发请求</h2><p>有时候, 我们可能需求同时发送两个请求</p><p>使用axios.all, 可以放入多个请求的数组.</p><p>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p><br><p>使用axios.all()</p><p>使用格式： <code>axios.all([axios(config),axios(config)])</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807134444.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807134521.png" alt=""></p><br><p>使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p><p>使用格式： <code>axios.all([axios(config),axios(config)]).then(axios.spread())</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807134923.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807134943.png" alt=""></p><br><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a><strong>全局配置</strong></h2><p>🔷在上面的示例中, 我们的BaseURL是固定的</p><p>  🔹 事实上, 在开发中可能很多参数都是固定的。</p><p>  🔹 这个时候我们可以进行一些抽取, 将一些公共的配置抽取出来，也可以利用axiox的全局配置。</p><p><code>axios.defaults</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807140410.png" alt=""></p><br><h2 id="常用的配置选项"><a href="#常用的配置选项" class="headerlink" title="常用的配置选项"></a>常用的配置选项</h2><hr><p>🔷请求类型</p><p>  🔹 method: ‘get’,</p><p>🔷URL查询对象</p><p>  🔹 params:{ id: 12 },</p><hr><p>🔷请求类型</p><p>  🔹 method: ‘post’,</p><p>🔷request body</p><p>  🔹 data: { key: ‘aa’},</p><hr><p>我们需要注意的是，如果请求类型的get，则后面添加的请求参数应该使用的是 params{ } 。如果请求类型的post，则后面添加的请求参数应该使用的是 data{ } 。</p><br><p>🔷请求地址</p><p>  🔹 url: ‘/user’,</p><p>🔷请根路径</p><p>  🔹 baseURL: ‘<a href="http://www.mt.com/api'" target="_blank" rel="noopener">http://www.mt.com/api'</a>,</p><p>🔷超时设置s</p><p>  🔹 timeout: 1000,</p><p>🔷请求前的数据处理</p><p>  🔹 transformRequest:[function(data){}],</p><p>🔷请求后的数据处理</p><p>  🔹 transformResponse: [function(data){}],</p><p>🔷自定义的请求头</p><p>  🔹 headers:{‘x-Requested-With’:’XMLHttpRequest’},</p><p>🔷查询对象序列化函数</p><p>  🔹 paramsSerializer: function(params){ }</p><p>🔷跨域是否带Token</p><p>  🔹 withCredentials: false,</p><p>🔷自定义请求处理</p><p>  🔹 adapter: function(resolve, reject, config){},</p><p>🔷身份验证信息</p><p>  🔹 auth: { uname: ‘’, pwd: ‘12’},</p><p>🔷响应的数据格式 json / blob /document /arraybuffer / text / stream</p><p>  🔹 responseType: ‘json’,</p><br><h2 id="axios-实例"><a href="#axios-实例" class="headerlink" title="axios 实例"></a>axios 实例</h2><p>🔷 为什么要创建axios的实例呢?</p><p>  🔹 当我们从axios模块中导入对象时, 使用的实例是默认的实例.</p><p>  🔹 当给该实例设置一些默认配置时, 这些配置就被固定下来了.</p><p>  🔹 但是后续开发中, 某些配置可能会不太一样.</p><p>  🔹 比如某些请求需要使用特定的<strong>baseURL</strong>或者<strong>timeout</strong>或者<strong>content-Type</strong>等.</p><p>  🔹 这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</p><p>所以当我们的业务比较多的时候，请求接口比较多，我们使用上面的全局配置就不行了。这个时候我们就要使用axios实例了。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807163535.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807163548.png" alt=""></p><br><h2 id="网络请求模块的封装"><a href="#网络请求模块的封装" class="headerlink" title="网络请求模块的封装"></a>网络请求模块的封装</h2><p>我们为什么要axios进行封装？</p><p>如果我们使用的 axios 有一天不进行了维护，或者出现重大的bug ，我们需要换其他的第三方网络请求框架。那么我们需要在每一个组件中都需要修改，很是不好。所以我们对网络请求模块进行封装，即使有一个我们需要改换其他的第三方网络请求框架，就只对我们的网络请求模块进去修改即可。</p><br><p>创建一个network文件夹。这里面放对网络封装相关的文件。</p><p>创建request.js</p><br><p>封装一：</p><p>使用回调函数。</p><p>request.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config, success, failure</span>) </span>{</span><br><span class="line">  <span class="comment">// 1.创建实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create({</span><br><span class="line">      baseURL: <span class="string">'http://111.111.111.111:8000'</span>,</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 2、发送网络请求请求</span></span><br><span class="line">  instance(config)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">      success(res)</span><br><span class="line">    })</span><br><span class="line">    .catch(<span class="function"><span class="params">rej</span> =&gt;</span> {</span><br><span class="line">      failure(rej)</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用模块：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { request } <span class="keyword">from</span> <span class="string">"./newwork/request"</span></span><br><span class="line"></span><br><span class="line">request({</span><br><span class="line">  url: <span class="string">'home/multidata'</span></span><br><span class="line">}, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">})</span><br><span class="line">request({</span><br><span class="line">  url: <span class="string">"api/z8/home/data"</span>,</span><br><span class="line">  params: { <span class="attr">type</span>: <span class="string">'pop'</span>, <span class="attr">page</span>: <span class="number">1</span> }</span><br><span class="line">}, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><br><p>封装二：</p><p>使用回调函数。</p><p>request.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>{</span><br><span class="line">  <span class="comment">// 1.创建实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create({</span><br><span class="line">      baseURL: <span class="string">'http://111.111.111.111:8000'</span>,</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、发送网络请求请求</span></span><br><span class="line">  instance(config.baseConfig)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">      config.success(res)</span><br><span class="line">    })</span><br><span class="line">    .catch(<span class="function"><span class="params">rej</span> =&gt;</span> {</span><br><span class="line">      fonfig.failure(rej)</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用模块：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">request({</span><br><span class="line">  baseConfig: {</span><br><span class="line">    url: <span class="string">'/home/multidata'</span></span><br><span class="line">  },</span><br><span class="line">  success(res) {</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  },</span><br><span class="line">  failure(rej) {</span><br><span class="line">    <span class="built_in">console</span>.log(rej);</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><br><p>封装三：</p><p>使用Promise。</p><p>request.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// 1.创建实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create({</span><br><span class="line">      baseURL: <span class="string">'http://111.111.111.111:8000'</span>,</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、发送网络请求请求</span></span><br><span class="line">    instance(config)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">        resolve(res)</span><br><span class="line">      })</span><br><span class="line">      .catch(<span class="function"><span class="params">rej</span> =&gt;</span> {</span><br><span class="line">        reject(rej)</span><br><span class="line">      })</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用模块：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { request } <span class="keyword">from</span> <span class="string">"./newwork/request"</span></span><br><span class="line"></span><br><span class="line">request({</span><br><span class="line">  url: <span class="string">'home/multidata'</span></span><br><span class="line"></span><br><span class="line">}).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">}).catch(<span class="function"><span class="params">rej</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(rej);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><br><p>封装四：（最终方案）</p><p>使用Promise。</p><p>request.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.创建实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create({</span><br><span class="line">      baseURL: <span class="string">'http://111.111.111.111:8000'</span>,</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 2、发送网络请求请求</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// axios 实例本身返回是一个Promise对象</span></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用模块：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { request } <span class="keyword">from</span> <span class="string">"./newwork/request"</span></span><br><span class="line"></span><br><span class="line">request({</span><br><span class="line">  url: <span class="string">'home/multidata'</span></span><br><span class="line"></span><br><span class="line">}).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">}).catch(<span class="function"><span class="params">rej</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(rej);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><br><h2 id="axios-拦截器的使用"><a href="#axios-拦截器的使用" class="headerlink" title="axios 拦截器的使用"></a>axios 拦截器的使用</h2><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。</p><br><h3 id="axios-请求拦截器"><a href="#axios-请求拦截器" class="headerlink" title="axios 请求拦截器"></a>axios 请求拦截器</h3><p>🔷 为什么要拦截请求呐。</p><p>  🔹 我们对请求的config进行一些修改。</p><p>  🔹 比如config中的一些信息不符合服务器的要求。</p><p>  🔹 比如每次发送网络请求的时候，都希望在界面中显示一个请求的图标。</p><p>  🔹 比如某些网络请求（比如 登陆（携带token）），必须携带一些特殊的信息。</p><p><code>instance.interceptors.request.use(参数一，参数二)</code> 传入两个参数，拦截请求成功函数，和拦截请求失败函数。</p><p>注意：我们拦截之后，对请求做完一系列修改，我们要返回请求，不然后面我们请求不到数据。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807202022.png" alt=""></p><br><p>🔷 请求拦截可以做到的事情：</p><p>  🔹 请求拦截中错误拦截较少，通常都是配置相关的拦截。</p><p>  🔹 可能的拦截的错误：比如请求超时，可以将页面跳转到一个错误页面中。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807203844.png" alt=""></p><br><h3 id="axios-响应拦截器"><a href="#axios-响应拦截器" class="headerlink" title="axios 响应拦截器"></a>axios 响应拦截器</h3><p><code>instance.interceptors.response.use()</code> 响应拦截也是两个参数。拦截响应成功函数，和拦截响应失败函数。</p><p>同样我们拦截到响应之后，要返回响应，通常返回<code>return response.data</code> 即可，因为我们只要数据。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807203333.png" alt=""></p><br><p>🔷 响应拦截中完成的事情：</p><p>  🔹 响应的成功拦截中，主要是对数据进行过滤。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807204036.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807204024.png" alt=""></p><br><p>  🔹 响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200807204128.png" alt=""></p><p><br><br></p><p>request.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.创建实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create({</span><br><span class="line">      baseURL: <span class="string">'http://11.11.11.11:8000'</span>,</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 2.请求拦截</span></span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  }, err =&gt; {</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 响应拦截</span></span><br><span class="line">  instance.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">      <span class="keyword">return</span> response.data</span><br><span class="line">    }, err =&gt; {</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 3、发送网络请求请求</span></span><br><span class="line">    <span class="comment">// axios 实例返回是一个Promise对象</span></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> axios </tag>
            
            <tag> 请求模块封装 </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐视频剪辑免费网站</title>
      <link href="/articl/8edb3ac3.html"/>
      <url>/articl/8edb3ac3.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1722a96792420630.png" alt=""></p><a id="more"></a><p><br><br><br></p><h2 id="123APPS"><a href="#123APPS" class="headerlink" title="123APPS"></a>123APPS</h2><p>免费网络应用 ：剪辑音乐视频，格式转化: <a href="https://123apps.com/cn/" target="_blank" rel="noopener">https://123apps.com/cn/</a></p><p><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 稽古振今 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具网站 </tag>
            
            <tag> 音乐剪辑 </tag>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueX 详解</title>
      <link href="/articl/dd6e7346.html"/>
      <url>/articl/dd6e7346.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/0ad7df3c78a34d90b3a7a49a82ea9120.jpg" alt=""></p><a id="more"></a><h2 id="认识VueX"><a href="#认识VueX" class="headerlink" title="认识VueX"></a>认识VueX</h2><h3 id="Vuex是做什么的"><a href="#Vuex是做什么的" class="headerlink" title="Vuex是做什么的?"></a>Vuex是做什么的?</h3><p>🔷 官方解释：Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><p>  🔹 它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>  🔹 Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">devtools</a><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener"> extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><br><p><strong>🔷 状态管理</strong>到底是什么？</p><p>  <strong>🔹 状态管理模式、集中式存储管理</strong>这些名词听起来就非常高大上，让人捉摸不透。</p><p>  🔹 其实，你可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。</p><p>  🔹 然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。</p><p>  🔹 那么，多个组件就可以共享这个对象中的所有变量属性.</p><br><p><span style="color:red">Vuex就是为了提供这样一个在多个组件间共享状态的插件，而且是响应式的。</span></p><br><p>🔷 管理什么状态呢 ?</p><p>  🔹 如果你做过大型开放，你一定遇到过多个状态，在多个界面间的共享问题。</p><p>  🔹 比如用户的登录状态、用户名称、头像、地理位置信息等等。</p><p>  🔹 比如商品的收藏、购物车中的物品等等。</p><p>  🔹 这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的</p><br><p>✔ 单页面的状态管理———————————————————————————————</p><br><p>我们知道，要在单个组件中进行状态管理是一件非常简单的事情</p><p>什么意思呢？我们来看下面的图片。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803204415.png" alt=""></p><p>🔷 这图片中的三种东西，怎么理解呢？</p><p>  🔹 State：不用多说，就是我们的状态。（你姑且可以当做就是data中的属性）</p><p>  🔹 View：视图层，可以针对State的变化，显示不同的信息。（这个好理解吧？）</p><p>  🔹 Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</p><br><p>举个简单的例子:</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803204525.png" alt=""></p><p>我们来实现这样的一个简单的小案例。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/3262362.png" alt=""></p><p>🔷 在这个案例中，我们有木有状态需要管理呢？没错，就是个数counter。</p><p>🔷 counter需要某种方式被记录下来，也就是我们的State。</p><p>🔷 counter目前的值需要被显示在界面中，也就是我们的View部分。</p><p>🔷 界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），需要去更新状态，也就是我们的Actions</p><p>这不就是上面的流程图了吗？</p><br><p>✔ 多状态管理———————————————————————————————</p><br><p>🔷 Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？</p><p>  🔹 多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新）</p><p>  🔹 不同界面的Actions都想修改同一个状态（Home.vue需要修改，Profile.vue也需要修改这个状态）</p><p>🔷 也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的。</p><p>  🔹 状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。</p><p>  🔹 但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！</p><p>  🔹 没错，Vuex就是为我们提供这个大管家的工具。</p><p>🔷 全局单例模式（大管家）</p><p>  🔹 我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。</p><p>  🔹 之后，你们每个试图，按照我<strong>规定好的</strong>规定，进行访问和修改等操作。</p><p>这就是Vuex背后的基本思想。</p><br><p>✔ Vuex状态管理图例—————————-</p><br><p>当我们去修改Vuex 中的 State的时候，我们不应该直接去修改 State ，而是通过 Actions、Mutations 进而来修改State。</p><p>Devtools：它是Vue开发的一个浏览器插件，通过Mutations，它可以记录我们每一次修改State。</p><p>Actions：如果我们请求是异步操作的话，我们会通过Actions，将异步转化为同步，因为Devtools通过Mutations来监听我们对 State 的修改只能是同步操作。如果请求是同步的话，我们可以绕过Actions。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803210504.png" alt=""></p><br><h2 id="Vuex插件的安装"><a href="#Vuex插件的安装" class="headerlink" title="Vuex插件的安装"></a>Vuex插件的安装</h2><p>安装生产时依赖：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vuex --save</span><br></pre></td></tr></tbody></table></figure><be><h2 id="Vuex-基本使用"><a href="#Vuex-基本使用" class="headerlink" title="Vuex 基本使用"></a>Vuex 基本使用</h2><p>我们还是实现一下之前简单的案例</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803221526.png" alt=""></p><p>🔷 首先，我们需要在某个地方存放我们的Vuex代码：</p><p>   🔹 这里，我们先创建一个文件夹store，并且在其中创建一个index.js文件</p><p>   🔹 在index.js文件中写入如下代码：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803222114.png" alt=""></p><br><p><strong>✔ 挂载到</strong>Vue实例中</p><p>🔷其次，我们让所有的Vue组件都可以使用这个store对象</p><p>   🔹 来到main.js文件，导入store对象，并且放在new Vue中</p><p>   🔹 这样，在其他Vue组件中，我们就可以通过this.$store的方式，获取到这个store对象了</p><p>挂载到Vue实例中 相当于执行 <code>Vue.prototype.$store = store</code> ，将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803222301.png" alt=""></p><br><p>✔ 使用Vuex</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/image-20200803222537327.png" alt=""></p><br><p>🔷我们来对使用步骤，做一个简单的小节：</p><p>  🔹 1.提取出一个公共的store对象，用于保存在多个组件中共享的状态。</p><p>  🔹 2.将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到</p><p>  🔹 3.在其他组件中使用store对象中保存的状态即可</p><p>     通过<code>this.$store.state</code>.属性的方式来访问状态</p><p>     通过<code>this.$store.commit('mutation中方法')</code>来修改状态</p><br><p>🔷注意事项：</p><p>  🔹 我们是通过提交mutation的方式，而非直接改变store.state.count。</p><p>  🔹 这是因为Vuex可以更明确的追踪状态的变化，所以不要直接改变store.state.count的值。</p><br><p>所以 可以通过浏览器插件Devtools来跟踪 state 的状态。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803223121.png" alt=""></p><br><h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><br><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>🔷Vuex提出使用单一状态树, 什么是单一状态树呢？</p><p>  🔹 英文名称是Single Source of Truth，也可以翻译成单一数据源。</p><p>🔷但是，它是什么呢？我们来看一个生活中的例子。</p><p>  🔹 OK，我用一个生活中的例子做一个简单的类比。</p><p>  🔹 我们知道，在国内我们有很多的信息需要被记录，比如上学时的个人档案，工作后的社保记录，公积金记录，结婚后的婚姻信息，以及其他相关的户口、医疗、文凭、房产记录等等（还有很多信息）。</p><p>  🔹 这些信息被分散在很多地方进行管理，有一天你需要办某个业务时(比如入户某个城市)，你会发现你需要到各个对应的工作地点去打印、盖章各种资料信息，最后到一个地方提交证明你的信息无误。</p><p>  🔹 这种保存信息的方案，不仅仅低效，而且不方便管理，以及日后的维护也是一个庞大的工作(需要大量的各个部门的人力来维护，当然国家目前已经在完善我们的这个系统了)。</p><br><p>🔷这个和我们在应用开发中比较类似：</p><p>  🔹 如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难。</p><p>  🔹 <span style="color:red">所以Vuex也使用了单一状态树来管理应用层级的全部状态。</span></p><p>  🔹 <span style="color:red">单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</span></p><br><h3 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h3><p>有时候，我们需要从Stare中获取的一些经过改变的数据，我们就可以使用Getters。这比较类似于<a href="https://aqingya.cn/articl/3a0cc30e.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-computed" target="_blank" rel="noopener">计算属性</a>。</p><p>举个简单的例子：在State中有一个数组，包含一些学生的基本信息。我们需要拿到age 大于18 的学生的信息，我们就可以使用Getters。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805105113.png" alt=""></p><br><p>使用getters <code>&lt;h2&gt;&lt;/h2&gt;</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805105441.png" alt=""></p><p>就获取到了age 大于18 的学生信息。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805105503.png" alt=""></p><hr><p><br>要是放在以前，我们可能会使用computed属性。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805110256.png" alt=""></p><p>但是也有一个缺点，比如我们想要在多个组件中都同样的数据变换，那么我们都在在各种的组件中设置同样的computed，这样很不好。我们就可以使用vuex里的gitters属性。</p><br><hr><br><p>我们在提一个需求：要得到年纪大于18 的学生的人数。我们就可以这样来做。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805111557.png" alt=""></p><p>使用该函数：<code>$store.getters.more18ageLength</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805111642.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805111715.png" alt=""></p><br><p>我们再来看一个需求，我们不要把age写死，而是当做参数传递进来。</p><p>首先我们想到 的是直接在moreage中传递参数，但是这样是不行的，我们可以return 一个函数，在这个函数中传入参数，这样我们在使用的时候就可以，<code>$store.getters.moreage(20)</code> 。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805112206.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805112235.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805112425.png" alt=""></p><br><p>总结：</p><p><span style="color:red">🔹 如果我们没有传递参数的时候，我们就可以在getters中直接定义一个函数。</span></p><p><span style="color:red">🔹 如果我们需要使用我们在getters中定义过的属性，我们就可以在定义函数的时候，将getters做为第二个参数传递进去。</span></p><p><span style="color:red">🔹 如果我们需要在函数中传递参数，只能让getters本身返回另一个函数。参数定义在这个函数中，在使用是时候就可以传递参数了。</span></p><br><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><be><h4 id="Mutation状态更新"><a href="#Mutation状态更新" class="headerlink" title="Mutation状态更新"></a>Mutation状态更新</h4><p>Vuex的store状态的更新唯一方式：提交Mutation</p><p>🔷Mutation主要包括两部分：</p><p>  🔹 字符串的事件类型（type）</p><p>  🔹 一个回调函数（handler）,该回调函数的第一个参数就是<code>state</code>。</p><p>mutation的定义方式：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805123705.png" alt=""></p><p>通过mutation更新:</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805123712.png" alt=""></p><br><h4 id="Mutation传递参数"><a href="#Mutation传递参数" class="headerlink" title="Mutation传递参数"></a>Mutation传递参数</h4><p>在通过mutation更新数据的时候, 有可能我们希望携带一些<strong>额外的参数</strong></p><p>参数被称为是mutation的载荷(Payload)</p><p>比如我们提这样的一个需求：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805125539.png" alt=""></p><p>点击按钮 可以+5 和+10.</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805125706.png" alt=""></p><p>设置鼠标点击事件，并将参数，放到commit 的第二个参数的位置。第一个参数是事件类型（type）</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805130005.png" alt=""></p><p>muation 中的代码：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805130521.png" alt=""></p><hr><p>但是如果参数不止一个 ，这个时候我们就要使用对象的形式来传递 ，也就是payload是一个对象。用的时候在取出需要的信息。</p><p>比如我们添加一个学生的信息。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805132013.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805132245.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805132401.png" alt=""></p><br><h4 id="Mutation-的提交风格"><a href="#Mutation-的提交风格" class="headerlink" title="Mutation 的提交风格"></a>Mutation 的提交风格</h4><p>上面的通过<strong>commit</strong>进行提交是一种普通的方式。</p><p>Vue还提供了另外一种风格, 它是一个包含type属性的对象。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805133804.png" alt=""></p><p>Mutation中的处理方式是将整个commit的对象作为payload使用。</p><p>我们将它打印一下，他就是整个commit的对象</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805133945.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805133923.png" alt=""></p><p>所以我们使用的时候 我们将count取出来 就行了，代码没有改变, 依然如下:</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805134049.png" alt=""></p><br><h4 id="Mutation响应式规则"><a href="#Mutation响应式规则" class="headerlink" title="Mutation响应式规则"></a>Mutation响应式规则</h4><p>Vuex的store中的state是响应式的, 当state中的数据发生改变时, Vue组件会自动更新。</p><p>这就要求我们必须遵守一些Vuex对应的规则:</p><p>  <span style="color:red">1、提前在store中初始化好所需的属性.</span></p><p>  2、当给state中的对象添加新属性时, 使用下面的方式:</p><p>    方式一: 使用Vue.set(obj, ‘newProp’, 123)</p><p>    方式二: 用新对象给旧对象重新赋值</p><p>我们来看一个例子：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805143849.png" alt=""></p><p>那我们来对info添加一些属性。比如heigth。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805145123.png" alt=""></p><p>当我们点击按钮的时候，虽然可以添加到state的info中，但是页面没有发生变化，这样添加无法做到响应式。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805145238.png" alt=""></p><p>我们可以使用<code>Vue.set(obj, 'newProp', 123)</code> 的方式。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805145756.png" alt=""></p><p>这样我们当点击按钮的时候，不仅state中的info会发生改变，页面中也会发生响应式的变化。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805150117.png" alt=""></p><br><p>这是添加属性，当然删除属性也是一样的。</p><p>我们要做到响应式 还是要使用<code>Vue.delete(state.info,"age")</code>。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805150834.png" alt=""></p><br><h4 id="Mutation常量类型"><a href="#Mutation常量类型" class="headerlink" title="Mutation常量类型"></a>Mutation常量类型</h4><p>🔷 我们来考虑下面的问题:</p><p>  🔹 在mutation中, 我们定义了很多事件类型(也就是其中的方法名称).</p><p>  🔹 当我们的项目增大时, Vuex管理的状态越来越多, 需要更新状态的情况越来越多, 那么意味着Mutation中的方法越来越多.</p><p>  🔹 方法过多, 使用者需要花费大量的经历去记住这些方法, 甚至是多个文件间来回切换, 查看方法名称, 甚至如果不是复制的时候, 可能还会出现写错的情况.</p><br><p>🔷 如何避免上述的问题呢?</p><p>  🔹 在各种Flux实现中, 一种很常见的方案就是使用<strong>常量</strong>替代Mutation事件的类型</p><p>  🔹 我们可以将这些常量放在一个单独的文件中, 方便管理以及让整个app所有的事件类型一目了然.</p><br><p>🔷 具体怎么做呢?</p><p>  🔹 我们可以创建一个文件: mutation-types.js, 并且在其中定义我们的常量.</p><p>  🔹 定义常量时, 我们可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</p><br><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805154317.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805154343.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805154401.png" alt=""></p><br><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><h4 id="Mutation同步函数"><a href="#Mutation同步函数" class="headerlink" title="Mutation同步函数"></a>Mutation同步函数</h4><p>🔷通常情况下, Vuex要求我们Mutation中的方法必须是同步方法.</p><p>  🔹 主要的原因是当我们使用devtools时, 可以devtools可以帮助我们捕捉mutation的快照.</p><p>  🔹 但是如果是异步操作, 那么devtools将不能很好的追踪这个操作什么时候会被完成.</p><p>举个简单的例子，我们这还是使用setTimeout() 来模拟异步请求。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805160041.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805160026.png" alt=""></p><p>当我们点击按钮的时候，3秒时候的确页面发生了修改，但是我们DevTools工具的中的name并没有修改。这是因为我们在Mutation中使用了异步函数。</p><p>这样的话，当我们去用Devtools改bug的时候，就会很蒙，不知道到底哪一个是对的。</p><p>这个时候我们就要使用我们的Action</p><br><h4 id="Action基本定义"><a href="#Action基本定义" class="headerlink" title="Action基本定义"></a>Action基本定义</h4><p>🔷我们强调, 不要再Mutation中进行异步操作.</p><p>  🔹 但是某些情况, 我们确实希望在Vuex中进行一些异步操作, 比如网络请求, 必然是异步的. 这个时候怎么处理呢?</p><p>  🔹 Action类似于Mutation, 但是是用来代替Mutation进行异步操作的.</p><p>Action的基本使用代码如下:</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805165816.png" alt=""></p><p><br>当我们提交的时候，这里就不用commit了，就要使用 dispatch。dipatch用于提交Actions，commit用于提交Mutation。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805171504.png" alt=""></p><br><h4 id="Action参数的传递"><a href="#Action参数的传递" class="headerlink" title="Action参数的传递"></a>Action参数的传递</h4><p>当然我们也可以携带一些参数，也可以添加一个回调函数，告诉外界我们的异步操作已经完成了。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805171043.png" alt=""></p><br><h4 id="Action返回的Promise"><a href="#Action返回的Promise" class="headerlink" title="Action返回的Promise"></a>Action返回的Promise</h4><p>上面回调操作是可以的，但是不够优雅。我们可以使用Promise。Promise经常用于异步操作.</p><p>在Action中, 我们可以将异步操作放在一个Promise中, 并且在成功或者失败后, 调用对应的resolve或reject。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805174501.png" alt=""></p><p>return 一个new Promise 对象的时候。相当于把我们new 的Promise对象，替换了 <code>this.$store.dispatch("amodify", "我是modity的参数")</code> ，在它后面调用then() 方法。就可以继续使用我们的promise了。</p><br><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><br><h4 id="认识Module"><a href="#认识Module" class="headerlink" title="认识Module"></a>认识Module</h4><p>🔷Module是模块的意思, 为什么在Vuex中我们要使用模块呢?</p><p>  🔹 Vue使用单一状态树,那么也意味着很多状态都会交给Vuex来管理.</p><p>  🔹 当应用变得非常复杂时,store对象就有可能变得相当臃肿.</p><p>  🔹 为了解决这个问题, Vuex允许我们将store分割成模块(Module), 而每个模块拥有自己的state、mutations、actions、getters等</p><br><p>我们按照什么样的方式来组织模块呢?</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805182102.png" alt=""></p><br><h4 id="Moudle局部状态"><a href="#Moudle局部状态" class="headerlink" title="Moudle局部状态"></a>Moudle局部状态</h4><p>上面的代码中, 我们已经有了整体的组织结构, 下面我们来看看具体的局部模块中的代码如何书写.</p><br><p>✔ 模块中的 state————————————————————————————————–</p><br><p>模块中的state是这样定义的：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805191650.png" alt=""></p><p>那我们怎样使用呐？<code>$store.state.a.name</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805191738.png" alt=""></p><br><p>为什么要这么使用<code>$store.state.a.name</code> 呐，这是因为，最终模块a会放在 store中的state中去。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805192023.png" alt=""></p><br><p>✔ 模块中的 Mutation————————————————————————————————–</p><br><p>定义和之前一样：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805194232.png" alt=""></p><p>在使用的时候，和之前使用的一样，直接commit 就可以了。<code>this.$store.commit('updateName', "灰太狼")</code></p><br><p>✔ 模块中的 Getters————————————————————————————————–</p><br><p>基本使用 和之前的一样。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805195748.png" alt=""></p><br><p>如果我们想获取到 store （大模块）中的state的数据的话，我们可以这样使用。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805201122.png" alt=""></p><p>在模块中，getters的函数可以有第三个参数，rootState 。它就代表了大模块中的state。</p><br><p>✔ 模块中的 Action————————————————————————————————–</p><br><p>actions的写法呢? 接收一个context参数对象</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805204221.png" alt=""></p><p>actions 中的 context.commit 不和之前的一样，它仅仅提交的是自己模块中的 mutations。</p><p>我们来看一下 模块a中的context到底是什么。我们来打印一下。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805205448.png" alt=""></p><p>所以，<span style="color:red">局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState，如果getters中也需要使用全局的状态, 可以接受更多的参数。</span></p><br><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a><strong>项目结构</strong></h2><p>当我们的Vuex帮助我们管理过多的内容时, 好的项目结构可以让我们的代码更加清晰.</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200805210644.png" alt=""></p><p><br><br><br><br></p></be></be><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>px、em、rem区别介绍</title>
      <link href="/articl/62c5ae86.html"/>
      <url>/articl/62c5ae86.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803132806.png" alt=""></p><a id="more"></a><br><h2 id="PX"><a href="#PX" class="headerlink" title="PX"></a>PX</h2><p>px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。</p><p><strong>PX特点</strong></p><ul><li>\1. IE无法调整那些使用px作为单位的字体大小；</li><li>\2. 国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；</li><li>\3. Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。</li></ul><br><h2 id="EM"><a href="#EM" class="headerlink" title="EM"></a>EM</h2><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</p><p><strong>EM特点</strong></p><ul><li>\1. em的值并不是固定的；</li><li>\2. em会继承父级元素的字体大小。</li></ul><blockquote><p><strong>注意：</strong>任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。</p><p>所以我们在写CSS的时候，需要注意两点：</p><ul><li>\1. body选择器中声明Font-size=62.5%；</li><li>\2. 将你的原来的px数值除以10，然后换上em作为单位；</li><li>\3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。</li></ul><p>也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。</p></blockquote><br><h2 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h2><p>rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是一个例子：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> {<span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">font-size</span>:.<span class="number">875rem</span>;}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注意：</strong> 选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。</p></blockquote><br><h2 id="px-与-rem-的选择？"><a href="#px-与-rem-的选择？" class="headerlink" title="px 与 rem 的选择？"></a>px 与 rem 的选择？</h2><p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。</p><p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p><p><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之Promise的使用</title>
      <link href="/articl/6c2238c5.html"/>
      <url>/articl/6c2238c5.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/256f40f171ae48459ab8e570c92a78db.jpeg" alt=""></p><a id="more"></a><br><h2 id="Promise-的基本使用"><a href="#Promise-的基本使用" class="headerlink" title="Promise 的基本使用"></a>Promise 的基本使用</h2><p>🔷Promise到底是做什么的呢？</p><p>  🔹<span style="color:red">Promise是异步编程的一种解决方案。</span></p><br><p>🔷那什么时候我们会来处理异步事件呢？</p><p>  🔹一种很常见的场景应该就是网络请求了。</p><p>  🔹 我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。</p><p>  🔹所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。</p><p>  🔹如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。</p><p>但是，当网络请求非常复杂时，就会出现回调地狱。</p><p>OK，我以一个非常夸张的案例来说明。</p><p>🔷我们来考虑下面的场景(有夸张的成分)：</p><p>  🔹我们需要通过一个url1从服务器加载一个数据data1，data1中包含了下一个请求的url2</p><p>  🔹我们需要通过data1取出url2，从服务器加载数据data2，data2中包含了下一个请求的url3</p><p>  🔹我们需要通过data2取出url3，从服务器加载数据data3，data3中包含了下一个请求的url4</p><p>  🔹发送网络请求url4，获取最终的数据data4</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803104903.png" alt=""></p><p>🔷上面的代码有什么问题吗？</p><p>  🔹正常情况下，不会有什么问题，可以正常运行并且获取我们想要的结果。</p><p>  🔹但是，这样额代码难看而且不容易维护。</p><p>  🔹我们更加期望的是一种更加优雅的方式来进行这种异步操作。</p><p>🔷如何做呢？就是使用Promise。</p><p>  🔹Promise可以以一种非常优雅的方式来解决这个问题。</p><p>我们先来看看Promise最基本的语法。</p><p>这里，我们用一个定时器来模拟异步事件：</p><p>假设下面的data是从网络上1秒后请求的数据</p><p>console.log就是我们的处理方式。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        resolve()</span><br><span class="line">      }, <span class="number">1000</span>)</span><br><span class="line">    }).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"你好！！！"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"你好！！！"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"你好！！！"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"你好！！！"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">          resolve()</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">      })</span><br><span class="line">    }).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">          resolve()</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">      })</span><br><span class="line">    }).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure><br><p>一般情况下是有异步操作时，使用Promise对这个异步操作进行封装，</p><p>new-&gt; 构造函数（1.保存一些状态信息，2.执行传入的函数）</p><p>在执行传入的回调函数的时候，会传入两个参数，resolve，reject，他们本身又是函数，</p><p>当请求操作成功的时候，会调用resolve() 函数，拿到请求到的数据会在new Promise 出来的Promise对象的 then 方法中进行操作，then方法的参数又是一个函数。</p><p>当请求操作失败的时候，会调用reject() 函数，得到失败的信息，将会被new Promise 出来的Promise对象的 catch 方法捕获。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        resolve(<span class="string">"hello Promise"</span>)</span><br><span class="line">        <span class="comment">// reject("error message!!!")</span></span><br><span class="line">      }, <span class="number">1000</span>)</span><br><span class="line">    }).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">    }).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure><br><h2 id="Promise三种状态"><a href="#Promise三种状态" class="headerlink" title="Promise三种状态"></a>Promise三种状态</h2><p>🔹pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p><p>🔹fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()</p><p>🔹reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()</p><br><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803120637.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803113004.png" alt=""></p><br><h2 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a><strong>Promise链式调用</strong></h2><p>无论是then还是catch都可以返回一个Promise对象。所以，我们的代码其实是可以进行链式调用的：</p><p>这里我们直接通过Promise包装了一下新的数据，将Promise对象返回了</p><p>Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve()函数</p><p>Promise.reject()：将数据包装成Promise对象，并且在内部回调reject()函数</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803121104.png" alt=""></p><br><p><strong>链式调用简写</strong></p><p>简化版代码：</p><p>如果我们希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据</p><p>注意下面的代码中，我讲return Promise.resovle(data)改成了return data。结果依然是一样的</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803121151.png" alt=""></p><br><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>Promise实例具有then方法，也就是说then方法时定义在原型对象上的。</p><p>它的作用是为Promise实例添加状态改变时的回调函数。</p><p>前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数（可选）。</p><p>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）因此可以采用链式写法，即then方法后面再调用另一个then方法。</p><p>采用链式的then可以指定一组按照次序调用的回调函数。这时，前一个回调函数可能返回一个还是Promise对象（即有异步操作），这时候一个回调函数就会等该Promise对象的状态发生变化，才会被调用。</p><br><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a><strong>Promise.prototype.catch()</strong></h2><p>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// resolve("hello Promise")</span></span><br><span class="line">    reject(<span class="string">"error message!!!"</span>)</span><br><span class="line">  }, <span class="number">1000</span>)</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">}).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(error);      <span class="comment">// 打印错误信息</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><br><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p>Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中 promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。</p><p>当我们又这样的一个需求的时候：我们需要发两次请求或者多次请求，我们需要等这些请求都完成之后，再进行一个需求操作。那么这个时候我们如何来实现的？我们就可以使用 Promise.all() 。</p><p>我们这里还是使用 setTimeout() 来模拟请求。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{  <span class="comment">// 网络请求一</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      resolve({   <span class="comment">//网络请求一得到的数据</span></span><br><span class="line">        name: <span class="string">"阿清"</span>,                      </span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">      })</span><br><span class="line">    }, <span class="number">3000</span>)</span><br><span class="line">  }),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{  <span class="comment">//网络请求二</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      resolve({   <span class="comment">//网络请求二得到的数据</span></span><br><span class="line">        name: <span class="string">"大大怪将军"</span>,</span><br><span class="line">        age: <span class="number">19</span></span><br><span class="line">      })</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">  })</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803124030.png" alt=""></p><p>当网络请求都完成的时候，就会执行 Promise.all() 的then方法。网络请求的数据都会放在 results 数组中。然后我们就可以对其进行操作。</p><p><span style="color:red">需要特别注意的是，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，即<em>请求1</em>的结果在前，即便<em>请求1</em>的结果获取的比<em>请求2</em>要晚。</span></p><br><h2 id="Promise-race的使用"><a href="#Promise-race的使用" class="headerlink" title="Promise.race的使用"></a><strong>Promise.race的使用</strong></h2><p>Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</p><p>顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{ <span class="comment">// 网络请求一</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      resolve({</span><br><span class="line">        name: <span class="string">"阿清"</span>,</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">      })</span><br><span class="line">    }, <span class="number">3000</span>)</span><br><span class="line">  }),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{ <span class="comment">//网络请求二</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      resolve({</span><br><span class="line">        name: <span class="string">"大大怪将军"</span>,</span><br><span class="line">        age: <span class="number">19</span></span><br><span class="line">      })</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">  })</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200803130143.png" alt=""></p><br><p><a href="https://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">es6 Promise教程 阮一峰</a></p><br><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目中文件路径问题</title>
      <link href="/articl/fba7e2c7.html"/>
      <url>/articl/fba7e2c7.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/395567879632977979.jpg" alt=""></p><a id="more"></a><h2 id="Vue项目中文件路径问题"><a href="#Vue项目中文件路径问题" class="headerlink" title="Vue项目中文件路径问题"></a>Vue项目中文件路径问题</h2><p>在我们写Vue项目中的时候，路径是很令人苦恼的东西，</p><p>比如：src 引入资源的时候</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">"item-icon-active"</span> <span class="attr">src</span>=<span class="string">"./assets/imgs/tabbar/profile_active.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>比如： 引入一些组件的时候</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TabBerItem <span class="keyword">from</span> <span class="string">'./components/tabber/TabBerItem'</span></span><br></pre></td></tr></tbody></table></figure><p>等等。。。</p><p>当我们要去移动这些文件，或者复用某个组件的时候，那么对于路径问题，就很难受了，我们就要一个一个去改，很麻烦。</p><br><p>这时就需要我们为路径起别名了。</p><p>我们需要配置webpack文件。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200802205553.png" alt=""></p><br><p>举个栗子：</p><p>当你引用某个组件的时候，以前是这样用的：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TabBerItem <span class="keyword">from</span> <span class="string">'./components/tabber/TabBerItem'</span></span><br></pre></td></tr></tbody></table></figure><p>使用别名，就可以这样用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TabBerItem <span class="keyword">from</span> <span class="string">'components/tabber/TabBerItem'</span></span><br></pre></td></tr></tbody></table></figure><br><p><span style="color:red">注意：</span></p><p>当我们在标签中使用，使用别名的时候，就要注意了。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img slot=<span class="string">"item-icon-active"</span> src=<span class="string">"./assets/imgs/tabbar/profile_active.svg"</span> alt=<span class="string">""</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>我们就要这样写：在别名的前面加上一个 ~ （波浪号）。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img slot=<span class="string">"item-icon-active"</span> src=<span class="string">"~assets/imgs/tabbar/profile_active.svg"</span> alt=<span class="string">""</span>&gt;</span><br></pre></td></tr></tbody></table></figure><br><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router 详解</title>
      <link href="/articl/245923b2.html"/>
      <url>/articl/245923b2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/261956592400072760.jpg" alt=""></p><a id="more"></a><h1 id="Vue-router-详解"><a href="#Vue-router-详解" class="headerlink" title="Vue-router 详解"></a>Vue-router 详解</h1><h2 id="前端路由规则"><a href="#前端路由规则" class="headerlink" title="前端路由规则"></a>前端路由规则</h2><p><strong>URL的hash</strong>：</p><p>URL的hash也就是锚点(#), 本质上是改变window.location的href属性.</p><p>我们可以通过直接赋值location.hash来改变href, 但是页面不发生刷新</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/%E5%9B%BE%E7%89%871.jpg" alt=""></p><br><p><strong>HTML5的history模式：pushState</strong>：</p><p>history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面。</p><p>采用入栈出栈的模式，可以后退和前进。</p><p>history.pushState()</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/%E5%9B%BE%E7%89%875.jpg" alt=""></p><br><p><strong>HTML5的history模式：replaceState</strong>：</p><p>他和 pushState 基本类似，<strong>但是replaceState 不能后退与前进</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/%E5%9B%BE%E7%89%876.jpg" alt=""></p><br><p><strong>HTML5的history模式：go</strong>：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/%E5%9B%BE%E7%89%877.jpg" alt=""></p><br><p><strong>补充说明：</strong></p><p>上面只演示了三个方法</p><p>因为 history.back() 等价于 history.go(-1)</p><p>history.forward() 则等价于 history.go(1)</p><p>这三个接口等同于浏览器界面的前进后退。</p><br><h2 id="Vue-router-基础"><a href="#Vue-router-基础" class="headerlink" title="Vue-router 基础"></a>Vue-router 基础</h2><h3 id="认识-Vue-router"><a href="#认识-Vue-router" class="headerlink" title="认识 Vue-router"></a>认识 Vue-router</h3><p>目前前端流行的三大框架, 都有自己的路由实现:</p><p>Angular的ngRouter</p><p>React的ReactRouter</p><p>Vue的vue-router</p><p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。</p><p>我们可以访问其官方网站对其进行学习: <a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p><p><span style="color:red"><strong>vue-router是基于路由和组件的</strong></span></p><p><span style="color:red"><strong>路由用于设定访问路径, 将路径和组件映射起来.</strong></span></p><p><span style="color:red"><strong>在vue-router的单页面应用中, 页面的路径的改变就是组件的切换.</strong></span></p><br><h3 id="安装和使用路由"><a href="#安装和使用路由" class="headerlink" title="安装和使用路由"></a>安装和使用路由</h3><p>因为我们已经学习了webpack, 后续开发中我们主要是通过工程化的方式进行开发的.</p><p>所以在后续, 我们直接使用npm来安装路由即可.</p><p><strong>步骤一</strong>: 安装vue-router （安装运行时依赖）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤二</strong>: 在模块化工程中使用它(因为是一个插件, 所以可以通过Vue.use()来安装路由功能)</p><p>第一步：导入路由对象，并且调用 Vue.use(VueRouter)</p><p>第二步：创建路由实例，并且传入路由映射配置</p><p>第三步：在Vue实例中挂载创建的路由实例</p><br><p>创建Router实例。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731101841.png" alt=""></p><br><p>挂载到Vue实例中</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731102158.png" alt=""></p><br><p><strong>使用vue-router的步骤:</strong></p><p>第一步: 创建路由组件</p><p>第二步: 配置路由映射: 组件和路径映射关系</p><p>第三步: 使用路由: 通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code> 也可以使用下面的 <strong>路由代码跳转</strong>。</p><br><p>第一步: 创建路由组件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731111328.png" alt=""></p><br><p>第二步: 配置路由映射: 组件和路径映射关系</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731111807.png" alt=""></p><br><p>第三步：使用路由</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/%E5%9B%BE%E7%89%878.jpg" alt=""></p><p><strong><code>&lt;router-link&gt;</code>: 该标签是一个vue-router中已经内置的组件, 它会被渲染成一个<code>&lt;a&gt;</code>标签.</strong></p><p><strong><code>&lt;router-view&gt;</code>: 该标签会根据当前的路径, 动态渲染出不同的组件，之后渲染的组件放的位置就在这里。</strong></p><p><strong>网页的其他内容, 比如顶部的标题/导航, 或者底部的一些版权信息等会和<code>&lt;router-view&gt;</code>处于同一个等级.</strong></p><p><strong>在路由切换时, 切换的是<code>&lt;router-view&gt;</code>挂载的组件, 其他内容不会发生改变.</strong></p><br><p>最终效果：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731113007.png" alt=""></p><br><h3 id="路由代码跳转"><a href="#路由代码跳转" class="headerlink" title="路由代码跳转"></a><strong>路由代码跳转</strong></h3><p>有时候, 页面的跳转可能需要执行对应的JavaScript代码, 这个时候不用<code>&lt;router-link&gt;</code>这种方式, 就可以使用第二种跳转方式了。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731141549.png" alt=""></p><br><h3 id="路由的默认路径"><a href="#路由的默认路径" class="headerlink" title="路由的默认路径"></a><p id="a">路由的默认路径</p><p></p></h3><p>默认情况下, 进入网站的首页, 我们希望<code>&lt;router-view&gt;</code>渲染首页的内容.</p><p>但是我们的实现中, 默认没有显示首页组件, 必须让用户点击才可以.</p><p>如何可以让<strong>路径</strong>默认跳到到<strong>首页</strong>, 并且<code>&lt;router-view&gt;</code>渲染首页组件呢?</p><p>非常简单, 我们只需要配置多配置一个映射就可以了.</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731114102.png" alt=""></p><p>配置解析:</p><p>我们在routes中又配置了一个映射.</p><p>path配置的是根路径: /</p><p><strong>redirect是重定向, 也就是我们将根路径重定向到/home的路径下, 这样就可以得到我们想要的结果了.</strong></p><br><h3 id="使用HTML5的History模式"><a href="#使用HTML5的History模式" class="headerlink" title="使用HTML5的History模式"></a>使用HTML5的History模式</h3><p>我们前面说过改变路径的方式有两种:</p><p>URL的hash</p><p>HTML5的history</p><p><strong>默认情况下, 路径的改变使用的URL的hash.</strong></p><p>如果希望使用<strong>HTML5的history模式</strong>，进行如下配置即可:</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731115207.png" alt=""></p><br><p>效果图：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731115242.png" alt=""></p><br><h3 id="router-link补充"><a href="#router-link补充" class="headerlink" title="router-link补充"></a>router-link补充</h3><p>在前面的<code>&lt;router-link&gt;</code>中, 我们只是使用了一个属性: to, 用于指定跳转的路径.</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731132719.png" alt=""></p><br><p><code>&lt;router-link&gt;</code>还有一些<strong>其他属性</strong>:</p><p><strong>tag:</strong> tag可以指定<code>&lt;router-link&gt;</code>之后渲染成什么组件, 比如上面的代码会被渲染成一个<code>&lt;button&gt;</code>元素, 而不是<code>&lt;a&gt;</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731133009.png" alt=""></p><br><p><strong>preplace:</strong> replace不会留下 history 记录, 所以指定 replace 的情况下, 后退键返回不能返回到上一个页面中。</p><br><p><strong>active-class:</strong> 当<code>&lt;router-link&gt;</code>对应的路由匹配成功时, 会自动给当前元素设置一个router-link-active的class属性。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731133530.png" alt=""></p><p>在进行高亮显示的导航菜单或者底部tabbar时, 会使用到该类.</p><p>但是通常不会修改类的属性, 会直接使用默认的router-link-active即可.</p><br><p>比如有这样的一个需求：<strong>当点击导航栏的时候，对应的字体变红色。</strong> 我们就可以这样做。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/image-20200731133946893.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731134030.png" alt=""></p><br><p>当然，我们也可以修改router-link-active 的名字，有两种方法。</p><p>① 直接在<code>&lt;router-link&gt;</code>的属性中修改，<code>active-class="active"</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731134603.png" alt=""></p><br><p>② 该class具体的名称也可以通过router实例的属性进行修改 。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731135035.png" alt=""></p><br><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户界面时，希望是如下的路径：</p><p>/user/aaaa或/user/bbbb</p><p>除了有前面的/user之外，后面还跟上了用户的ID</p><p>这种path和Component的匹配关系，我们称之为动态路由(也是路由传递数据的一种方式)。</p><br><p>在配置组件的映射的时候，<code>path: '/user/:userId',</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731184755.png" alt=""></p><p>使用路由的时候，to:属性，我们使用 v-bind 来动态绑定我们要添加的路径，比如这里的用户id</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731184926.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731185554.png" alt=""></p><br><p><span id="params"></span>当我们想在用户的组件中使用该数据（userId），我们就需要使用<code>$route.params</code>.添加映射配置时候的名字` 就可以获取它的数据。</p><p><span style="background-color:#ff0">（这个$route 是当前哪个路由处于活跃状态，就是指的哪个路由。而上面路由跳转的时候使用的<code>this.$router.replace('/home')</code> 中的$router 是new出来的路由实例。）</span></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731185102.png" alt=""></p><p>成果展示：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731185151.png" alt=""></p><br><h2 id="路由的懒加载-重要"><a href="#路由的懒加载-重要" class="headerlink" title="路由的懒加载   (重要)"></a><strong>路由的懒加载 (重要)</strong></h2><h3 id="认识路由的懒加载"><a href="#认识路由的懒加载" class="headerlink" title="认识路由的懒加载"></a>认识路由的懒加载</h3><p><strong>官方给出了解释:</strong></p><p>  当打包构建应用时，Javascript 包会变得非常大，影响页面加载。</p><p>  如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</p><br><p><strong>官方在说什么呢?</strong></p><p>  首先, 我们知道路由中通常会定义很多不同的页面.</p><p>  这个页面最后被打包在哪里呢? 一般情况下, 是放在一个js文件中.</p><p>  但是, 页面这么多放在一个js文件中, 必然会造成这个页面非常的大.</p><p>  如果我们一次性从服务器请求下来这个页面, 可能需要花费一定的时间, 甚至用户的电脑上还出现了短暂空白的情况.</p><p>  如何避免这种情况呢? 使用路由懒加载就可以了.</p><br><p><strong>路由懒加载做了什么?</strong></p><p>  <span style="color:red"><strong>路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块。</strong></span></p><p>  <span style="color:red"><strong>只有在这个路由被访问到的时候, 才加载对应的组件</strong></span></p><br><h3 id="路由懒加载的效果"><a href="#路由懒加载的效果" class="headerlink" title="路由懒加载的效果"></a>路由懒加载的效果</h3><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200731203051.png" alt=""></p><br><h3 id="懒加载的方式"><a href="#懒加载的方式" class="headerlink" title="懒加载的方式"></a>懒加载的方式</h3><p>方式一: 结合Vue的异步组件和Webpack的代码分析.</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">resolve</span> =&gt;</span> { <span class="built_in">require</span>.ensure([<span class="string">'../components/Home.vue'</span>], () =&gt; {resolve(<span class="built_in">require</span>(<span class="string">'../components/Home.vue'</span>)) })};</span><br></pre></td></tr></tbody></table></figure><p>方式二: AMD写法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/About.vue'</span>], resolve);</span><br></pre></td></tr></tbody></table></figure><p>方式三: 在ES6中, 我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割.</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Home.vue'</span>)</span><br></pre></td></tr></tbody></table></figure><br><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><br><h3 id="认识路由嵌套"><a href="#认识路由嵌套" class="headerlink" title="认识路由嵌套"></a>认识路由嵌套</h3><ul><li><p>嵌套路由是一个很常见的功能</p><ul><li>比如在home页面中, 我们希望通过/home/news和/home/message访问一些内容.</li><li>一个路径映射一个组件, 访问这两个路径也会分别渲染两个组件.</li></ul></li><li><p>路径和组件的关系如下:</p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801105943.png" alt=""></p><br><h3 id="路由嵌套的实现"><a href="#路由嵌套的实现" class="headerlink" title="路由嵌套的实现"></a>路由嵌套的实现</h3><p><strong>实现嵌套路由有两个步骤:</strong></p><p>1、创建对应的子组件, 并且在路由映射中配置对应的子路由.</p><p>2、在组件内部使用<code>&lt;router-view&gt;</code>标签.</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801110241.png" alt=""></p><p><span style="background-color:#ff0">格外注意子路由中的path路径不能添加 ‘ / ’。</span></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801113.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801110857.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/image-20200801111824116.png" alt=""></p><br><br><h3 id="嵌套路由的默认路径"><a href="#嵌套路由的默认路径" class="headerlink" title="嵌套路由的默认路径"></a>嵌套路由的默认路径</h3><p>和 <a href="#a">路由的默认路径</a> 相同，在对应的组件下的 children中 使用重定向。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801112222.png" alt=""></p><br><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="参数的传递方式"><a href="#参数的传递方式" class="headerlink" title="参数的传递方式"></a>参数的传递方式</h3><p>传递参数主要有两种类型: params和query</p><br><ul><li>params的类型: <a href="#params">动态路由中也用到params</a><ul><li>配置路由格式: /router/:id</li><li>传递的方式: 在path后面跟上对应的值</li><li>传递后形成的路径: /router/123, /router/abc</li></ul></li></ul><br><ul><li>query的类型:<ul><li>配置路由格式: /router, 也就是普通配置传递的方式:</li><li>对象中使用query的key作为传递方式</li><li>传递后形成的路径: /router?id=123, /router?id=abc</li></ul></li></ul><br><p><span style="color:red">当我们需要传大量 的数据的时候，用query的方式。需要传一个，或者少量的数据的时候，用params</span></p><br><h3 id="使用参数参数传递"><a href="#使用参数参数传递" class="headerlink" title="使用参数参数传递"></a>使用参数参数传递</h3><br><p><strong>准备工作</strong></p><p>为了演示传递参数, 我们这里再创建一个组件, 并且将其配置好</p><p>第一步: 创建新的组件Profile.vue</p><p>第二步: 配置路由映射</p><p>第三步: 添加跳转的<code>&lt;router-link&gt;</code></p><br><p>参数传递有两种方式：<code>&lt;router-link&gt;</code>的方式和 JavaScript 代码方式 （ 前面的路由代码跳转就是avaScript 代码方式 ）</p><br><p>第一种：<code>&lt;router-link&gt;</code>的方式</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801123013.png" alt=""></p><br><p>第二种： JavaScript 代码方式 —-通过使用<code>$router</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/Snipaste_2020-08-01_12-38-00.png" alt=""></p><br><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><p>获取参数通过$route对象获取的.</p><p>在使用了 vue-router 的应用中，路由对象会被注入每个组件中，赋值为 this.$route ，并且当路由切换时，路由对象会被更新。</p><br><p>通过$route获取传递的信息如下:</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801134427.png" alt=""></p><br><h2 id="route和-router是有区别的"><a href="#route和-router是有区别的" class="headerlink" title="$route和$router是有区别的"></a><span id="route">$route和$router是有区别的</span></h2><p><code>$router</code>为VueRouter实例，想要导航到不同URL，则使用<code>$router.push</code>方法</p><p><code>$route</code>为当前router跳转对象里面可以获取name、path、query、params等</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/7813658.jpg" alt=""></p><br><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><h3 id="什么是导航守卫"><a href="#什么是导航守卫" class="headerlink" title="什么是导航守卫"></a>什么是<strong>导航守卫</strong></h3><br><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">官网介绍</a></p><p>我们来考虑一个需求: 在一个SPA应用中, 如何改变网页的标题呢?</p><p>  网页标题是通过<code>&lt;title&gt;</code>来显示的, 但是SPA只有一个固定的HTML, 切换不同的页面时, 标题并不会改变.</p><p>  但是我们可以通过JavaScript来修改<code>&lt;title&gt;</code>的内容.window.document.title = ‘新的标题’.</p><p>  那么在Vue项目中, 在哪里修改? 什么时候修改比较合适呢?</p><br><p>普通的修改方式:</p><p>  我们比较容易想到的修改标题的位置是每一个路由对应的组件.vue文件中.</p><p>  通过mounted声明周期函数, 执行对应的代码进行修改即可.</p><p>  但是当页面比较多时, 这种方式不容易维护(因为需要在多个页面执行类似的代码).</p><p>  有没有更好的办法呢? 使用导航守卫即可.</p><br><p>什么是导航守卫?</p><p>  <span style="background-color:#ff0">vue-router提供的导航守卫主要用来监听监听路由的进入和离开的.</span></p><p>  <span style="background-color:#ff0">vue-router提供了beforeEach和afterEach的钩子函数, 它们会在路由即将改变前和改变后触发.</span></p><p>正如其名，<code>vue-router</code> 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p><p>记住<strong>参数或查询的改变并不会触发进入/离开的导航守卫</strong>。你可以通过<a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html#响应路由参数的变化" target="_blank" rel="noopener">观察 <code>$route</code> 对象</a>来应对这些变化，或使用 <code>beforeRouteUpdate</code> 的组件内守卫。</p><br><h3 id="导航守卫的使用"><a href="#导航守卫的使用" class="headerlink" title="导航守卫的使用"></a><strong>导航守卫的使用</strong></h3><br><p>首先, 我们可以在钩子当中定义一些标题, 可以利用meta来定义。</p><p>其次, 利用导航守卫,修改我们的标题。</p><br><p>导航钩子的三个参数解析:</p><p>to: 即将要进入的目标的路由对象.</p><p>from: 当前导航即将要离开的路由对象.</p><p>next: 调用该方法后, 才能进入下一个钩子.</p><br><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801162801.png" alt=""></p><br><p>如果你的某些组件有嵌套，就使用<code>window.document.title = to.matched[0].meta.title</code></p><p>如果你的组件没有嵌套，就不用matched 了，<code>window.document.title = to.meta.title</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801163038.png" alt=""></p><br><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({ ... })</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 <strong>等待中</strong>。</p><p>每个守卫方法接收三个参数：</p><ul><li><strong><code>to: Route</code></strong>: 即将要进入的目标 <a href="https://router.vuejs.org/zh/api/#路由对象" target="_blank" rel="noopener">路由对象</a></li><li><strong><code>from: Route</code></strong>: 当前导航正要离开的路由</li><li><strong><code>next: Function</code></strong>: 一定要调用该方法来 <strong>resolve</strong> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。<ul><li><strong><code>next()</code></strong>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <strong>confirmed</strong> (确认的)。</li><li><strong><code>next(false)</code></strong>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li><li><strong><code>next('/')</code> 或者 <code>next({ path: '/' })</code></strong>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 <code>next</code> 传递任意位置对象，且允许设置诸如 <code>replace: true</code>、<code>name: 'home'</code> 之类的选项以及任何用在 <a href="https://router.vuejs.org/zh/api/#to" target="_blank" rel="noopener"><code>router-link</code> 的 <code>to</code> prop</a> 或 <a href="https://router.vuejs.org/zh/api/#router-push" target="_blank" rel="noopener"><code>router.push</code></a> 中的选项。</li><li><strong><code>next(error)</code></strong>: (2.4.0+) 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <a href="https://router.vuejs.org/zh/api/#router-onerror" target="_blank" rel="noopener"><code>router.onError()</code></a> 注册过的回调。</li></ul></li></ul><p><strong>确保 <code>next</code> 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错。</strong>这里有一个在用户未能验证身份时重定向到 <code>/login</code> 的示例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BAD</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">'Login'</span> &amp;&amp; !isAuthenticated) next({ <span class="attr">name</span>: <span class="string">'Login'</span> })</span><br><span class="line">  <span class="comment">// 如果用户未能验证身份，则 `next` 会被调用两次</span></span><br><span class="line">  next()</span><br><span class="line">})</span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">'Login'</span> &amp;&amp; !isAuthenticated) next({ <span class="attr">name</span>: <span class="string">'Login'</span> })</span><br><span class="line">  <span class="keyword">else</span> next()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="#全局解析守卫"></a><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#全局解析守卫" target="_blank" rel="noopener">#</a>全局解析守卫</h3><blockquote><p>2.5.0 新增</p></blockquote><p>在 2.5.0+ 你可以用 <code>router.beforeResolve</code> 注册一个全局守卫。这和 <code>router.beforeEach</code> 类似，区别是在导航被确认之前，<strong>同时在所有组件内守卫和异步路由组件被解析之后</strong>，解析守卫就被调用。</p><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="#全局后置钩子"></a><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#全局后置钩子" target="_blank" rel="noopener">#</a>全局后置钩子</h3><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code> 函数也不会改变导航本身：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="#路由独享的守卫"></a><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#路由独享的守卫" target="_blank" rel="noopener">#</a>路由独享的守卫</h3><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">  routes: [</span><br><span class="line">    {</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>这些守卫与全局前置守卫的方法参数是一样的。</p><h3 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="#组件内的守卫"></a><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#组件内的守卫" target="_blank" rel="noopener">#</a>组件内的守卫</h3><p>最后，你可以在路由组件内直接定义以下路由导航守卫：</p><ul><li><code>beforeRouteEnter</code></li><li><code>beforeRouteUpdate</code> (2.2 新增)</li><li><code>beforeRouteLeave</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = {</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) {</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  },</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) {</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  },</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) {</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>beforeRouteEnter</code> 守卫 <strong>不能</strong> 访问 <code>this</code>，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。</p><p>不过，你可以通过传一个回调给 <code>next</code>来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) {</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> {</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以<strong>不支持</strong>传递回调，因为没有必要了。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) {</span><br><span class="line">  <span class="comment">// just use `this`</span></span><br><span class="line">  <span class="keyword">this</span>.name = to.params.name</span><br><span class="line">  next()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 <code>next(false)</code> 来取消。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) {</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="built_in">window</span>.confirm(<span class="string">'Do you really want to leave? you have unsaved changes!'</span>)</span><br><span class="line">  <span class="keyword">if</span> (answer) {</span><br><span class="line">    next()</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    next(<span class="literal">false</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="#完整的导航解析流程"></a><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#完整的导航解析流程" target="_blank" rel="noopener">#</a>完整的导航解析流程</h3><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li></ol><br><h2 id="keeo-alive"><a href="#keeo-alive" class="headerlink" title="keeo-alive"></a>keeo-alive</h2><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。</p><p>这就牵扯到了Vue实例的生命周期，created()函数 和 destroyed()函数，</p><p>当一个组件创建的时候，会调用created()函数，当一个组件消亡的时候，会调用 destroyed()函数。</p><br><p>如果不使用 <code>&lt;keep-alive&gt;</code> 的时候，</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801181911.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801175631.png" alt=""></p><br><p>当我们使用 <code>&lt;keep-alive&gt;</code> 的时候，</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>keep-alive&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801182234.png" alt=""></p><br><br><p>当一个组件处于 <code>&lt;keep-alive&gt;</code> 的状态的时候，它就可以使用 <code>activated()</code> 和 <code>deactivated()</code> 这两个函数，</p><br><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801182636.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801183248.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801183226.png" alt=""></p><br><p><code>keep-alive</code> 有两个<span style="color:red">非常重要</span>的属性。</p><p><span style="color:red">include : </span>字符串或正则表达，只有匹配的组件<span style="color:red">会</span>被缓存。</p><p><span style="color:red">exclude : </span>字符串或正则表达式，任何匹配的组件<span style="color:red">都不会</span>被缓存。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200802193552.png" alt=""></p><br><p>router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200801183656.png" alt=""></p><br><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是前端渲染和后端渲染，前端路由和后端路由</title>
      <link href="/articl/c35629ff.html"/>
      <url>/articl/c35629ff.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/79053752182643863.jpg" alt=""></p><a id="more"></a><h1 id="什么是前端渲染和后端渲染，前端路由和后端路由。"><a href="#什么是前端渲染和后端渲染，前端路由和后端路由。" class="headerlink" title="什么是前端渲染和后端渲染，前端路由和后端路由。"></a>什么是前端渲染和后端渲染，前端路由和后端路由。</h1><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=100" target="_blank" rel="noopener">视频讲解</a></p><h2 id="后端渲染："><a href="#后端渲染：" class="headerlink" title="后端渲染："></a>后端渲染：</h2><p><span style="color:red"><strong>服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示</strong></span>。比如：jsp页面</p><br><p><strong>好处</strong>：前端耗时少，即减少了首屏时间，模板统一在后端。前端（相对）省事，不占用客户端运算资源（解析模板）</p><p><strong>坏处</strong>：占用服务器资源。</p><br><h2 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h2><p><span style="color:red"><strong>浏览器中显示的网页中的大部分内容，都是由前端写的 js 代码在浏览器中执行，最终渲染出来的网页。</strong></span></p><p>也可以怎么说：<span style="color:red"><strong>后端返回JSON数据，前端利用预先写的html模板，循环读取JSON数据，拼接字符串，并插入页面。</strong></span></p><br><p><strong>好处</strong>：网络传输数据量小。不占用服务端运算资源（解析模板），模板在前端（很有可能仅部分在前端），改结构变交互都前端自己来了，改完自己调就行。</p><p><strong>坏处</strong>：前端耗时较多，对前端工作人员水平要求相对较高。前端代码较多，因为部分以前在后台处理的交互逻辑交给了前端处理。占用少部分客户端运算资源用于解析模板。</p><br><h2 id="前端渲染与后端渲染对比："><a href="#前端渲染与后端渲染对比：" class="headerlink" title="前端渲染与后端渲染对比："></a>前端渲染与后端渲染对比：</h2><p><strong>后端渲染：</strong></p><p>页面呈现速度：快，受限于用户的带宽</p><p>流量消耗：少一点点（可以省去前端框架部分的代码）</p><p>可维护性：差（前后端东西放一起，掐架多年，早就在闹分手啦）</p><p>seo友好度：好</p><p>编码效率：低（这个跟不同的团队不同，可能不对）</p><br><p><strong>前端渲染：</strong></p><p>页面呈现速度：主要受限于带宽和客户端机器的好坏，优化的好，可以逐步动态展开内容，感觉上会更快一点。</p><p>流量消耗：多一点点（一个前端框架大概50KB）当然，有的用后端渲染的项目前端部分也有在用框架。</p><p>可维护性：好，前后端分离，各施其职，代码一目明了。</p><p>SEO友好度：差，大量使用ajax，多数浏览器不能抓取ajax数据。</p><p>编码效率：高，前后端各自只做自己擅长的东西，后端最后只输出接口，不用管页面呈现，只要前后端人员能力不错，效率不会低。</p><br><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><p>路由是根据不同的 url 地址展示不同的内容或页面。</p><br><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>前端路由的核心是：<span style="color:red"><strong>改变URL，但是页面不进行整体的刷新。</strong></span></p><p><span style="color:red">很重要的一点是页面不刷新，前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，每跳转到不同的URL都是使用前端的锚点路由. 随着（SPA）单页应用的不断普及，前后端开发分离，目前项目基本都使用前端路由，在项目使用期间页面不会重新加载。</span></p><br><p>优点：</p><p>1.用户体验好，和后台网速没有关系，不需要每次都从服务器全部获取，快速展现给用户</p><p>2.可以再浏览器中输入指定想要访问的url路径地址。</p><p>3.实现了前后端的分离，方便开发。有很多框架都带有路由功能模块。</p><br><h2 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h2><p><span style="color:red"><strong>浏览器在地址栏中切换不同的 url 时，每次都向后台服务器发出请求，服务器响应请求，服务器渲染好整个页面, 并且将页面返回给客户端。</strong></span></p><p><span style="color:red">这种情况下渲染好的页面, 不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化.</span></p><br><p>优点：分担了前端的压力，html和数据的拼接都是由服务器完成。</p><p>缺点：当项目十分庞大时，加大了服务器端的压力，同时在浏览器端不能输入制定的url路径进行指定模块的访问。另外一个就是如果当前网速过慢，那将会延迟页面的加载，对用户体验不是很友好。HTML代码和数据以及对应的逻辑会混在一起, 不利于编写和维护。</p><br><hr><br><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p>前端路由阶段：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/01-%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%94%B1%E9%98%B6%E6%AE%B5.png" alt=""></p><br><p>前后端分离阶段</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/02-%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%98%B6%E6%AE%B5.png" alt=""></p><br><p>SPA（单页面富应用）页面的阶段。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/03-SPA%E9%A1%B5%E9%9D%A2%E9%A1%B5%E9%9D%A2%E7%9A%84%E9%98%B6%E6%AE%B5.png" alt=""></p><p><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识 </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于setInterval和setTImeout中的this指向问题</title>
      <link href="/articl/e70c9311.html"/>
      <url>/articl/e70c9311.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/79053597563864302.jpg" alt=""></p><a id="more"></a><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p><strong>setInterval和setTimeout中传入函数时，函数中的this会指向window对象</strong></p><br><p>我们先来看一个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.getNum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">this</span>.getNumLater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obj; </span><br><span class="line">obj.getNum();<span class="comment">//1　　这里打印的是obj.num，值为1</span></span><br><span class="line">obj.getNumLater()<span class="comment">//0　　这里打印的是window.num，值为0</span></span><br></pre></td></tr></tbody></table></figure><p>从上述例子中可以看到<strong>setTimeout中函数内的this是指向了window对象</strong>，<span style="color:red"><strong>这是由于setTimeout()调用的代码运行在与所在函数完全分离的执行环境上。这会导致这些代码中包含的 this 关键字会指向 window (或全局)对象。</strong></span>具体可参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout" target="_blank" rel="noopener">MDN setTimeout</a></p><br><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>若想要让setTimeout中的this指向正确的值，可以使用以下三种比较常用的方法来使this指向正确的值：</p><br><h3 id="（1）-将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下："><a href="#（1）-将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下：" class="headerlink" title="（1） 将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下："></a><strong>（1） 将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量</strong>，如下：</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;    <span class="comment">//将this存为一个变量，赋值给that，此时的this指向obj</span></span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.getNum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">this</span>.getNumLater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(that.num);    <span class="comment">//利用闭包访问that，that是一个指向obj的指针</span></span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obj; </span><br><span class="line">obj.getNum();<span class="comment">//1　　打印的是obj.num，值为1</span></span><br><span class="line">obj.getNumLater()<span class="comment">//1　　打印的是obj.num，值为1</span></span><br></pre></td></tr></tbody></table></figure><p><strong>这种方法是将当前对象的引用放在一个变量里，定时器内部的函数来访问到这个变量，自然就可以得到当前的对象。</strong></p><br><h3 id="（2）利用bind-方法"><a href="#（2）利用bind-方法" class="headerlink" title="（2）利用bind()方法"></a><strong>（2）利用bind()方法</strong></h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.getNum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">this</span>.getNumLater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">        }.bind(<span class="keyword">this</span>), <span class="number">1000</span>)    <span class="comment">//利用bind()将this绑定到这个函数上</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obj; </span><br><span class="line">obj.getNum();<span class="comment">//1　　打印的为obj.num，值为1</span></span><br><span class="line">obj.getNumLater()<span class="comment">//1　　打印的为obj.num，值为1</span></span><br></pre></td></tr></tbody></table></figure><p><strong>bind()方法是在Function.prototype上的一个方法，当被绑定函数执行时，bind方法会创建一个新函数，并将第一个参数作为新函数运行时的this。在这个例子中，在调用setTimeout中的函数时，bind方法创建了一个新的函数，并将this传进新的函数，执行的结果也就是正确的了。关于bind方法可参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">MDN bind</a></strong></p><br><h3 id="（3）-箭头函数"><a href="#（3）-箭头函数" class="headerlink" title="（3） 箭头函数"></a>（3） 箭头函数</h3><p>使用es6的箭头函数，最为常用。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">this</span>.getNum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">this</span>.getNumLater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">        }, <span class="number">1000</span>)    <span class="comment">//箭头函数中的this总是指向外层调用者，也就是Obj,</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obj; </span><br><span class="line">obj.getNum();<span class="comment">//1　　打印的是obj.num，值为1</span></span><br><span class="line">obj.getNumLater()<span class="comment">//1　　打印的是obj.num，值为1</span></span><br></pre></td></tr></tbody></table></figure><p>ES6中的箭头函数完全修复了this的指向，<span style="color:red"><strong>向外层定义域中，一层一层的查找 this ，直到有 this 的定义。</strong></span>因此利用箭头函数就可以轻松解决这个问题。</p><p><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> this </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中的箭头函数</title>
      <link href="/articl/c66b5c97.html"/>
      <url>/articl/c66b5c97.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/428872344557191920.jpg" alt=""></p><a id="more"></a><h2 id="箭头函数的基本使用"><a href="#箭头函数的基本使用" class="headerlink" title="箭头函数的基本使用"></a>箭头函数的基本使用</h2><p>ES6 允许使用“箭头”（<code>=&gt;</code>）定义函数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="keyword">return</span> <span class="number">5</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用<code>return</code>语句返回。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> { <span class="keyword">return</span> num1 + num2; }</span><br></pre></td></tr></tbody></table></figure><p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> { <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> };</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> ({ <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> });</span><br></pre></td></tr></tbody></table></figure><p>下面是一种特殊情况，虽然可以运行，但会得到错误的结果。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> { <span class="attr">a</span>: <span class="number">1</span> };</span><br><span class="line">foo() <span class="comment">// undefined</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，原始意图是返回一个对象<code>{ a: 1 }</code>，但是由于引擎认为大括号是代码块，所以执行了一行语句<code>a: 1</code>。这时，<code>a</code>可以被解释为语句的标签，因此实际执行的语句是<code>1;</code>，然后函数就结束了，没有返回值。</p><p>如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span> doesNotReturn();</span><br></pre></td></tr></tbody></table></figure><p>箭头函数可以与变量解构结合使用。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> full = <span class="function">(<span class="params">{ first, last }</span>) =&gt;</span> first + <span class="string">' '</span> + last;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">full</span>(<span class="params">person</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> person.first + <span class="string">' '</span> + person.last;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>箭头函数使得表达更加简洁。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEven = <span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">n</span> =&gt;</span> n * n;</span><br></pre></td></tr></tbody></table></figure><p>上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。</p><p>箭头函数的一个用处是简化回调函数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></tbody></table></figure><p>另一个例子是</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = values.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = values.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></tbody></table></figure><p>下面是 rest 参数与箭头函数结合的例子。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = <span class="function">(<span class="params">...nums</span>) =&gt;</span> nums;</span><br><span class="line"></span><br><span class="line">numbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> headAndTail = <span class="function">(<span class="params">head, ...tail</span>) =&gt;</span> [head, tail];</span><br><span class="line"></span><br><span class="line">headAndTail(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// [1,[2,3,4,5]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>（2）不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</p><p>（3）不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</p><p>上面四点中，第一点尤其值得注意。<code>this</code>对象的指向是可变的，但是在箭头函数中，它是固定的。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</span><br><span class="line">  }, <span class="number">100</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">foo.call({ <span class="attr">id</span>: <span class="number">42</span> });</span><br><span class="line"><span class="comment">// id: 42</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>setTimeout</code>的参数是一个箭头函数，这个箭头函数的定义生效是在<code>foo</code>函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时<code>this</code>应该指向全局对象<code>window</code>，这时应该输出<code>21</code>。但是，箭头函数导致<code>this</code>总是指向函数定义生效时所在的对象（本例是<code>{id: 42}</code>），所以输出的是<code>42</code>。</p><p>箭头函数可以让<code>setTimeout</code>里面的<code>this</code>，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.s2++;</span><br><span class="line">  }, <span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</span><br><span class="line"><span class="comment">// s1: 3</span></span><br><span class="line"><span class="comment">// s2: 0</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>Timer</code>函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的<code>this</code>绑定定义时所在的作用域（即<code>Timer</code>函数），后者的<code>this</code>指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，<code>timer.s1</code>被更新了 3 次，而<code>timer.s2</code>一次都没更新。</p><p>箭头函数可以让<code>this</code>指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM 事件的回调函数封装在一个对象里面。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = {</span><br><span class="line">  id: <span class="string">'123456'</span>,</span><br><span class="line"></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,</span><br><span class="line">      event =&gt; <span class="keyword">this</span>.doSomething(event.type), <span class="literal">false</span>);</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  doSomething: <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Handling '</span> + type  + <span class="string">' for '</span> + <span class="keyword">this</span>.id);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>上面代码的<code>init</code>方法中，使用了箭头函数，这导致这个箭头函数里面的<code>this</code>，总是指向<code>handler</code>对象。否则，回调函数运行时，<code>this.doSomething</code>这一行会报错，因为此时<code>this</code>指向<code>document</code>对象。</p><p><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是箭头函数根本没有自己的<code>this</code>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数。</p><p>所以，箭头函数转成 ES5 的代码如下。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</span><br><span class="line">  }, <span class="number">100</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, _this.id);</span><br><span class="line">  }, <span class="number">100</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，转换后的 ES5 版本清楚地说明了，箭头函数里面根本没有自己的<code>this</code>，而是引用外层的<code>this</code>。</p><p>请问下面的代码之中有几个<code>this</code>？</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</span><br><span class="line">      };</span><br><span class="line">    };</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = foo.call({<span class="attr">id</span>: <span class="number">1</span>});</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = f.call({<span class="attr">id</span>: <span class="number">2</span>})()(); <span class="comment">// id: 1</span></span><br><span class="line"><span class="keyword">var</span> t2 = f().call({<span class="attr">id</span>: <span class="number">3</span>})(); <span class="comment">// id: 1</span></span><br><span class="line"><span class="keyword">var</span> t3 = f()().call({<span class="attr">id</span>: <span class="number">4</span>}); <span class="comment">// id: 1</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码之中，只有一个<code>this</code>，就是函数<code>foo</code>的<code>this</code>，所以<code>t1</code>、<code>t2</code>、<code>t3</code>都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的<code>this</code>，它们的<code>this</code>其实都是最外层<code>foo</code>函数的<code>this</code>。</p><p>除了<code>this</code>，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：<code>arguments</code>、<code>super</code>、<code>new.target</code>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'args:'</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  }, <span class="number">100</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">foo(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment">// args: [2, 4, 6, 8]</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，箭头函数内部的变量<code>arguments</code>，其实是函数<code>foo</code>的<code>arguments</code>变量。</p><p>另外，由于箭头函数没有自己的<code>this</code>，所以当然也就不能用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法去改变<code>this</code>的指向。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.x).bind({ <span class="attr">x</span>: <span class="string">'inner'</span> })()</span><br><span class="line">  ];</span><br><span class="line">}).call({ <span class="attr">x</span>: <span class="string">'outer'</span> });</span><br><span class="line"><span class="comment">// ['outer']</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，箭头函数没有自己的<code>this</code>，所以<code>bind</code>方法无效，内部的<code>this</code>指向外部的<code>this</code>。</p><p>长期以来，JavaScript 语言的<code>this</code>对象一直是一个令人头痛的问题，在对象方法中使用<code>this</code>，必须非常小心。箭头函数”绑定”<code>this</code>，很大程度上解决了这个困扰。</p><h2 id="在谈箭头函数的-this-的指向问题"><a href="#在谈箭头函数的-this-的指向问题" class="headerlink" title="在谈箭头函数的 this 的指向问题"></a>在谈箭头函数的 this 的指向问题</h2><p><span style="color:red"></span></p><p><span style="color:red">问题：<strong>箭头函数的this是如何查找的。</strong></span></p><p><span style="color:red">答案：<strong>向外层定义域中，一层一层的查找 this ，直到有 this 的定义。</strong></span></p><p>我们来看一个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {</span><br><span class="line">  aaa() {</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    })</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">obj.aaa()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729234756.png" alt=""></p><p>没有使用箭头函数的打印window对象，使用箭头函数的打印了Object对象（也就是 obj ）。</p><br><p>再来看一个例子</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {</span><br><span class="line">  aaa() {</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">//window</span></span><br><span class="line">      })</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">//window</span></span><br><span class="line">      })</span><br><span class="line">    })</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">//window</span></span><br><span class="line">      })</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">//obj</span></span><br><span class="line">      })</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">obj.aaa()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729235019.png" alt=""></p><p>所以我们再来理解一下 <span style="color:red"><strong>向外层定义域中，一层一层的查找 this ，直到有 this 的定义。</strong> </span>是不是就懂了。</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI（脚手架）</title>
      <link href="/articl/cd2405e1.html"/>
      <url>/articl/cd2405e1.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729120716.png" alt=""></p><a id="more"></a><h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><br><p><a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vue CLI 官网</a></p><br><h2 id="什么是Vue-CLI"><a href="#什么是Vue-CLI" class="headerlink" title="什么是Vue CLI"></a><strong>什么是Vue CLI</strong></h2><p>CLI是Command-Line Interface, 翻译为命令行界面, 但是俗称脚手架.</p><p>Vue CLI是一个官方发布 vue.js 项目脚手架</p><p>使用 vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置.。</p><br><h2 id="Vue-CLI使用前提"><a href="#Vue-CLI使用前提" class="headerlink" title="Vue CLI使用前提"></a>Vue CLI使用前提</h2><p><strong>Node 版本要求</strong></p><p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p><br><p>Vue.js官方脚手架工具就使用了<strong>webpack</strong>模板</p><p>对所有的资源会压缩等优化操作</p><p>它在开发过程中提供了一套完整的功能，能够使得我们开发过程中变得高效。</p><p>Webpack的全局安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></tbody></table></figure><br><h2 id="Vue-CLI的安装"><a href="#Vue-CLI的安装" class="headerlink" title="Vue CLI的安装"></a>Vue CLI的安装</h2><p><a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">传送门</a></p><p><strong>关于旧版本</strong></p><p>Vue CLI 的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了旧版本的 <code>vue-cli</code> (1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。</p><p><strong>Node 版本要求</strong></p><p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p><p>可以使用下列任一命令安装这个新的包：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></tbody></table></figure><p>安装之后，你就可以在命令行中访问 <code>vue</code> 命令。你可以通过简单运行 <code>vue</code>，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</p><p>你还可以用这个命令来检查其版本是否正确：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></tbody></table></figure><br><p>上面安装的是Vue CLI3的版本，如果需要想按照Vue CLI2的方式初始化项目时不可以的。</p><p><strong>拉取 2.x 模板 (旧版本)</strong></p><p>Vue CLI &gt;= 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></tbody></table></figure><br><h2 id="Vue-CLI的使用"><a href="#Vue-CLI的使用" class="headerlink" title="Vue CLI的使用"></a><strong>Vue</strong> CLI的使用</h2><p><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noopener">传送门</a></p><p>Vue CLI2初始化项目</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></tbody></table></figure><p>Vue CLI3初始化项目</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></tbody></table></figure><br><h2 id="Vue-CLI2"><a href="#Vue-CLI2" class="headerlink" title="Vue CLI2"></a><strong>Vue</strong> CLI2</h2><h3 id="Vue-CLI2详解"><a href="#Vue-CLI2详解" class="headerlink" title="Vue CLI2详解"></a><strong>Vue</strong> CLI2详解</h3><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729110424.png" alt=""></p><br><h3 id="目录结构详解"><a href="#目录结构详解" class="headerlink" title="目录结构详解"></a><strong>目录结构详解</strong></h3><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/%E5%9B%BE%E7%89%871.png" alt=""></p><br><h3 id="Vue-CLI-中-Runtime-Compiler和Runtime-only的区别"><a href="#Vue-CLI-中-Runtime-Compiler和Runtime-only的区别" class="headerlink" title="Vue CLI 中 Runtime-Compiler和Runtime-only的区别"></a>Vue CLI 中 Runtime-Compiler和Runtime-only的区别</h3><p>在我们初始化vue项目的时候，会让我们选择 Runtime-Compiler 还是 Runtime-only 。<br><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729160542.png" alt="在这里插入图片描述"></p><p>那我们就来看一下他们有什么区别</p><p>Runtime-Compiler：编译器版本。<br>Runtime-only：运行时版本。</p><p>如果你需要在客户端编译模板（例如，向 <code>template</code>选项传入一个字符串，或者需要将模板中的非DOM的HTML挂载到一个元素），你需要带有编译器的版本，因而需要完整构建版本。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况需要编译器</span></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">template:<span class="string">`&lt;div&gt;{{message}}&lt;/div&gt;`</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种情况不需要编译器</span></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  render(h){</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">'div'</span>,<span class="keyword">this</span>.message)</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在使用vue- loader或 verify时，*.vue文件中的模板会在构建时（build time）预编译pre-compile）为 Javascript。最终生成的 bundle中你不再需要编译器（ compiler，因此可以直接使用只含有运行时的构建版本（ runtime-only)。</p><p>由于只含有运行时构建版本 （runtime-only比完整构建版本（full- build轻量大约30%,你应该尽可能使用只含有运行时的构建版本。如果你还是希望使用完整构建版本，则需要在打包器中配置别名：</p><p>由于运行时版本的构建比其全面版本的重量轻约30%，Runtime-only 性能更高，代码量更少，因此你可以随时使用它。如果你仍然希望使用完整版本，则需要在捆绑程序中配置别名。</p><br><p><strong>总结</strong>：</p><p><span style="color:red"><strong>如果在之后的开发中，你依然使用 template ，就需要选择 Runtime-Compiler 。</strong></span><br><span style="color:red"><strong>如果在之后的开发中，使用的是 .vue 文件夹开发，那么可以选择 Runtime-only 。</strong></span></p><br><p>Runtime-Compiler 和 Runtime-only</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729165801.png" alt=""></p><p>为什么存在这样的差异呢？</p><p>我们需要先理解Vue应用程序是如何运行起来的。</p><p>Vue中的模板如何最终渲染成真实DOM。</p><p>我们来看下面的一幅图。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/132562.png" alt=""></p><p>Vue程序运行过程中</p><p>Runtime-Compiler 执行步骤</p><blockquote><p>template –&gt; ast –&gt; render –&gt; vdom –&gt; UI</p></blockquote><p>Runtime-only 执行步骤（性能更高，代码量更少）</p><blockquote><p>render –&gt; vdom –&gt; UI</p></blockquote><p>Runtime-only 在执行代码的时候，直接就到render 了，减少<code>template --&gt; ast --&gt; render</code> 的代码量，性能更高。</p><br><h3 id="修改配置：webpack-base-conf-js起别名"><a href="#修改配置：webpack-base-conf-js起别名" class="headerlink" title="修改配置：webpack.base.conf.js起别名"></a><strong>修改配置：webpack.base.conf.js起别名</strong></h3><br><br><br><br><br><br><br><h2 id="Vue-CLI3"><a href="#Vue-CLI3" class="headerlink" title="Vue CLI3"></a><strong>Vue</strong> CLI3</h2><h3 id="认识Vue-CLI3"><a href="#认识Vue-CLI3" class="headerlink" title="认识Vue CLI3"></a><strong>认识Vue CLI3</strong></h3><p>vue-cli 3 与 2 版本有很大区别</p><p>vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webapck 3</p><p>vue-cli 3 的设计原则是“0配置”，移除的配置文件根目录下的，build和config等目录</p><p>vue-cli 3 提供了 vue ui 命令，提供了可视化配置，更加人性化</p><p>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</p><br><p>初始化项目：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729224127.png" alt=""></p><br><h3 id="目录结构详解-1"><a href="#目录结构详解-1" class="headerlink" title="目录结构详解"></a>目录结构详解</h3><br><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729224409.png" alt=""></p><br><h3 id="Vue-CLI3配置"><a href="#Vue-CLI3配置" class="headerlink" title="Vue CLI3配置"></a>Vue CLI3配置</h3><p>启动配置服务器：vue ui</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729224605.png" alt=""></p><br><p>之前有一大堆配置文件去哪里了？</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729224643.png" alt=""></p><br><h3 id="自定义配置：起别名"><a href="#自定义配置：起别名" class="headerlink" title="自定义配置：起别名"></a><strong>自定义配置：起别名</strong></h3><br><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/image-20200729224714892.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-cli3和Vue-cli4打包 npm run build 路径错误解决办法(亲测管用)</title>
      <link href="/articl/46847636.html"/>
      <url>/articl/46847636.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/458838511767519716.jpg" alt=""></p><a id="more"></a><h2 id="Vue-cli3打包-npm-run-build-路径错误解决办法"><a href="#Vue-cli3打包-npm-run-build-路径错误解决办法" class="headerlink" title="Vue-cli3打包 npm run build 路径错误解决办法"></a>Vue-cli3打包 npm run build 路径错误解决办法</h2><p>我们用vue-cli搭建的项目执行npm build后本地打开页面空白，如何才能查看npm run build之后的结果呢。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729214740.png" alt=""></p><p>我们先看一下提示信息：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tip: built files are meant to be served over an HTTP server.</span><br><span class="line"> Opening index.html over file:<span class="comment">// won't work.</span></span><br></pre></td></tr></tbody></table></figure><p>这段话的意思就是说：构建文件务必放在一个HTTP服务器。直接打开index.html文件将不工作，那如何本地查看呢?</p><p>（1）到项目目录下的config文件夹里的index.js文件中,其中dev是开发环境，build是构建版本，找到build下面的assetsPublicPath: ‘/‘,然后修改为assetsPublicPath: ‘./‘,即“/”前加点。</p><p>现在再重新打包一次 npm run build，刷新你的页面，就可以看到啦。</p><p>（2）还有一种就是借助http-server：</p><p>首先我们需要安装它命令npm install http-server -g，然后执行npm run build,之后进入打包的目录我这里是cd dist然后执行http-server就可以啦。</p><br><br><h2 id="Vue-cli4打包-npm-run-build-路径错误解决办法"><a href="#Vue-cli4打包-npm-run-build-路径错误解决办法" class="headerlink" title="Vue-cli4打包 npm run build 路径错误解决办法"></a>Vue-cli4打包 npm run build 路径错误解决办法</h2><p>在项目根目录下，和package.json同级的目录下，创建一个vue.config.js文件（不能是其他的名字）<br><strong>publicPath:’./ ‘ 是解决相对路径的方法</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  publicPath: <span class="string">'./'</span>,</span><br><span class="line">  configureWebpack: {</span><br><span class="line">    resolve: {</span><br><span class="line">      alias: {</span><br><span class="line">        <span class="string">'assets'</span>: <span class="string">'@/assets'</span>,</span><br><span class="line">        <span class="string">'common'</span>: <span class="string">'@/common'</span>,</span><br><span class="line">        <span class="string">'components'</span>: <span class="string">'@/components'</span>,</span><br><span class="line">        <span class="string">'network'</span>: <span class="string">'@/network'</span>,</span><br><span class="line">        <span class="string">'views'</span>: <span class="string">'@/views'</span>,</span><br><span class="line">        <span class="string">'plugins'</span>: <span class="string">'@/plugins'</span>,</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 迎刃而解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime-Compiler和Runtime-only的区别</title>
      <link href="/articl/433146b0.html"/>
      <url>/articl/433146b0.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/473899140993908742.jpg" alt=""></p><a id="more"></a><p>在我们初始化vue项目的时候，会让我们选择 Runtime-Compiler 还是 Runtime-only 。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729160542.png" alt=""></p><p>那我们就来看一下他们有什么区别<br>Runtime-Compiler：编译器版本。<br>Runtime-only：运行时版本。</p><p>如果你需要在客户端编译模板（例如，向 <code>template</code>选项传入一个字符串，或者需要将模板中的非DOM的HTML挂载到一个元素），你需要带有编译器的版本，因而需要完整构建版本。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况需要编译器</span></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">template:<span class="string">`&lt;div&gt;{{message}}&lt;/div&gt;`</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种情况不需要编译器</span></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  render(h){</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">'div'</span>,<span class="keyword">this</span>.message)</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在使用vue- loader或 verify时，*.vue文件中的模板会在构建时（build time）预编译pre-compile）为 Javascript。最终生成的 bundle中你不再需要编译器（ compiler，因此可以直接使用只含有运行时的构建版本（ runtime-only)。</p><p>由于只含有运行时构建版本 （runtime-only比完整构建版本（full- build轻量大约30%,你应该尽可能使用只含有运行时的构建版本。如果你还是希望使用完整构建版本，则需要在打包器中配置别名：</p><p>由于运行时版本的构建比其全面版本的重量轻约30%，Runtime-only 性能更高，代码量更少，因此你可以随时使用它。如果你仍然希望使用完整版本，则需要在捆绑程序中配置别名。</p><br><p><strong>总结</strong>：</p><p><span style="color:red"><strong>如果在之后的开发中，你依然使用 template ，就需要选择 Runtime-Compiler 。</strong></span><br><span style="color:red"><strong>如果在之后的开发中，使用的是 .vue 文件夹开发，那么可以选择 Runtime-only 。</strong></span></p><br><p>Runtime-Compiler 和 Runtime-only</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200729165801.png" alt=""></p><p>为什么存在这样的差异呢？</p><p>我们需要先理解Vue应用程序是如何运行起来的。</p><p>Vue中的模板如何最终渲染成真实DOM。</p><p>我们来看下面的一幅图。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/132562.png" alt=""></p><p>Vue程序运行过程中</p><p>Runtime-Compiler 执行步骤</p><blockquote><p>template –&gt; ast –&gt; render –&gt; vdom –&gt; UI</p></blockquote><p>Runtime-only 执行步骤（性能更高，代码量更少）</p><blockquote><p>render –&gt; vdom –&gt; UI</p></blockquote><p>Runtime-only 在执行代码的时候，直接就到render 了，减少<code>template --&gt; ast --&gt; render</code> 的代码量，性能更高。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错&#39;webpack-dev-server&#39;不是内部或外部命令，也不是可运行的程序 或批处理文件。</title>
      <link href="/articl/67747b7d.html"/>
      <url>/articl/67747b7d.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/79053700643056327.jpg" alt=""></p><a id="more"></a><p>在我们初始化Vue项目的时候，有时候会碰到’webpack-dev-server’ 不是内部或外部命令，也不是可运行的程序 或批处理文件。<br><img src="https://img-blog.csdnimg.cn/20200729153648677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解决方案：</p><p><strong>方案一</strong>：看看自己的项目里面是否有node_modules文件夹，</p><p>1、如果没有就尝试执行npm install,这是因为缺少依赖包。<br>2、如果有就将这个node_modules文件夹删掉，重新执行npm install，等待安装完之后，再次运行“npm run dev”，有些人的是马上就可以了，然而往往还会有人（譬如我）仍然报类似的错误，这个时候你只需要再次重复相同的操作即可，“一次不成再删再安装”！！！</p><p>方案二：如果还是不可以就尝试第二种方法，通常是没有装依赖导致的问题。<br>解决方法：借鉴网上大神的方法可以奏效</p><p>可以通过修改npm的配置文件让npm到另外的pacakge mirror站点去找package，通过如下命令</p><p>$ npm config set registry <a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>$ npm config set registry <a href="https://r.cnpmjs.org/" target="_blank" rel="noopener">http://r.cnpmjs.org</a><br>或者：npm config set registry <a href="http://registry.npmjs.eu/cgi-sys/defaultwebpage.cgi" target="_blank" rel="noopener">http://registry.npmjs.eu</a><br>随后再执行<br>npm install</p><br>经过以上步骤一般就成功了<p><img src="https://img-blog.csdnimg.cn/20200729154639830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 迎刃而解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错解决Module parse failed:Unexpected token(1:0) You may need an appropriate loader</title>
      <link href="/articl/eda214d7.html"/>
      <url>/articl/eda214d7.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/455486487344709793.jpg" alt=""></p><a id="more"></a><p>错误如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcyODE1MjIwMS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="webpack默认是不能处理vue文件，所以只能我们自己添加一些额外的插件进行处理它。"><a href="#webpack默认是不能处理vue文件，所以只能我们自己添加一些额外的插件进行处理它。" class="headerlink" title="webpack默认是不能处理vue文件，所以只能我们自己添加一些额外的插件进行处理它。"></a>webpack默认是不能处理vue文件，所以只能我们自己添加一些额外的插件进行处理它。</h3><p>解决方式：<br>第一步：安装插件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></tbody></table></figure><p>第二步：在webpack.config.js添加如下配置：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">       rules: [</span><br><span class="line">           {</span><br><span class="line">       test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">         use: {</span><br><span class="line">            loader: <span class="string">'vue-loader'</span></span><br><span class="line">         }</span><br><span class="line">          },</span><br><span class="line">       ]</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><br><p>然后重新运行，如果还报错可能是vue-loader 版本的原因，你的版本太高了。</p><p>我们又两种方式来解决这个问题：</p><p><strong>方式一</strong>：减低vue-loader 的版本</p><p>将vue-loader 的版本减低问14.0.0 以下。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i vue-loader@13.0.0 --save-dev</span><br></pre></td></tr></tbody></table></figure><p><strong>方式二</strong>：额外的在 webpack.config.js 添加一些配置。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入vue-loader/lib/plugin</span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports  = {</span><br><span class="line">    plugins: [   </span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [</span><br><span class="line">            {</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">          use: {</span><br><span class="line">             loader: <span class="string">'vue-loader'</span></span><br><span class="line">          }</span><br><span class="line">           },</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 迎刃而解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue再现WebPack</title>
      <link href="/articl/2ca1c9fa.html"/>
      <url>/articl/2ca1c9fa.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/248622703220883849.jpg" alt=""></p><a id="more"></a><h1 id="Vue在现WebPack"><a href="#Vue在现WebPack" class="headerlink" title="Vue在现WebPack"></a>Vue在现WebPack</h1><h2 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h2><p>安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具npm</p><p>查看自己的node版本：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726153124.png" alt=""></p><p>全局安装webpack(这里我先指定版本号3.6.0，因为vue cli2依赖该版本)</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726153134.png" alt=""></p><p>局部安装webpack（后续才需要）</p><p>–save-dev`是开发时依赖，项目打包后不需要继续使用的。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726153141.png" alt=""></p><p>为什么全局安装后，还需要局部安装呢？</p><p>在终端直接执行webpack命令，使用的全局安装的webpack</p><p>当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h2><p>我们创建如下文件和文件夹：</p><p><strong>文件和文件夹解析：</strong></p><p>bulid文件夹：用于存放之后打包的文件</p><p>src文件夹：用于存放我们写的源文件</p><p>index.js：项目的入口文件。具体内容查看下面详情。</p><p>math.js：定义了一些数学工具函数，可以在其他地方引用，并且使用。具体内容查看下面的详情。</p><p>index.html：浏览器打开展示的首页html</p><p>package.json：通过npm init生成的，npm包管理的文件（暂时没有用上，后面才会用上）</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726153500.png" alt=""></p><h2 id="配置一下入口和出口"><a href="#配置一下入口和出口" class="headerlink" title="配置一下入口和出口"></a>配置一下入口和出口</h2><p>也就是在webpack.config.js 文件中配置</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726153702.png" alt=""></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">// node 内置核心模块，用来处理路径问题。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  output: { <span class="comment">// 输出配置</span></span><br><span class="line">    filename: <span class="string">'./built.js'</span>, <span class="comment">// 输出文件名</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'build/js'</span>) <span class="comment">// 输出文件路径配置</span></span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="局部安装webpack"><a href="#局部安装webpack" class="headerlink" title="局部安装webpack"></a>局部安装webpack</h2><p>目前，我们使用的webpack是全局的webpack，如果我们想使用局部来打包呢？</p><ul><li><p>因为一个项目往往依赖特定的webpack版本，全局的版本可能很这个项目的webpack版本不一致，导出打包出现问题。</p></li><li><p>所以通常一个项目，都有自己局部的webpack。</p></li></ul><p>第一步，项目中需要安装自己局部的webpack</p><ul><li><p>这里我们让局部安装webpack3.6.0</p></li><li><p>Vue CLI3中已经升级到webpack4，但是它将配置文件隐藏了起来，所以查看起来不是很方便。</p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726154124.png" alt=""></p><p>第二步，通过node_modules/.bin/webpack启动webpack打包.</p><p><img src="C:%5CUsers%5Cdell%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726154148234.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726161415.png" alt=""></p><h2 id="package-json中定义启动"><a href="#package-json中定义启动" class="headerlink" title="package.json中定义启动"></a><strong>package.json中定义启动</strong></h2><p>每次执行都敲这么一长串有没有觉得不方便呢？</p><p>OK，我们可以在<code>package.json</code>的<code>scripts</code>中定义自己的执行脚本。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726161743.png" alt=""></p><p><span style="color:red"><strong>package.json中的scripts的脚本在执行时，会按照一定的顺序寻找命令对应的位置。</strong></span></p><p>首先，<span style="color:red"><strong>会寻找本地的node_modules/.bin路径中对应的命令。</strong></span></p><p><span style="color:red"><strong>如果没有找到，会去全局的环境变量中寻找。</strong></span></p><p>如何执行我们的build指令呢？</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726161711.png" alt=""></p><h2 id="css-loader-和-style-loader的使用"><a href="#css-loader-和-style-loader的使用" class="headerlink" title="css-loader 和 style-loader的使用"></a>css-loader 和 <strong>style-loader</strong>的使用</h2><p>loader是webpack中一个非常核心的概念。</p><p>webpack用来做什么呢？</p><p>  在我们之前的实例中，我们主要是用webpack来处理我们写的js代码，并且webpack会自动处理js之间相关的依赖。</p><p>  但是，在开发中我们不仅仅有基本的js代码处理，我们也需要加载css、图片，也包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将.jsx、.vue文件转成js文件等等。</p><p>  对于webpack本身的能力来说，对于这些转化是不支持的。</p><p>那怎么办呢？给webpack扩展对应的loader就可以啦。</p><p><strong>loader使用过程：</strong></p><p><strong>  步骤一：通过npm安装需要使用的loader</strong></p><p><strong>  步骤二：在webpack.config.js中的modules关键字下进行配置</strong></p><br><p><span style="color:red"><strong>css-loader只负责加载css文件但是并不负责将css具体样式嵌入到文档中。</strong></span></p><p><span style="color:red"><strong>style-loader负责将css具体样式嵌入到文档中</strong></span></p><br><p><strong>安装css-loader 和 style-loader</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev css-loader@2.0.2 style-loader@0.23.1</span><br></pre></td></tr></tbody></table></figure><br><p>如果报以下的错误：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726175539.png" alt=""></p><p>这说明css-loader版本过高的，我们安装较低的css-loader版本即可。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm uninstall css-loader（卸载当前版本）</span><br><span class="line">cnpm install css-loader@&lt;版本号&gt; -D</span><br></pre></td></tr></tbody></table></figure><br><h2 id="less文件处理-–-less-loader"><a href="#less文件处理-–-less-loader" class="headerlink" title="less文件处理 – less-loader"></a>less文件处理 – <strong>less-loader</strong></h2><p>首先，还是需要安装对应的loader</p><p>注意：我们这里还安装了less，因为webpack会使用less对less文件进行编译</p><p>安装插件（<span style="color:red"><strong>注意版本的问题</strong></span>）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev less-loader@4.1.0 less@3.9.0</span><br></pre></td></tr></tbody></table></figure><p>其次，修改对应的配置文件</p><p>添加一个rules选项，用于处理.less文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [{</span><br><span class="line">          loader: <span class="string">"style-loader"</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        }, {</span><br><span class="line">          loader: <span class="string">"css-loader"</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        }, {</span><br><span class="line">          loader: <span class="string">"less-loader"</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        }]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h2 id="图片文件资源处理"><a href="#图片文件资源处理" class="headerlink" title="图片文件资源处理"></a>图片文件资源处理</h2><br><p>安装url-loade</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev url-loader@1.1.2</span><br></pre></td></tr></tbody></table></figure><p>安装file-loade</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev  file-loader@3.0.1</span><br></pre></td></tr></tbody></table></figure><p><img src="C:%5CUsers%5Cdell%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200727234903274.png" alt="image-20200727234903274"></p><p>css文件中引用图片。</p><p>修改webpack.config.js配置文件：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        use: [{</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: {</span><br><span class="line">            limit: <span class="number">8</span> * <span class="number">1024</span>, <span class="comment">//自己定义的值</span></span><br><span class="line">            name: <span class="string">'img/[name].[hash:8].[ext]'</span>,</span><br><span class="line">          }</span><br><span class="line">        }]</span><br><span class="line">      },</span><br></pre></td></tr></tbody></table></figure><p>当图片小于8kb时，这也是limit属性的作用，对图片进行base64编码</p><blockquote><p>图片大小小于8kb，就会被base64处理<br>优点: 减少请求数量（减轻服务器压力）<br>缺点：图片体积会更大（文件请求速度更慢）</p></blockquote><p>如果大于8kb，会通过file-loader进行处理</p><p>再次打包，就会发现build文件夹下多了一个图片文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200727232307.png" alt=""></p><br><p>我们发现webpack自动帮助我们生成一个非常长的名字</p><p>  这是一个32位hash值，目的是防止名字重复</p><p>  但是，真实开发中，我们可能对打包的图片名字有一定的要求</p><p>  比如，将所有的图片放在一个文件夹中，跟上图片原来的名称，同时也要防止重复</p><p>所以，我们可以在options中添加上如下选项：</p><p>  <strong>img：</strong>文件要打包到的文件夹</p><p>  <strong>name：</strong>获取图片原来的名字，放在该位置</p><p>  <strong>hash:8</strong>：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</p><p>  <strong>ext</strong>：使用图片原来的扩展名</p><br><p>但是，我们发现图片并没有显示出来，这是因为图片使用的路径不正确</p><p>  默认情况下，webpack会将生成的路径直接返回给使用者</p><p>  但是，我们整个程序是打包在build文件夹下的，所以这里我们需要在路径下再添加一个../build/（<strong>后续我们还有其他的方式）</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200727234826.png" alt=""></p><br><h2 id="对ES6语法兼容性处理"><a href="#对ES6语法兼容性处理" class="headerlink" title="对ES6语法兼容性处理"></a><strong>对ES6语法兼容性处理</strong></h2><p>如果你仔细阅读webpack打包的js文件，发现写的ES6语法并没有转成ES5，那么就意味着可能一些对ES6还不支持的浏览器没有办法很好的运行我们的代码。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728083155.png" alt=""></p><p>在前面我们说过，如果希望将ES6的语法转成ES5，那么就需要使用babel。</p><p>而在webpack中，我们直接使用babel对应的loader就可以了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev babel-loader@7.1.5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev babel-core@6.26.3</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev babel-preset-es2015@6.24.1</span><br></pre></td></tr></tbody></table></figure><p>配置webpac.config.js 文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">       test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">       <span class="comment">// 排查以下文件，他们不能进行随便的转化</span></span><br><span class="line">       exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">       use: {</span><br><span class="line">         loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">         options: {</span><br><span class="line">           presets: [<span class="string">'es2015'</span>]</span><br><span class="line">         }</span><br><span class="line">       }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>重新打包，查看built.js文件，发现其中的内容变成了ES5的语法</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728090409.png" alt=""></p><p>这个是对就是语法的一些简单的转化，如果想转化一些高级的es6语法如：promise高级语法不能转换。详细请看</p><p><a href="https://aqingya.cn/2020/07/15/54/#1-5-js-%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86" target="_blank" rel="noopener">详细请看这里</a></p><br><h2 id="webpack-配置Vue"><a href="#webpack-配置Vue" class="headerlink" title="webpack 配置Vue"></a>webpack 配置Vue</h2><h3 id="在webpack中引入vue-js"><a href="#在webpack中引入vue-js" class="headerlink" title="在webpack中引入vue.js"></a>在webpack中引入vue.js</h3><p>我们会使用Vuejs进行开发，而且会以特殊的文件来组织vue的组件。所以，下面我们来学习一下如何在我们的webpack环境中集成Vuejs。</p><p>我们希望在项目中使用Vuejs，那么必然需要对其有依赖，所以需要先进行安装。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue --save</span><br></pre></td></tr></tbody></table></figure><p>为了兼容版本我们使用<a href="mailto:vue@2.5.21">vue@2.5.21</a>版本。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue@2.5.21 --save</span><br></pre></td></tr></tbody></table></figure><p><strong>注：因为我们后续是在实际项目中也会使用vue的，所以并不是开发时依赖</strong> <code>--save-dev</code> 是开发依赖</p><br><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728113347.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728113421.png" alt=""></p><p>修改完成后，重新打包，运行程序：</p><p>打包过程没有任何错误(因为只是多打包了一个vue的js文件而已)</p><p>但是运行程序，没有出现想要的效果，而且浏览器中有报错</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728112645.png" alt=""></p><p>这个错误说的是我们使用的是runtime-only版本的Vue</p><p><strong>runtime-only ：代码中不可以有任何的template。</strong></p><p><strong>runtime-compiler：代码中可以有template，因为有compiler 可以用于编译template。</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728113421.png" alt=""></p><p>在html中使用的div 就是vue实例的template。所以会报错。</p><br><p>这里我只说解决方案：<a href="http://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue</a><a href="http://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">不同版本构建</a>，后续我具体讲解runtime-only和runtime-compiler的区别。</p><p>所以我们修改webpack的配置，添加如下内容</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  resolve: {</span><br><span class="line">    alias: {</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span> <span class="comment">// 用 webpack 1 时需用 'vue/dist/vue.common.js'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>重新打包。编译运行.</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728113253.png" alt=""></p><p>然后我们就可以愉快在webpack中使用vue啦😀。</p><br><h3 id="el-和-template-区别（一）"><a href="#el-和-template-区别（一）" class="headerlink" title="el 和 template 区别（一）"></a><strong>el 和 template 区别（一）</strong></h3><p>正常运行之后，我们来考虑另外一个问题：</p><p>  如果我们希望将data中的数据显示在界面中，就必须是修改index.html。</p><p>  如果我们后面自定义了组件，也必须修改index.html来使用组件。</p><p>  但是html模板在之后的开发中，我并不希望手动的来频繁修改，是否可以做到呢？</p><br><p>定义template属性：</p><p> <strong> 在前面的Vue实例中，我们定义了 el 属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容</strong>。</p><p> <strong> 这里，我们可以将div元素中的内容删掉，只保留一个基本的id为div的元素</strong></p><p>  但是如果我依然希望在其中显示的内容，应该怎么处理呢？</p><br><p>之前index.html中的#app进行绑定，填写相关的代码模板</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728122642.png" alt=""></p><p>现在我们可以在vue的实例中定义一个template属性，代码如下：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728122553.png" alt=""></p><p>然后在index.html中的#app什么什么都不要填写。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728122913.png" alt=""></p><p>这样的话，<span style="color:red"><strong>在同时有 el 和 template 的情况下</strong></span>，我们运行编译的时候，vue的内部会将 template 整体替换 我们在index.html 中的vue实例。如：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728123726.png" alt=""></p><br><h3 id="el和templat区别（二）"><a href="#el和templat区别（二）" class="headerlink" title="el和templat区别（二）"></a><strong>el和templat区别（二）</strong></h3><p>el 和template模板的关系是什么呢？</p><p><strong>在我们之前的学习中，我们知道el用于指定Vue要管理的DOM，可以帮助解析其中的指令、事件监听等等。</strong></p><p><strong>而如果Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板。</strong></p><p>这样做有什么好处呢？</p><p>这样做之后我们就不需要在以后的开发中再次操作index.html，只需要在template中写入对应的标签即可</p><br><p>但是，书写template模块非常麻烦怎么办呢？</p><p>没有关系，稍后我们会将template模板中的内容进行抽离。</p><p>会分成三部分书写：template、script、style，结构变得非常清晰。</p><br><h3 id="vue-文件封装处理"><a href="#vue-文件封装处理" class="headerlink" title=".vue 文件封装处理"></a>.vue 文件封装处理</h3><p>vue-loader 以及 vue-template-compiler 帮助我们处理。</p><p>安装vue-loader和vue-template-compiler</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></tbody></table></figure><p>新建 .vue 文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728143524.png" alt=""></p><p>在index.js 入口文件中：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728144722.png" alt=""></p><p>修改webpack.config.js的配置文件：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728143958.png" alt=""></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  use: {</span><br><span class="line">    loader: <span class="string">'vue-loader'</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [ <span class="comment">//配置插件的节点，所有插件都要在这里配置</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ],</span><br></pre></td></tr></tbody></table></figure><br><h3 id="在组件中简单使用组件（简称套娃）"><a href="#在组件中简单使用组件（简称套娃）" class="headerlink" title="在组件中简单使用组件（简称套娃）"></a>在组件中简单使用组件（简称套娃）</h3><p>新建一个Cpn.vue文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/image-20200728145937854.png" alt=""></p><p>在 App.vue 中 配置如下</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728150324.png" alt=""></p><p>编译运行：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728150505.png" alt=""></p><br><h3 id="省略引入文件的后缀名"><a href="#省略引入文件的后缀名" class="headerlink" title="省略引入文件的后缀名"></a>省略引入文件的后缀名</h3><p>当我们引入一下文件的时候，会这样写</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728151628.png" alt=""></p><p>有时候我们不想写文件的后缀名，可以进行如下配置</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resolve: {</span><br><span class="line">  <span class="comment">// 配置 省略文件后缀名</span></span><br><span class="line">  extensions: [<span class="string">'.js'</span>, <span class="string">'.css'</span>, <span class="string">'.vue'</span>],  </span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>这样我们就不用写文件的后缀名啦</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/image-20200728151810700.png" alt=""></p><br><h2 id="plugin-的使用"><a href="#plugin-的使用" class="headerlink" title="plugin 的使用"></a>plugin 的使用</h2><ul><li><p>plugin是什么？</p><ul><li>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。</li><li>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</li></ul></li><li><p>loader和plugin区别</p><ul><li><strong>loader主要用于转换某些类型的模块，它是一个转换器</strong>。</li><li><strong>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</strong></li></ul></li><li><p>plugin的使用过程：</p><ul><li>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</li><li>步骤二：在webpack.config.js中的plugins中配置插件。</li></ul></li></ul><br><h3 id="添加版权的Plugin"><a href="#添加版权的Plugin" class="headerlink" title="添加版权的Plugin"></a>添加版权的Plugin</h3><p>为打包的文件添加版权声明，该插件名字叫BannerPlugin，属于webpack自带的插件。</p><p>按照下面的方式来修改webpack.config.js的文件：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728202019.png" alt=""></p><p>重新打包程序：查看bundle.js文件的头部，看到如下信息</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728202043.png" alt=""></p><br><h3 id="打包html资源的plugin"><a href="#打包html资源的plugin" class="headerlink" title="打包html资源的plugin"></a>打包html资源的plugin</h3><p><a href="https://aqingya.cn/2020/07/14/53/#2-4-%E6%89%93%E5%8C%85%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90" target="_blank" rel="noopener">传送门1</a> <a href="https://aqingya.cn/2020/07/15/54/#1-7-HTML-%E5%8E%8B%E7%BC%A9" target="_blank" rel="noopener">传送门2</a></p><ul><li><p>目前，我们的index.html文件是存放在项目的根目录下的。</p><ul><li>我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。</li><li>所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件</li></ul></li><li><p>HtmlWebpackPlugin插件可以为我们做这些事情：</p><ul><li>自动生成一个index.html文件(可以指定模板来生成)</li><li>将打包的js文件，自动通过script标签插入到body中</li></ul></li></ul><p>安装HtmlWebpackPlugin插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install html-webpack-plugin@3.2.0 --save-dev</span><br></pre></td></tr></tbody></table></figure><ul><li>使用插件，修改webpack.config.js文件中plugins部分的内容如下：<ul><li>这里的template表示根据什么模板来生成index.html</li><li>另外，我们需要删除之前在output中添加的publicPath属性</li><li>否则插入的script标签中的src可能会有问题</li></ul></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728205053.png" alt=""></p><p><strong><span style="color:red">html-webpack-plugin</span></strong><br><span style="color:red">  功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br><span style="color:red">  需求：需要有结构的HTML文件</span></p><p><code>template: "./src/index.html"&lt;/span&gt;</code></p><p><span style="color:red">  复制 ‘./src/index.html’ 文件，并自动引入打包输出的所有资源（JS/CSS）</span></p><br><h3 id="js压缩的Plugin"><a href="#js压缩的Plugin" class="headerlink" title="js压缩的Plugin"></a><strong>js压缩的Plugin</strong></h3><p><span style="color:red"><strong>注意，在webpack4之后，只要我们将生产模式设置为生产环境， <code>mode: 'production'</code> 它就会自动压缩js代码。</strong></span></p><p><span style="background-color:#ff0">开发阶段不建议使用 js 压缩 不方便我们来调试</span></p><p>在项目发布之前，我们必然需要对js等文件进行压缩处理</p><p>这里，我们就对打包的js文件进行压缩</p><p>我们使用一个第三方的插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install uglifyjs-webpack-plugin@1.1.1 --save-dev</span><br></pre></td></tr></tbody></table></figure><p>修改webpack.config.js文件，使用插件：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728212923.png" alt=""></p><br><h2 id="搭建本地服务器-dev-server"><a href="#搭建本地服务器-dev-server" class="headerlink" title="搭建本地服务器 dev-server"></a><strong>搭建本地服务器</strong> dev-server</h2><p><a href="https://aqingya.cn/2020/07/14/53/#2-6-devserver" target="_blank" rel="noopener">传送门</a></p><br><p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</p><p>不过它是一个单独的模块，在webpack中使用之前需要先安装它</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev webpack-dev-server@2.9.1</span><br></pre></td></tr></tbody></table></figure><p>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：</p><ul><li><p>contentBase：项目构建后路径，为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写build</p></li><li><p>port：端口号</p></li><li><p>open：值为true的时候，编译运行的时候，自动打开浏览器。</p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200728224311.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之Module语法的简单使用</title>
      <link href="/articl/f47b67c1.html"/>
      <url>/articl/f47b67c1.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/842582724237852672.jpg" alt=""></p><a id="more"></a><p><a href="https://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">阮一峰es6</a></p><h1 id="export指令"><a href="#export指令" class="headerlink" title="export指令"></a>export指令</h1><h2 id="export基本使用"><a href="#export基本使用" class="headerlink" title="export基本使用"></a><strong>export</strong>基本使用</h2><p><strong>export</strong>指令用于导出变量，比如下面的代码：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726100902.png" alt=""></p><p>上面的代码还有另外一种写法：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726100921.png" alt=""></p><br><h2 id="导出函数或类"><a href="#导出函数或类" class="headerlink" title="导出函数或类"></a><strong>导出函数或类</strong></h2><p>上面我们主要是输出变量，也可以输出函数或者输出类</p><p>上面的代码也可以写成这种形式：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726101046.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726101058.png" alt=""></p><br><h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a><strong>export</strong> <strong>default</strong></h2><p>某些情况下，一个模块中包含某个的功能，我们并不希望给这个功能命名，而且让导入者可以自己来命名</p><p>这个时候就可以使用export default</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726101205.png" alt=""></p><p>我们来到main.js中，这样使用就可以了</p><p>这里的myFunc是我自己命名的，你可以根据需要命名它对应的名字</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726101213.png" alt=""></p><p>另外，<strong>需要注意</strong>：</p><p><span style="color:red"><strong>export default在同一个模块中，不允许同时存在多个。</strong></span></p><br><h1 id="import使用"><a href="#import使用" class="headerlink" title="import使用"></a><strong>import</strong>使用</h1><p>我们使用<strong>export</strong>指令导出了模块对外提供的接口，下面我们就可以通过<strong>import</strong>命令来加载对应的这个模块了</p><p>首先，我们需要在HTML代码中<strong>引入两个js文件</strong>，并且类型需要设置为<strong>module</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726101411.png" alt=""></p><p>import指令用于导入模块中的内容，比如main.js的代码</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726101422.png" alt=""></p><p>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦：</p><p>通过*可以导入模块中所有的export变量</p><p>但是通常情况下我们需要给*起一个别名，方便后续的使用</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200726101434.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Module语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 分号结尾的问题</title>
      <link href="/articl/b53d32bf.html"/>
      <url>/articl/b53d32bf.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/248667912046641316.jpg" alt=""></p><a id="more"></a><h2 id="一定要使用分号的情况"><a href="#一定要使用分号的情况" class="headerlink" title="一定要使用分号的情况"></a>一定要使用分号的情况</h2><p>分号不只是语句结尾使用，在某些语法中，具有分隔表达式或语句的作用：</p><ul><li><code>for</code> 中的表达式之间：</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br></pre></td></tr></tbody></table></figure><ul><li>同一行使用多个表达式：</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 1</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>; i++</span><br><span class="line"></span><br><span class="line"><span class="comment">// example 2</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'foo'</span>: dosomething(); <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><ul><li>以 <code>[ (</code> 开头的行，这是一种特殊的风格，用来防止解析器或者压缩工具误认为某行和上面几行在一起解析，造成代码执行结果错误，还有 <code>IIFE</code>（立即执行函数表达式）这种情况 ：</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 1</span></span><br><span class="line">;(x||y).doSomething()</span><br><span class="line">;[a,b,c].<span class="keyword">forEach</span>(doSomething)</span><br><span class="line"></span><br><span class="line"><span class="comment">// example 2</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{})()</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> js语法规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 组件化开发</title>
      <link href="/articl/92af846d.html"/>
      <url>/articl/92af846d.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/0ad7df3c78a34d90b3a7a49a82ea920.jpg" alt=""></p><a id="more"></a><h1 id="认识组件化"><a href="#认识组件化" class="headerlink" title="认识组件化"></a>认识组件化</h1><h2 id="什么是组件化？"><a href="#什么是组件化？" class="headerlink" title="什么是组件化？"></a><strong>什么是组件化？</strong></h2><p>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。</p><p>但如果，我们讲一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723223308.png" alt=""></p><p>我们将一个完整的页面分成很多个组件。</p><p>每个组件都用于实现页面的一个功能块。</p><p>而每一个组件又可以进行细分。</p><h2 id="Vue-组件化思想"><a href="#Vue-组件化思想" class="headerlink" title="Vue 组件化思想"></a>Vue 组件化思想</h2><p>组件化是Vue.js中的重要思想</p><ul><li><p><strong>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。</strong></p></li><li><p><strong>任何的应用都会被抽象成一颗组件树。</strong></p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723223650.png" alt=""></p><p>组件化思想的应用：</p><ul><li><p>有了组件化的思想，我们在之后的开发中就要充分的利用它。</p></li><li><p>尽可能的将页面拆分成一个个小的、可复用的组件。</p></li><li><p>这样让我们的代码更加方便组织和管理，并且扩展性也更强</p></li></ul><h1 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h1><h2 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h2><p><strong>组件的使用分成三个步骤</strong>：</p><ol><li>创建组件构造器</li><li>注册组件</li><li>使用组件。</li></ol><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723224146.png" alt=""></p><p>我们来看一个例子：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723231402.png" alt=""></p><h2 id="注册组件步骤解析"><a href="#注册组件步骤解析" class="headerlink" title="注册组件步骤解析"></a>注册组件步骤解析</h2><p>1、Vue.extend()：</p><p>   调用<code>Vue.extend()</code>创建的是一个组件构造器。</p><p>  通常在创建组件构造器时，<strong>传入<code>template</code>代表我们自定义组件的模板。</strong></p><p>  该模板就是在使用到组件的地方，要显示的HTML代码。</p><p>  事实上，这种写法在Vue2.x的文档中几乎已经看不到了，它会直接使用下面我们会讲到的语法糖，但是语法糖它的原理还是这样的。</p><p>2.Vue.component()：</p><p>  调用<code>Vue.component()</code>是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。</p><p>  所以需要传递<strong>两个参数</strong>：1、<strong>注册组件的标签名</strong> 2、<strong>组件构造器</strong>。</p><p>3.组件必须挂载在某个Vue实例下，否则它不会生效。</p><h1 id="全局组件与局部组件"><a href="#全局组件与局部组件" class="headerlink" title="全局组件与局部组件"></a>全局组件与局部组件</h1><p>注册全局组件之后，其他的vue实例都能使用它。<strong>实际开发中大多数就有一个vue实例</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724085811.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724085923.png" alt=""></p><br><p>注册局部组件：在该vue实例中注册。则就只能在该实例中使用，其他实例中就渲染不出来。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724090451.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724090540.png" alt=""></p><h1 id="父组件与子组件"><a href="#父组件与子组件" class="headerlink" title="父组件与子组件"></a>父组件与子组件</h1><p>子组件就是在<strong>父组件中的组件构造器中注册</strong>，并在父组件中使用。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724094533.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724094616.png" alt=""></p><h1 id="注册组件的语法糖"><a href="#注册组件的语法糖" class="headerlink" title="注册组件的语法糖"></a>注册组件的语法糖</h1><p>Vue为了简化这个过程，提供了注册的语法糖。</p><p><span style="color:red"><strong>主要是省去了调用Vue.extend()的步骤，而是可以直接使用一个对象来代替。</strong></span></p><p><strong>就是将<code>Vue.extend()</code>中的对象拿出来，在注册组件的时候 ，用它来替代。</strong></p><p>1、全局注册中的使用语法糖</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724101434.png" alt=""></p><p>2、局部注册中使用语法糖</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724102245.png" alt=""></p><h2 id="模板的分离写法"><a href="#模板的分离写法" class="headerlink" title="模板的分离写法"></a><strong>模板的分离写法</strong></h2><p>如果我们能将其中的HTML分离出来写，然后挂载到对应的组件上，必然结构会变得非常清晰。</p><p>Vue提供了两种方案来定义HTML模块内容：</p><ul><li><p>使用<code>&lt;script&gt;</code>标签</p></li><li><p>使用<code>&lt;template&gt;</code>标签</p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724104532.png" alt=""></p><h1 id="组件数据存放"><a href="#组件数据存放" class="headerlink" title="组件数据存放"></a>组件数据存放</h1><p>组件自己的数据存放在哪里呢?</p><ul><li><p>组件对象也有一个data属性(也可以有methods等属性，下面我们有用到)</p></li><li><p>只是这个data属性必须是一个函数</p></li><li><p>而且这个函数返回一个对象，对象内部保存着数据</p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724120625.png" alt=""></p><p><strong>为什么data在组件中必须是一个函数呢?</strong></p><p>首先，如果不是一个函数，Vue直接就会报错。</p><p>其次，原因是在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724131939.png" alt=""></p><h1 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h1><p>子组件是不能引用父组件或者Vue实例的数据的。但是，在开发中，往往一些数据确实需要从上层传递到下层：</p><ul><li><p>比如在一个页面中，我们从服务器请求到了很多的数据。</p></li><li><p>其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。</p></li><li><p>这个时候，并不会让子组件再次发送一个网络请求，而是直接让<strong>大组件</strong>(父组件将数据传递给<strong>小组件(子组件)</strong>。</p></li></ul><p>如何进行父子组件间的通信呢？Vue官方提到</p><ul><li><p><strong>通过props向子组件传递数据</strong></p></li><li><p><strong>通过事件向父组件发送消息</strong></p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724150643.png" alt=""></p><h2 id="父级向子级传递数据"><a href="#父级向子级传递数据" class="headerlink" title="父级向子级传递数据"></a>父级向子级传递数据</h2><p>在组件中，使用选项props来声明需要从父级接收到的数据。</p><p>props的值有两种方式：</p><p><strong>方式一：字符串数组，数组中的字符串就是传递时的名称。</strong> <strong>(在实际开发中，一般都会使用对象来传递)</strong></p><p><strong>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等。</strong></p><p>我们先来看方式一：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724154316.png" alt=""></p><br><p><span style="color:red"><strong>当需要对props进行类型等验证时，就需要对象写法了</strong>。</span></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724193729.png" alt=""></p><br><p>我们说过，除了数组之外，我们也可以使用对象，<span style="background-color:#ff0">当需要对<strong>props</strong>进行类型等验证时，就需要对象写法了。</span></p><p>验证都支持哪些数据类型呢？</p><ul><li><p>String</p></li><li><p>Number</p></li><li><p>Boolean</p></li><li><p>Array</p></li><li><p>Object</p></li><li><p>Date</p></li><li><p>Function</p></li><li><p>Symbol</p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/image-20200724162547495.png" alt=""></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-cpn</span> <span class="attr">v-bind:ctitle</span>=<span class="string">"title"</span> <span class="attr">:cmessage</span>=<span class="string">"message"</span> <span class="attr">:cfruits</span>=<span class="string">"fruits"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ctitle}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{cmessage}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in cfruits"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{cperson.firstName}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Vue.component("child-cpn", {</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   template: "#cpn",</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   props: ["ctitle"]</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// })</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line"><span class="actionscript">        title: <span class="string">"阿清"</span>,</span></span><br><span class="line"><span class="actionscript">        message: <span class="string">"kkk"</span>,</span></span><br><span class="line"><span class="actionscript">        fruits: [<span class="string">"香蕉"</span>, <span class="string">"苹果"</span>, <span class="string">"梨"</span>],</span></span><br><span class="line">        person: {</span><br><span class="line"><span class="actionscript">          firstName: <span class="string">"wu"</span>,</span></span><br><span class="line"><span class="actionscript">          lastName: <span class="string">"zhiguang"</span></span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">      },</span><br><span class="line">      components: {</span><br><span class="line"><span class="actionscript">        <span class="string">'child-cpn'</span>: {</span></span><br><span class="line"><span class="actionscript">          template: <span class="string">"#cpn"</span>,</span></span><br><span class="line">          props: {</span><br><span class="line"><span class="actionscript">            <span class="comment">// 基础数据类型检查</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// ctitle: String,</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 带有默认值的</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// ctitle: {</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   type: String,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   default: "wzg"</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// },</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 必填字符串</span></span></span><br><span class="line">            ctitle: {</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">              required: <span class="literal">true</span></span></span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 基础数据类型检测</span></span></span><br><span class="line"><span class="javascript">            cfruits: <span class="built_in">Array</span>,</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 有默认值的检测</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// cfruits: {</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   type: Array,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   default () {</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     return ['111', '333', '222']</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   }</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// },</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 自定义检测</span></span></span><br><span class="line">            cmessage: {</span><br><span class="line">              validator(value) {</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> [<span class="string">'kkk'</span>, <span class="string">'eee'</span>].indexOf(value) !== <span class="number">-1</span></span></span><br><span class="line">              }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 必填</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// cfruits: {</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   type: Array,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   required: true</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// }</span></span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span>html</span><br></pre></td></tr></tbody></table></figure><p>再次练习：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ccpn</span> <span class="attr">:ctitle</span>=<span class="string">"title"</span> <span class="attr">:cfruits</span>=<span class="string">"fruits"</span> <span class="attr">:cinfo</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h1&gt;{{person.name}}&lt;/h1&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ctitle}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in cfruits"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{cinfo.age}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="actionscript">      title: <span class="string">"阿清大大"</span>,</span></span><br><span class="line"><span class="actionscript">      fruits: [<span class="string">'香蕉'</span>, <span class="string">'苹果'</span>, <span class="string">'梨'</span>, <span class="string">'菠萝'</span>],</span></span><br><span class="line">      info: {</span><br><span class="line"><span class="actionscript">        name: <span class="string">"wzg"</span>,</span></span><br><span class="line">        age: 19</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">      ccpn: {</span><br><span class="line"><span class="actionscript">        template: <span class="string">"#cpn"</span>,</span></span><br><span class="line">        props: {</span><br><span class="line">          ctitle: {</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>: <span class="string">"柯南"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// required: true</span></span></span><br><span class="line">          },</span><br><span class="line">          cfruits: {</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span> () {</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> [<span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'5'</span>]</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          cinfo: {</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span> () {</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> {}</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="子级向父级传递数据"><a href="#子级向父级传递数据" class="headerlink" title="子级向父级传递数据"></a>子级向父级传递数据</h2><p>当子组件需要向父组件传递数据时，就要用到自定义事件了。我们之前学习的v-on不仅仅可以用于监听DOM事件，也可以用于组件间的自定义事件。</p><p>自定义事件的流程：</p><ul><li><p>在子组件中，通过<code>$emit()</code>来触发事件。</p></li><li><p>在父组件中，通过v-on来监听子组件事件。</p></li></ul><p>我们来看一个简单里例子：</p><p>在真实的项目开发中，我们可能需要子组件向父组价中传递数据，如</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724211957.png" alt=""></p><p>当我们点击手机数码的时候，会向父组件中传递数据，说明我点击的是手机数码，然后父组件才能去发送请求，来请求数据。<span style="background-color:#ff0">在第二步中，<code>&lt;cpn @item-click="cpnClick"&gt;&lt;/cpn&gt;</code> cpnClick 可以不用传参数，不加括号的情况下，使用默认的参数，也就是我们想要传的那个参数<code>item</code>。因为自定义的响应事件<strong>不和</strong>浏览器中的click等事件一样，有默认的参数event，自定义事件的默认参数就是我们要传的参数。</span></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724214048.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724215252.png" alt=""></p><p>案例二：</p><p>我们之前做过一个两个按钮+1和-1，点击后修改counter。</p><p>我们整个操作的过程还是在子组件中完成，但是之后的展示交给父组件。</p><p>这样，我们就需要将子组件中的counter，传给父组件的某个属性，比如total。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200724221522.png" alt=""></p><p>案例源码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">addclick</span>=<span class="string">"counterclick"</span> @<span class="attr">lessclick</span>=<span class="string">"counterclick"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前数：{{tot}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpnC"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"less"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line">        tot: 0</span><br><span class="line">      },</span><br><span class="line">      methods: {</span><br><span class="line">        counterclick(counter) {</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.tot = counter</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      components: {</span><br><span class="line"><span class="actionscript">        <span class="string">"cpn"</span>: {</span></span><br><span class="line"><span class="actionscript">          template: <span class="string">"#cpnC"</span>,</span></span><br><span class="line">          data() {</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> {</span></span><br><span class="line">              counter: 0</span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          methods: {</span><br><span class="line">            add() {</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.counter++;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">"addclick"</span>, <span class="keyword">this</span>.counter)</span></span><br><span class="line"></span><br><span class="line">            },</span><br><span class="line">            less() {</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.counter--;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">"lessclick"</span>, <span class="keyword">this</span>.counter)</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="父子组件的访问"><a href="#父子组件的访问" class="headerlink" title="父子组件的访问"></a>父子组件的访问</h1><p>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问跟组件。</p><p><span style="color:red"><strong>父组件访问子组件：使用$children或$refs reference(引用)。</strong></span></p><p><strong><span style="color:red">子组件访问父组件：使用$parent。</span></strong></p><h2 id="children（开发中较少使用）"><a href="#children（开发中较少使用）" class="headerlink" title="$children（开发中较少使用）"></a>$children（开发中较少使用）</h2><p><strong><code>this.$children</code>是一个<span style="color:red">数组类型</span>，它包含所有子组件对象。</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725110000.png" alt=""></p><p>我们这里通过<strong>父组件</strong>中的两个按钮，分别取出对应<strong>子组件</strong>中的数据。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725105226.png" alt=""></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnclick1"</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnclick2"</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpnC"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpnCo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"cpn1"</span>, {</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">"#cpnC"</span>,</span></span><br><span class="line">      data() {</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> {</span></span><br><span class="line"><span class="actionscript">          name: <span class="string">"柯南"</span>,</span></span><br><span class="line">          showname() {</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"我是子组件1中的name"</span>);</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"cpn2"</span>, {</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">"#cpnCo"</span>,</span></span><br><span class="line">      data() {</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> {</span></span><br><span class="line"><span class="actionscript">          name: <span class="string">"新一"</span>,</span></span><br><span class="line">          showname() {</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"我是子组件2中的name"</span>);</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line"><span class="actionscript">        message: <span class="string">'aqing'</span></span></span><br><span class="line">      },</span><br><span class="line">      methods: {</span><br><span class="line">        btnclick1() {</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">0</span>].name);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$children[<span class="number">0</span>].showname();</span></span><br><span class="line">        },</span><br><span class="line">        btnclick2() {</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">1</span>].name);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$children[<span class="number">1</span>].showname();</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="refs（开发中较多使用）"><a href="#refs（开发中较多使用）" class="headerlink" title="$refs（开发中较多使用）"></a><strong>$refs（开发中较多使用）</strong></h2><p><code>$children</code>的缺陷：</p><p>通过$children访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值。</p><p>但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化。</p><p>有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用$refs</p><p><strong><code>this.$refs</code>是一个<span style="color:red">对象类型</span>，它包含所有子组件对象。</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725111506.png" alt=""></p><p><code>$refs</code>的使用：</p><p>$refs和ref指令通常是一起使用的。</p><p>首先，我们通过ref给某一个子组件绑定一个特定的ID。</p><p>其次，通过this.$refs.ID就可以访问到该组件了。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725110424.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725112240.png" alt=""></p><h2 id="parent-（开发中使用较少）"><a href="#parent-（开发中使用较少）" class="headerlink" title="$parent （开发中使用较少）"></a><strong>$parent</strong> （开发中使用较少）</h2><p>如果我们想在子组件中直接访问父组件，可以通过$parent</p><p><strong>注意事项：</strong></p><p>尽管在Vue开发中，我们允许通过$parent来访问父组件，但是在真实开发中尽量不要这样做。</p><p>子组件应该尽量避免直接访问父组件的数据，因为这样<strong>耦合度太高</strong>了。</p><p>如果我们将子组件放在另外一个组件之内，很可能该父组件没有对应的属性，往往会引起问题。</p><p>另外，更不好做的是通过$parent直接修改父组件的状态，那么父组件中的状态将变得飘忽不定，很不利于我的调试和维护。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725115122.png" alt=""></p><h1 id="插槽-slot"><a href="#插槽-slot" class="headerlink" title="插槽 slot"></a>插槽 slot</h1><h2 id="为什么使用插槽slot"><a href="#为什么使用插槽slot" class="headerlink" title="为什么使用插槽slot"></a>为什么使用插槽slot</h2><p>组件的插槽：</p><p><strong>组件的插槽也是为了让我们封装的组件更加具有扩展性。</strong></p><p><strong>让使用者可以决定组件内部的一些内容到底展示什么。</strong></p><p>比如：移动网站中的导航栏。</p><p>移动开发中，几乎每个页面都有导航栏。</p><p>导航栏我们必然会封装成一个插件，比如nav-bar组件。</p><p>一旦有了这个组件，我们就可以在多个页面中复用了。</p><p>但是，每个页面的导航是一样的吗？No，我以京东M站为例</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725162922.png" alt=""></p><h2 id="如何封装这类组件呢？slot"><a href="#如何封装这类组件呢？slot" class="headerlink" title="如何封装这类组件呢？slot"></a>如何封装这类组件呢？slot</h2><p>如何封装这类的组件？</p><p>  它们有很多区别，也有很多的共性。</p><p>  如果，我们每单独封装一个组件，显然不合适，比如每个页面都有返回，这部分我们就要去重复去封装。</p><p>  但是，如果我们封装成一个好像也不合理，有些左侧是菜单，有些是返回，有些中间是搜索，有些是文字，等等。</p><p>如何封装合适呢？<span style="color:red"><strong>抽取共性，保留不同。</strong></span></p><p>  最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。</p><p>  一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。</p><p>  是搜索框，还是文字，还是菜单。由调用者自己来决定。</p><p>这就是为什么我们要学习组件中的插槽slot的原因</p><h2 id="slot-的简单使用"><a href="#slot-的简单使用" class="headerlink" title="slot  的简单使用"></a>slot 的简单使用</h2><p>在子组件中，使用特殊的元素<code>&lt;slot&gt;</code>就可以为子组件开启一个插槽。</p><p>该插槽插入什么内容取决于父组件如何使用。</p><br><p>有了这个插槽后，父组件如何使用呢？</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725165210.png" alt=""></p><p><span style="color:red"><code>&lt;slot&gt;</code>中的内容表示，如果没有在该组件中插入任何其他内容，就默认显示该内容</span></p><p><span style="color:red"><strong>插槽slot 可以有默认值，也可以没有默认值。</strong></span></p><p><span style="color:red"><strong>在自定义标签中写插入的内容。</strong></span></p><p><span style="color:red"><strong>插入的内容可以是多个值，同时放入到组件中进行替换，则一起替换默认值。</strong></span></p><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>当子组件的功能复杂时，子组件的插槽可能并非是一个。</p><p>比如我们封装一个导航栏的子组件，可能就需要三个插槽，分别代表左边、中间、右边。</p><p>那么，外面在给插槽插入内容时，如何区分插入的是哪一个呢？</p><p>这个时候，我们就需要给插槽起一个名字</p><p>如何使用具名插槽呢？</p><p>非常简单，只要给slot元素一个name属性即可<code>&lt;slot name='myslot'&gt;&lt;/slot&gt;</code></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725174213.png" alt=""></p><h2 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a><strong>编译作用域</strong></h2><p>什么是编译作用域？</p><p>我们自己来通过一个例子来理解这个概念：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200725182236.png" alt=""></p><p>这是为什么呐？</p><p>官方给出了一条准则：<span style="color:red"><strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译</strong></span></p><p>而我们在父组件中使用<code>&lt;cpn v-show="isShow"&gt;&lt;/cpn&gt;</code>的时候，整个组件的使用过程是相当于在父组件中出现的。</p><p>那么他的作用域就是父组件，使用的属性也是属于父组件的属性。</p><p><strong>因此，父组件中的 isShow使用的是Vue实例中的属性，而不是子组件的属性。子组件中的isShow使用的是子组件中定义的属性。</strong></p><p>总结一句话：<span style="color:red"><strong>在哪儿使用，在哪儿找变量</strong></span></p><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>什么是作用域插槽呐？</p><p>我们先记住一句话：<span style="color:red"><strong>父组件替换插槽的标签，但是内容由子组件来提供。</strong></span></p><br><p>我们先看一个案例：</p><p>1.子组件中包括一组数据，比如：fruits: [‘苹果’, ‘香蕉’, ‘菠萝’, ‘西瓜’, ‘榴莲’]</p><p>2.需要在多个界面进行展示：</p><p>  某些界面是以水平方向一一展示的，</p><p>  某些界面是以列表形式展示的，</p><p>  某些界面使用符号将它们连接起来，比如：”苹果 - 香蕉 - 菠萝 - 西瓜 - 榴莲”</p><p>我就要思考 数据在子组件中，但是展示方式是由我们父组件来决定的。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/ssss.png" alt=""></p><p>第一步：<strong>我们需要通过<code>&lt;slot :data ="fruits"&gt;&lt;/slot&gt;</code>来将子组件中定义的数据绑定到slot上</strong>。</p><p>第二步：<strong>在父组件中使用子组件的时候，定义一个模板 <code>&lt;template&gt;</code>（也可以是<code>&lt;div&gt;</code>），并定义<code>slot-scope="slot"</code>属性通过slot来引入我们第一步定义的插槽对象。</strong></p><p>第三步：<strong>我们此时得到数据<code>slot.data</code>就是子组件中的fruits数据，得到数据<code>slot.data</code>之后，父组件就可以使用自己的展示方式来渲染这些数据。</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>{{slot.data.join(" — ")}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong></p><p>1.（<code>slot-scope="slot"</code>是自己命名的，比如可以<code>slot-scope="slotProps"</code>）这第三步的<code>slot.data</code>就改为<code>slotProps.data</code>。</p><p>2.得到数据<code>slot.data</code>(data是自己定义的名字)之后。</p><p>3.在父组件中使用子组件的时候，定义的模板 <code>&lt;template&gt;</code>也可以是<code>&lt;div&gt;</code></p><br><p>到现在我们再来理解一下：<span style="color:red"><strong>父组件替换插槽的标签，但是内容由子组件来提供。</strong></span>是不是就清楚了作用域插槽的作用。</p><br><p>案例源码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{slotProps.data.join(" - ")}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{slotProps.data.join(" * ")}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in slotProps.data"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpnC"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span> =<span class="string">"fruits"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: {},</span><br><span class="line">      components: {</span><br><span class="line">        cpn: {</span><br><span class="line"><span class="actionscript">          template: <span class="string">"#cpnC"</span>,</span></span><br><span class="line">          data() {</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> {</span></span><br><span class="line"><span class="actionscript">              fruits: [<span class="string">'苹果'</span>, <span class="string">'香蕉'</span>, <span class="string">'菠萝'</span>, <span class="string">'西瓜'</span>, <span class="string">'榴莲'</span>]</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue组件化开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 模板语法</title>
      <link href="/articl/3a0cc30e.html"/>
      <url>/articl/3a0cc30e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/u=1668822300,3403425547&amp;fm=26&amp;gp=0.jpg" alt=""></p><a id="more"></a><h1 id="vue-模板语法"><a href="#vue-模板语法" class="headerlink" title="vue 模板语法"></a>vue 模板语法</h1><br><p><a href="https://cn.vuejs.org/v2/guide/syntax.html" target="_blank" rel="noopener">官方文档</a></p><br><h2 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h2><h3 id="Mustache语法（常用-，牢记）"><a href="#Mustache语法（常用-，牢记）" class="headerlink" title="Mustache语法（常用 ，牢记）"></a>Mustache语法（常用 ，牢记）</h3><p>Mustache语法又叫胡子语法，或者双大括号</p><p>数据都是响应式的。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{message+message}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{m*2}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{firstName+" "+lastName}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{firstName}}{{lastName}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: {</span><br><span class="line"><span class="actionscript">            message: <span class="string">"aqing"</span>,</span></span><br><span class="line"><span class="actionscript">            firstName: <span class="string">"柯"</span>,</span></span><br><span class="line"><span class="actionscript">            lastName: <span class="string">"南"</span>,</span></span><br><span class="line">            m: 100</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><strong>v-once</strong></h3><p>但是，在某些情况下，我们可能不希望界面随意的跟随改变</p><p>这个时候，我们就可以使用一个Vue的指令</p><p><code>v-once:</code></p><ul><li><p>该指令后面不需要跟任何表达式(比如之前的v-for后面是由跟表达式的)</p></li><li><p>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变。</p></li></ul><p>代码如下：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720160259.png" alt=""></p><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><strong>v-html</strong></h3><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 某些情况下，我们从服务器请求到的数据本身就是一个HTML代码</span><br><span class="line">  - 如果我们直接通过{{}}来输出，会将HTML代码也一起输出。</span><br><span class="line">  - 但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容。</span><br><span class="line"></span><br><span class="line">- 如果我们希望解析出HTML展示</span><br><span class="line">  - 可以使用v-html指令</span><br><span class="line">  - 该指令后面往往会跟上一个string类型</span><br><span class="line">  - 会将string的html解析出来并且进行渲染</span><br></pre></td></tr></tbody></table></figure></blockquote><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720160506.png" alt=""></p><p><strong>v-text</strong></p><ul><li><p>v-text作用和Mustache比较相似：都是用于将数据显示在界面中</p></li><li><p>v-text通常情况下，接受一个string类型</p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720160707.png" alt=""></p><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a><strong>v-pre</strong></h3><ul><li><p>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。</p></li><li><p>比如下面的代码：</p><ul><li>第一个h2元素中的内容会被编译解析出来对应的内容</li><li>第二个h2元素中会直接显示</li></ul></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720160800.png" alt=""></p><h3 id="v-cloak-不常用"><a href="#v-cloak-不常用" class="headerlink" title="v-cloak(不常用)"></a><strong>v-cloak(不常用)</strong></h3><ul><li><p>在某些情况下，我们浏览器可能会直接显然出未编译的Mustache标签。</p></li><li><p>cloak: 斗篷</p></li></ul><h2 id="动态绑定属性-v-bind"><a href="#动态绑定属性-v-bind" class="headerlink" title="动态绑定属性  v-bind"></a>动态绑定属性 v-bind</h2><h3 id="v-bind基础"><a href="#v-bind基础" class="headerlink" title="v-bind基础"></a>v-bind基础</h3><p>除了内容需要动态来决定外，某些属性我们也希望动态来绑定。</p><ul><li><p>比如动态绑定a元素的href属性</p></li><li><p>比如动态绑定img元素的src属性</p></li><li><p>比如图片的链接src、网站的链接href、动态绑定一些类、样式等等</p></li></ul><p>这个时候，我们可以使用v-bind指令：</p><ul><li><p><strong>作用</strong>：动态绑定属性</p></li><li><p><strong>缩写</strong>：:</p></li><li><p><strong>预期</strong>：any (with argument) | Object (without argument)</p></li><li><p><strong>参数</strong>：attrOrProp (optional)</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定属性的操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgurl"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>cljie<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: {</span><br><span class="line"><span class="actionscript">            imgurl: <span class="string">'https://www.baidu.com/img/flexible/logo/pc/result.png'</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'https:aqingya.cn'</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-bind-语法糖"><a href="#v-bind-语法糖" class="headerlink" title="v-bind 语法糖"></a>v-bind 语法糖</h3><p>v-bind有一个对应的语法糖，也就是简写方式</p><p>  在开发中，我们通常会使用语法糖的形式，因为这样更加简洁。</p><p>简写方式如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind  的语法糖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgurl"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>cljie<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: {</span><br><span class="line"><span class="actionscript">            imgurl: <span class="string">'https://www.baidu.com/img/flexible/logo/pc/result.png'</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'https:aqingya.cn'</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-bind-绑定class-对象语法"><a href="#v-bind-绑定class-对象语法" class="headerlink" title="v-bind 绑定class 对象语法"></a>v-bind 绑定class 对象语法</h3><p>p对象语法的含义是:class后面跟的是一个对象。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class={ key1:value1,key2:value2}&gt;vue&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 :class={ 类名1:boolean,类名2:boolean}&gt;vue&lt;/h1&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>用法一</strong>：直接通过{}绑定一个类</p><p><code>&lt;h2 :class="{'active': isActive}"&gt;Hello World&lt;/h2&gt;</code></p><p><strong>用法二：</strong>也可以通过判断，传入多个值</p><p><code>&lt;h2 :class="{'active': isActive, 'line': isLine}"&gt;Hello World&lt;/h2&gt;</code></p><p><strong>用法三</strong>：和普通的类同时存在，并不冲突 ，<strong>一般在该属性必须有的情况下，才使用和普通的类同时存在</strong></p><p><span style="background-color:#ff0">注：如果isActive和isLine都为true，那么会有title/active/line三个类</span></p><p><code>&lt;h2 class="title" :class="{'active': isActive, 'line': isLine}"&gt;Hello World&lt;/h2&gt;</code></p><p><strong>用法四</strong>：如果过于复杂，可以放在一个methods或者computed中</p><p>注：classes是一个计算属性</p><p><code>&lt;h2 class="title" :class="classes"&gt;Hello World&lt;/h2&gt;</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>vue1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"active"</span>&gt;</span>vue2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- &lt;h1 :class={ key1:value1,ke2:value2}&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">      &lt;h1 :class={ 类名1:boolean,类名2:boolean}&gt;&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"{ active: isactive, line: isline}"</span>&gt;</span>vue3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"{ 'active': isactive, 'line': isline}"</span>&gt;</span>vue4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">&lt;!-- 用法四：如果过于复杂，可以放在一个methods或者computed中 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"getclass()"</span>&gt;</span>vue5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"btnclick"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">          el: <span class="string">'#app'</span>,</span></span><br><span class="line">          data: {</span><br><span class="line"><span class="actionscript">              active: <span class="string">'active'</span>,</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">              isactive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">              isline: <span class="literal">true</span>,</span></span><br><span class="line">          },</span><br><span class="line">          methods: {</span><br><span class="line">              btnclick() {</span><br><span class="line"><span class="actionscript">                  <span class="keyword">this</span>.isactive = !<span class="keyword">this</span>.isactive;</span></span><br><span class="line">              },</span><br><span class="line"><span class="actionscript">              <span class="comment">// 用法四：如果过于复杂，可以放在一个methods中</span></span></span><br><span class="line">              getclass() {</span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> {</span></span><br><span class="line"><span class="actionscript">                      <span class="string">'active'</span>: <span class="keyword">this</span>.isactive,</span></span><br><span class="line"><span class="actionscript">                      <span class="string">'line'</span>: <span class="keyword">this</span>.isline</span></span><br><span class="line">                  };</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-bind-绑定class-数组语法"><a href="#v-bind-绑定class-数组语法" class="headerlink" title="v-bind 绑定class 数组语法"></a>v-bind 绑定class 数组语法</h3><p>数组语法的含义是:class后面跟的是一个数组。</p><p><strong>用法一</strong>：直接通过[ ]绑定一个类</p><p><code>&lt;h2 :class="['active']"&gt;Hello World&lt;/h2&gt;</code></p><p><strong>用法二</strong>：也可以传入多个值</p><p><code>&lt;h2 :class="['active', 'line']"&gt;Hello World&lt;/h2&gt;</code></p><p><strong>用法三</strong>：和普通的类同时存在，并不冲突</p><p>注：会有title/active/line三个类</p><p><code>&lt;h2 class="title" :class="['active', 'line']"&gt;Hello World&lt;/h2&gt;</code></p><p><strong>加引号和不加引号的区别：不加引号当成变量去解析，加引号当成字符串去解析。</strong></p><p><code>&lt;h2 class="title" :class="[active, line]"&gt;Hello World&lt;/h2&gt;</code></p><p><strong>用法四</strong>：如果过于复杂，可以放在一个methods或者computed中</p><p>注：classes是一个计算属性。</p><p><code>&lt;h2 class="title" :class="classes"&gt;Hello World&lt;/h2&gt;</code></p><h3 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-bind绑定style</h3><p>我们可以利用v-bind:style来绑定一些CSS内联样式。</p><p>在写CSS属性名的时候，比如<code>font-size</code></p><p>我们可以使用驼峰式 (camelCase) <code>fontSize</code></p><p>或短横线分隔 (kebab-case，记得用单引号括起来) <code>‘font-size’</code></p><p>n绑定class有两种方式：</p><ul><li><p>对象语法（常用）</p><ul><li>·<code>:style="{color: currentColor, fontSize: fontSize + 'px'}"</code></li><li>style后面跟的是一个对象类型，对象的key是CSS属性名称，对象的value是具体赋的值，值可以来自于data中的属性。</li></ul></li><li><p>数组语法（不常用）</p><ul><li><code>&lt;div v-bind:style="[baseStyles, overridingStyles]"&gt;&lt;/div&gt;</code></li><li>style后面跟的是一个数组类型，多个值以，分割即可。</li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- '50px' 不加 '' 会被当成一个变量去解析 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"{fontSize: '50px'}"</span>&gt;</span>{{massage}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"{color:iscolor,'background-color':isback,fontSize:issize+'px'}"</span>&gt;</span>{{massage}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 可以放在一个methods --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"getStyle()"</span>&gt;</span>{{massage}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数组的形式  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[style1,style2]"</span>&gt;</span>{{massage}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: {</span><br><span class="line"><span class="actionscript">            massage: <span class="string">'aqing'</span>,</span></span><br><span class="line"><span class="actionscript">            iscolor: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="actionscript">            isback: <span class="string">'yellow'</span>,</span></span><br><span class="line">            issize: 50,</span><br><span class="line">            </span><br><span class="line">            style1: {</span><br><span class="line"><span class="actionscript">                backgroundColor: <span class="string">'red'</span></span></span><br><span class="line">            },</span><br><span class="line">            style2: {</span><br><span class="line"><span class="actionscript">                fontSize: <span class="string">'50px'</span></span></span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            getStyle() {</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> {</span></span><br><span class="line"><span class="actionscript">                    color: <span class="keyword">this</span>.iscolor,</span></span><br><span class="line"><span class="actionscript">                    backgroundColor: <span class="keyword">this</span>.isback,</span></span><br><span class="line"><span class="actionscript">                    fontSize: <span class="keyword">this</span>.issize + <span class="string">'px'</span></span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性(computed)"></a>计算属性(computed)</h2><h3 id="计算属性的基本使用"><a href="#计算属性的基本使用" class="headerlink" title="计算属性的基本使用"></a>计算属性的基本使用</h3><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据。</p><p>但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p><p><span style="background-color:#ff0">我们调用它的时候，就把它当成一个属性来调用就行。</span></p><ul><li><p>比如我们有firstName和lastName两个变量，我们需要显示完整的名称。</p></li><li><p>但是如果多个地方都需要显示完整的名称，我们就需要写多个</p></li></ul><p>我们可以将上面的代码换成计算<strong>属性</strong>：</p><p>OK，我们发现计算属性是写在实例的computed选项中的。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{firstName+lastName}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{firstName}}{{lastName}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{getfullName()}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{fullName}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: {</span><br><span class="line"><span class="actionscript">            firstName: <span class="string">'蔡'</span>,</span></span><br><span class="line"><span class="actionscript">            lastName: <span class="string">'徐坤'</span></span></span><br><span class="line">        },</span><br><span class="line">        computed: {</span><br><span class="line">            fullName() {</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line"><span class="actionscript">        <span class="comment">//asdfasdfsad阿萨德</span></span></span><br><span class="line">        methods: {</span><br><span class="line">            getfullName() {</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720162708.png" alt=""></p><p>计算属性的一些复杂操作</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{Price}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: {</span><br><span class="line">            books: [{</span><br><span class="line">                id: 1,</span><br><span class="line"><span class="actionscript">                name: <span class="string">'java'</span>,</span></span><br><span class="line">                price: 100</span><br><span class="line">            }, {</span><br><span class="line">                id: 1,</span><br><span class="line"><span class="actionscript">                name: <span class="string">'php'</span>,</span></span><br><span class="line">                price: 100</span><br><span class="line">            }, {</span><br><span class="line">                id: 1,</span><br><span class="line"><span class="actionscript">                name: <span class="string">'html'</span>,</span></span><br><span class="line">                price: 100</span><br><span class="line">            }, {</span><br><span class="line">                id: 1,</span><br><span class="line"><span class="actionscript">                name: <span class="string">'css'</span>,</span></span><br><span class="line">                price: 160</span><br><span class="line">            }]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line">        computed: {</span><br><span class="line">            Price() {</span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// for (let i = 0; i &lt; this.books.length; i++) {</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//     sum += this.books[i].price;</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// }</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// for (let i in this.books) {</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//     console.log(i);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//     sum += this.books[i].price;</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// }</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.books) {</span></span><br><span class="line">                    sum += item.price;</span><br><span class="line">                }</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> (sum + <span class="string">"元"</span>);</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="计算属性的setter和getter-理解"><a href="#计算属性的setter和getter-理解" class="headerlink" title="计算属性的setter和getter(理解)"></a>计算属性的setter和getter(理解)</h3><ul><li>每个计算属性都包含一个getter和一个setter<ul><li>在上面的例子中，我们只是使用getter来读取。</li><li>在某些情况下，你也可以提供一个setter方法（不常用）。</li><li>在需要写setter的时候，代码如下：</li></ul></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720170254.png" alt=""></p><h3 id="计算属性的缓存"><a href="#计算属性的缓存" class="headerlink" title="计算属性的缓存"></a><strong>计算属性的缓存</strong></h3><p><span style="color:red"><strong>我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行</strong></span></p><p>我们先来看一个例子:</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720174828.png" alt=""></p><p><strong>上面的例子可以看出来 我们用自己创建的方法还是计算属性，看着都差不多，都可以实现我们的功能但是真的是这样吗？</strong></p><br><p>首先我们测试先使用4次getfullName() 函数，并在调用的时候，打印一句话。测试结果如下：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720175211.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720175549.png" alt=""></p><p>打印了四次，说明我们创建的函数，在使用的时候，使用几次就调用几次。</p><p>我们再看一下计算属性：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720175816.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720175836.png" alt=""></p><p>就打印了一次，说明<span style="background-color:#ff0">计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。</span></p><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><ul><li><p>在前端开发中，我们需要经常和用于交互。</p><ul><li>这个时候，我们就必须监听用户发生的时间，比如点击、拖拽、键盘事件等等</li><li>在Vue中如何监听事件呢？使用v-on指令</li></ul></li><li><p><strong>v-on</strong>介绍</p><ul><li><strong>作用</strong>：绑定事件监听器</li><li><strong>缩写</strong>：@</li><li><strong>预期</strong>：Function | Inline Statement | Object</li><li><strong>参数</strong>：event</li></ul></li></ul><h3 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a>v-on参数</h3><ul><li><p>当通过methods中定义方法，以供@click调用时，需要<strong>注意参数问题</strong>：</p></li><li><p>情况一：如果该方法不需要额外参数，那么方法后的()可以不添加。</p><ul><li>但是注意：<span style="background-color:#ff0">如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去</span></li></ul></li><li><p>情况二：如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件。</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--当监听事件没有参数时，() 可加可不加。  --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"btnclick1"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"btnclick1()"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 当监听事件需要参数的时候，但是在事件定义时，写方法时省略了小括号，这个时候vue会默认</span></span><br><span class="line"><span class="comment">   将浏览器生产的event事件对象作为参数传入到方法中。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnclick2"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 监听事件需要参数的时候，但是在事件定义时，写方法时写了小括号，但是没有传参，会默认undefined。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnclick2()"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 方法定义时，我们需要event对象，同时又需要其他参数， --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 在调用方法时，使用 $event 就能手动获取到浏览器参数的event对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnclick3(123,$event)"</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: {</span><br><span class="line"></span><br><span class="line">     },</span><br><span class="line">     methods: {</span><br><span class="line">       btnclick1() {</span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">"按钮1"</span>);</span></span><br><span class="line">       },</span><br><span class="line">       btnclick2(ab) {</span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(ab);</span></span><br><span class="line">       },</span><br><span class="line">       btnclick3(ab, event) {</span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(ab + <span class="string">"============"</span> + event);</span></span><br><span class="line">       }</span><br><span class="line">     }</span><br><span class="line">   })</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h3><ul><li><p>在某些情况下，我们拿到event的目的可能是进行一些事件处理。</p></li><li><p>Vue提供了修饰符来帮助我们方便的处理一些事件：</p><ul><li>.stop - 调用 event.stopPropagation()。</li><li>.prevent - 调用 event.preventDefault()。</li><li>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。</li><li>.native - 监听组件根元素的原生事件。</li><li>.once - 只触发一次回调。</li></ul></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200720231935.png" alt=""></p><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p><p>Vue 还对应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters" target="_blank" rel="noopener"><code>addEventListener</code> 中的 <code>passive</code> 选项</a>提供了 <code>.passive</code> 修饰符。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个 <code>.passive</code> 修饰符尤其能够提升移动端的性能。</p><p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<strong>不</strong>想阻止事件的默认行为。</p><br><h3 id="v-on-按键修饰符"><a href="#v-on-按键修饰符" class="headerlink" title="v-on 按键修饰符"></a>v-on <a href="https://cn.vuejs.org/v2/guide/events.html#按键修饰符" target="_blank" rel="noopener">按键修饰符</a></h3><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>全部的按键别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><p>实例</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="v-if、v-else-if、v-else"><a href="#v-if、v-else-if、v-else" class="headerlink" title="v-if、v-else-if、v-else"></a>v-if、v-else-if、v-else</h3><p><code>v-if、v-else-if、v-else</code></p><p>  这三个指令与JavaScript的条件语句if、else、else if类似。</p><p>  Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</p><p><code>v-if</code>的原理：</p><p>  <code>v-if</code>后面的条件为false时，对应的元素以及其子元素不会渲染。</p><p>  也就是根本没有不会有对应的标签出现在DOM中。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200721113747.png" alt=""></p><h3 id="条件渲染案例"><a href="#条件渲染案例" class="headerlink" title="条件渲染案例"></a>条件渲染案例</h3><ul><li>我们来做一个简单的小案例：<ul><li>用户再登录时，可以切换使用用户账号登录还是邮箱地址登录</li><li>类似如下情景：</li></ul></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200721122701.png" alt=""></p><p>代码实现：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isuser"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user"</span>&gt;</span>手机登陆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">placeholder</span>=<span class="string">"手机登陆"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"emial"</span>&gt;</span>邮箱登陆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"emial"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱登陆"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isuser=!isuser"</span>&gt;</span>登录转换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="actionscript">      isuser: <span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>小问题：</p><p>  如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前的输入的内容。</p><p>  但是按道理讲，我们应该切换到另外一个input元素中了。</p><p>  在另一个input元素中，我们并没有输入内容。</p><p>  为什么会出现这个问题呢？</p><p>问题解答：</p><p>  <span style="background-color:#ff0">这是因为Vue在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。</span></p><p>  <span style="background-color:#ff0">在上面的案例中，Vue内部会发现原来的input元素不再使用，直接作为else中的input来使用了。</span></p><p>解决方案：</p><p>  如果我们不希望Vue出现类似重复利用的问题，可以给对应的input添加key。</p><p>  并且我们需要保证key的不同。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200721123207.png" alt=""></p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><code>v-show</code> 和<code>v-if</code> 的用法类似，都是决定一个页面是否被渲染。</p><p>那他们有什么区别呐？</p><p>  <code>v-if</code>当条件为false时，压根不会有对应的元素在DOM中。</p><p>  <code>v-show</code>当条件为false时，仅仅是将元素的<code>display</code>属性设置为<code>none</code>而已。</p><p>​ <img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200721130443.png" alt=""></p><p>开发中如何选择呢？</p><p>  当需要在显示与隐藏之间切片很频繁时，使用<code>v-show</code>。</p><p>  当只有一次切换时，通过使用<code>v-if</code>。</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>一个简单的过滤器：修改一个数据的样式。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200721200523.png" alt=""></p><h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><h3 id="v-for的基本使用"><a href="#v-for的基本使用" class="headerlink" title="v-for的基本使用"></a><code>v-for</code>的基本使用</h3><p>当我们有一组数据需要进行渲染时，我们就可以使用v-for来完成。</p><p>遍历的时候没有下标值的情况</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>遍历的时候有下标值的情况</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in arr"</span>&gt;</span>{{index}}-{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果在遍历对象的时候，只有一个值，那么这值就是 value</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value) in obj"</span>&gt;</span>{{value}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​ 遍历对象时，也可以获取key值，格式：(value,key)</p><pre><code><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key) in obj"</span>&gt;</span>{{value}}-{{key}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></code></pre><p>​ 遍历对象时，也可以获取下标值，格式：(value,key，index)</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in obj"</span>&gt;</span>{{value}}-{{key}}-{{index}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 遍历的时候没有下标值的情况 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 遍历的时候有下标值的情况--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in arr"</span>&gt;</span>{{index}}-{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 如果在遍历对象的时候，只有一个值，那么这值就是 value --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value) in obj"</span>&gt;</span>{{value}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 遍历对象时，也可以获取key值，格式：(value,key) --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--  遍历对象时，也可以获取下标值，格式：(value,key，index) --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in obj"</span>&gt;</span>{{value}}-{{key}}-{{index}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: {</span><br><span class="line"><span class="actionscript">       arr: [<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王二"</span>],</span></span><br><span class="line">       obj: {</span><br><span class="line"><span class="actionscript">         name: <span class="string">"阿清"</span>,</span></span><br><span class="line">         age: 22,</span><br><span class="line">         heigth: 178</span><br><span class="line">       }</span><br><span class="line">     }</span><br><span class="line">   })</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200721133604.png" alt=""></p><h3 id="检测数组更新"><a href="#检测数组更新" class="headerlink" title="检测数组更新"></a>检测数组更新</h3><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新。</p><p>Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200721172414.png" alt=""></p><p>有一点要注意的是，<strong><span style="background-color:#ff0">通过数组的索引值来修改数组中的数据的时候，并不能使视图发生对应的更新。</span></strong></p><h2 id="表单绑定-v-model"><a href="#表单绑定-v-model" class="headerlink" title="表单绑定 v-model"></a>表单绑定 v-model</h2><h3 id="v-model-的简单使用"><a href="#v-model-的简单使用" class="headerlink" title="v-model 的简单使用"></a>v-model 的简单使用</h3><p>表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单。<strong>Vue中使用v-model指令来实现表单元素和数据的双向绑定。</strong></p><p>举个栗子：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="actionscript">      message: <span class="string">"aqing"</span></span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723100057.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723100225.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723103043.png" alt=""></p><br><p><strong>当我们在输入框输内容的时候，</strong></p><p><strong>因为input中的v-model绑定了message，所以会实时将输入的内容传递给message，则message发生变换，</strong></p><p><strong>当message放上变化的时候，因为上面我们使用Mustache语法，将message的值插入到DOM中，所以DOM会发生响应的改变。</strong></p><p><strong>因此，通过v-model实现了表单的双向绑定。</strong></p><h3 id="v-model-原理"><a href="#v-model-原理" class="headerlink" title="v-model 原理"></a>v-model 原理</h3><p>v-model其实是一个语法糖，它的背后本质上是包含两个操作：</p><ul><li><p>1.v-bind绑定一个value属性</p></li><li><p>2.v-on指令给当前元素绑定input事件</p></li></ul><p>也就是说下面的代码：等同于下面的代码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>等同于</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"message"</span> <span class="attr">v-on:input</span>=<span class="string">"message = $event.target.value"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;input type="text" v-model="message"&gt; --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;input type="text" :value="message" @input="isinput"&gt; --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"message"</span> <span class="attr">v-on:input</span>=<span class="string">"message = $event.target.value"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">     el: <span class="string">'#app'</span>,</span></span><br><span class="line">     data: {</span><br><span class="line"><span class="actionscript">       message: <span class="string">"aqing"</span></span></span><br><span class="line"></span><br><span class="line">     },</span><br><span class="line">     methods: {</span><br><span class="line">       isinput(event) {</span><br><span class="line"><span class="actionscript">         <span class="keyword">this</span>.message = event.target.value;</span></span><br><span class="line">       }</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">   })</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-model-结合radio的使用"><a href="#v-model-结合radio的使用" class="headerlink" title="v-model 结合radio的使用"></a>v-model 结合radio的使用</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"woman"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你选中的是：{{sex}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line"><span class="actionscript">        sex: <span class="string">'男'</span></span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723120321.png" alt=""></p><h3 id="v-model结合checkbox-的使用"><a href="#v-model结合checkbox-的使用" class="headerlink" title="v-model结合checkbox 的使用"></a>v-model结合checkbox 的使用</h3><p>复选框分为两种情况：单个勾选框和多个勾选框。</p><p>单个勾选框：</p><ul><li><p>v-model即为布尔值。</p></li><li><p>此时input的value并不影响v-model的值。</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- checkbox 单选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"agree"</span>  <span class="attr">v-model</span>=<span class="string">"isagree"</span>&gt;</span>同意协议</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你的选择是：{{isagree}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">"!isagree"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="actionscript">      isagree: <span class="literal">false</span></span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面的一个例子是我们大多数会见到过的一个情景，点击用意协议，不然下一步不会进行。如：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723150718.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723150743.png" alt=""></p><br><p><strong>多个复选框</strong>：</p><p>当是多个复选框时，因为可以选中多个，<strong>所以对应的data中属性是一个数组</strong>。</p><p>当选中某一个时，就会将input的value添加到数组中。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- checkbox 多选框  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"西瓜"</span> <span class="attr">v-model</span>=<span class="string">"melon"</span>&gt;</span>西瓜</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"南瓜"</span> <span class="attr">v-model</span>=<span class="string">"melon"</span>&gt;</span>南瓜</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"冬瓜"</span> <span class="attr">v-model</span>=<span class="string">"melon"</span>&gt;</span>冬瓜</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"甜瓜"</span> <span class="attr">v-model</span>=<span class="string">"melon"</span>&gt;</span>甜瓜</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>选择你喜欢的瓜：{{melon}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line">        melon: []</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723152913.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723152934.png" alt=""></p><h3 id="v-model结合-select-的使用"><a href="#v-model结合-select-的使用" class="headerlink" title="v-model结合 select  的使用"></a>v-model结合 select 的使用</h3><p>和checkbox一样，select也分单选和多选两种情况。</p><p><strong>单选</strong>：只能选中一个值。</p><ul><li><p>v-model绑定的是一个值。</p></li><li><p>当我们选中option中的一个时，会将它对应的value赋值到mySelect中。</p></li></ul><p><strong>多选</strong>：可以选中多个值。</p><ul><li><p>model绑定的是一个数组。</p></li><li><p>当选中多个值时，就会将选中的option对应的value添加到数组mySelects中。</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- select 单选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">v-model</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"西瓜"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你选择的是{{fruit}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select 多选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"西瓜"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你选择的是{{fruits}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line"><span class="actionscript">        fruit: <span class="string">"香蕉"</span>,</span></span><br><span class="line"><span class="actionscript">        fruits: <span class="string">"香蕉"</span></span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723165110.png" alt=""></p><h3 id="v-model-的修饰符"><a href="#v-model-的修饰符" class="headerlink" title="v-model 的修饰符"></a>v-model 的修饰符</h3><p>lazy修饰符：</p><ul><li><p>默认情况下，v-model默认是在input事件中同步输入框的数据的。</p></li><li><p>也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变。</p></li><li><p>lazy修饰符可以让数据在<strong>失去焦点</strong>或者<strong>回车时</strong>才会更新：</p></li></ul><p>number修饰符：</p><ul><li><p>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。</p></li><li><p>但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。</p></li><li><p>number修饰符可以让在输入框中输入的内容自动转成数字类型：</p></li></ul><p>trim修饰符：</p><ul><li><p>如果输入的内容首尾有很多空格，通常我们希望将其去除</p></li><li><p>trim修饰符可以过滤内容左右两边的空格</p></li></ul><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723175147.png" alt=""></p><p><img src="C:%5CUsers%5Cdell%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200723175209575.png" alt=""></p><h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><p>我们前面的value中的值，可以回头去看一下，都是在定义input的时候直接给定的。但是真实开发中，这些input的值可能是从网络获取或定义在data中的。所以我们可以通过v-bind:value动态的给value绑定值。</p><p><strong>其实这就是v-bind</strong>。</p><p>我们来看一个例子：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723171702.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200723171819.png" alt=""></p><p>数据我们都是从data中的数组fruits中来获取里的，在开发中也是这样。<strong>值绑定说白了就是对v-bind的使用。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结了一些很实用值得收藏的站点</title>
      <link href="/articl/8293be2c.html"/>
      <url>/articl/8293be2c.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/eb0620c9994c4c08b06fde3d14ecc4a2.jpeg" alt=""></p><a id="more"></a><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#VR相关">VR相关</a></li><li><a href="#个人站点">个人站点</a></li><li><a href="#人工智能">人工智能</a></li><li><a href="#优秀网站">优秀网站</a></li><li><a href="#创意十足">创意十足</a></li><li><a href="#图标库">图标库</a></li><li><a href="#在线工具">在线工具</a></li><li><a href="#在线简历">在线简历</a></li><li><a href="#官方网站">官方网站</a></li><li><a href="#数据分析工具">数据分析工具</a></li><li><a href="#炫酷特效">炫酷特效</a></li><li><a href="#社区">社区</a></li><li><a href="#素材下载">素材下载</a></li><li><a href="#视频学习">视频学习</a></li><li><a href="#配色方案">配色方案</a></li><li><a href="#静态资源库">静态资源库</a></li><li><a href="#音效素材库">音效素材库</a></li><li><a href="#Hove特效">Hove特效</a></li><li><a href="#Wordpress">Wordpress</a></li><li><a href="#值得收藏">值得收藏</a></li><li><a href="#电子书">电子书</a></li><li><a href="#网站导航">网站导航</a></li><li><a href="#资源下载">资源下载</a></li><li><a href="#边学边玩">边学边玩</a></li></ul><h2 id="VR相关"><a href="#VR相关" class="headerlink" title="VR相关"></a>VR相关</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://www.vrfavs.com/" target="_blank" rel="noopener">VR网站仓库</a></td><td>汇集了国外涉及到VR的大部分知名网站</td><td><code>VR</code>、<code>网站导航</code></td></tr></tbody></table><h2 id="个人站点"><a href="#个人站点" class="headerlink" title="个人站点"></a>个人站点</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://github.com/10081677wc/blog/issues" target="_blank" rel="noopener">10081677wc</a></td><td>字节跳动公司某前端员工的博客</td><td><code>博客</code>、<code>字节跳动</code>、<code>前端</code></td></tr><tr><td><a href="https://www.instagram.com/bosslogic/" target="_blank" rel="noopener">@bosslogic</a></td><td>这是一位大神，你在网上看到的 90% 的漫威非官方海报都可能出自他手</td><td><code>漫威</code>、<code>海报</code>、<code>instagram</code></td></tr><tr><td><a href="http://aprilzero.com/" target="_blank" rel="noopener">Aanad Sharma</a></td><td>用各种wearable记录自己的数据，特效特别酷炫</td><td><code>可视化</code>、<code>酷炫</code>、<code>创意</code></td></tr><tr><td><a href="http://www.cnblogs.com/AllenChou/" target="_blank" rel="noopener">AllenChou博客</a></td><td>这位前端开发者的博客都比较基础，而且很多都是总结性质的，很适合给初学者开扩视野</td><td><code>博客</code>、<code>前端基础</code></td></tr><tr><td><a href="https://github.com/anjia/blog" target="_blank" rel="noopener">anjia blog</a></td><td>主要是CSS相关文章，还有JS以及Vue。</td><td><code>博客</code>、<code>CSS</code>、<code>JS</code>、<code>Vue</code></td></tr><tr><td><a href="http://aualeu.ro/" target="_blank" rel="noopener">Auăleu</a></td><td>风格诡谲暗黑手绘草稿儿一样的网站，一段充满特效的旅程就此开始</td><td><code>特效</code>、<code>暗黑</code>、<code>手绘</code></td></tr><tr><td><a href="http://worrydream.com/" target="_blank" rel="noopener">Bret Victor</a></td><td>应用多种媒介来展示不同内容，博主是这个时代少见的同时精通电子学、编程、交互设计的全能型天才。</td><td><code>天才</code>、<code>交互</code>、<code>特效</code></td></tr><tr><td><a href="http://www.cnblogs.com/coco1s/" target="_blank" rel="noopener">chokcoco</a></td><td>腾讯的一位前端大牛，github有1K+follower，前端基础很好，值得学习</td><td><code>博客</code>、<code>前端</code>、<code>CSS</code>、<code>腾讯</code></td></tr><tr><td><a href="https://github.com/creeperyang/blog" target="_blank" rel="noopener">creeperyang</a></td><td>主要是前端领域的基础知识和性能优化类文章</td><td><code>博客</code>、<code>前端基础</code>、<code>性能优化</code></td></tr><tr><td><a href="https://dalinhuang99.github.io/" target="_blank" rel="noopener">Dalin Huang</a></td><td>Dalin Huang（全栈工程师）的个人博客，做的很有意思</td><td><code>博客</code>、<code>创意</code>、<code>视差</code></td></tr><tr><td><a href="https://ucren.com/blog/" target="_blank" rel="noopener">Dron博客</a></td><td>作者的文章大多都是从某一问题出发进行讲解，不涉及框架工具之类，很有意思</td><td><code>博客</code></td></tr><tr><td><a href="http://girlwithacamera.co.uk/" target="_blank" rel="noopener">Girl With a Camera</a></td><td>Ashley 的个人博客，一位外国妹子，主题就是摄影作品展示</td><td><code>摄影</code></td></tr><tr><td><a href="http://harttle.com/" target="_blank" rel="noopener">Harttle Land</a></td><td>一个研究生自学前端的大牛，拿到了BAT的Special Offer，很多文章都写得非常好！</td><td><code>博客</code>、<code>大牛</code></td></tr><tr><td><a href="https://henrybrown.me/" target="_blank" rel="noopener">Henry Brown</a></td><td>没有乱入的特效，简单朴素，但是很清晰地展示了自己的作品</td><td><code>博客</code>、<code>简单朴素</code></td></tr><tr><td><a href="https://github.com/lin-xin/blog/" target="_blank" rel="noopener">林鑫的个人博客</a></td><td>文章内容包括JS、HTML5、CSS3、Vue、Node.js、React Native、小程序等方面。</td><td><code>博客</code>、<code>前端</code></td></tr><tr><td><a href="https://imququ.com/" target="_blank" rel="noopener">Jerry Qu的小站</a></td><td>专注前端开发，同时也有一些关于HTTP和Web服务器的文章</td><td><code>博客</code>、<code>前端</code></td></tr><tr><td><a href="https://github.com/laihuamin/JS-total" target="_blank" rel="noopener">JS流程图</a></td><td>大部分都是基础知识，少量框架相关</td><td><code>博客</code>、<code>前端基础</code></td></tr><tr><td><a href="http://kenjiendo.com/" target="_blank" rel="noopener">KENJI ENDO</a></td><td>将音乐与设计结合到一起的个人网站，动效的设计可以称得上惊艳。</td><td><code>音乐</code>、<code>设计</code>、<code>特效</code></td></tr><tr><td><a href="http://blog.dingjian.name/#/" target="_blank" rel="noopener">Last Blog</a></td><td>仿github设计的个人博客，很有想法</td><td><code>博客</code>、<code>github</code>、<code>创意</code></td></tr><tr><td><a href="https://github.com/lcxfs1991/blog" target="_blank" rel="noopener">leehey’s blog</a></td><td>李成熙，腾讯云高级工程师。专注于性能优化、工程化和小程序服务。</td><td><code>博客</code>、<code>腾讯</code>、<code>性能优化</code>、<code>工程化</code></td></tr><tr><td><a href="http://litten.me/" target="_blank" rel="noopener">Litten博客</a></td><td>分享自己的生活多于前端</td><td><code>博客</code></td></tr><tr><td><a href="http://www.matrix67.com/" target="_blank" rel="noopener">Matrix67.com</a></td><td>极简主义的代表，可以尝试着随便点点</td><td><code>极简主义</code></td></tr><tr><td><a href="http://maxogden.github.io/slides/nodepdx/index.html" target="_blank" rel="noopener">Maxodgen的作品展示</a></td><td>3D立体博客，可以通过WSAD+空格+鼠标进行视角转换</td><td><code>博客</code>、<code>3D</code></td></tr><tr><td><a href="http://mosesfinlay.com/" target="_blank" rel="noopener">mosesfinlay</a></td><td>12岁，4年码龄，你凭什么不努力。。</td><td><code>12岁</code></td></tr><tr><td><a href="https://www.nczonline.net/" target="_blank" rel="noopener">NCZOnline</a></td><td>JS大神Zakas作者的个人博客，如果你不知道Zakas是谁。。</td><td><code>博客</code>、<code>大神</code></td></tr><tr><td><a href="http://www.nerisson.fr/" target="_blank" rel="noopener">nerisson.fr</a></td><td>黑色主色调搭配着怪诞的插画，个人风格非常强烈</td><td><code>怪诞</code>、<code>风格</code></td></tr><tr><td><a href="http://objetorocha.com/" target="_blank" rel="noopener">Objeto Rocha</a></td><td>图片的投影会随着鼠标的位置发生变化，很有趣</td><td><code>交互</code>、<code>创意</code></td></tr><tr><td><a href="http://www.paulineosmont.com/" target="_blank" rel="noopener">Pauline Osmont</a></td><td>精致的配色，精致的排版，简单精致的特效</td><td><code>配色</code>、<code>简单</code>、<code>精致</code></td></tr><tr><td><a href="https://www.phodal.com/" target="_blank" rel="noopener">PHODAL</a></td><td>一个拿了BAT头条小米领英等公司十几个offer的大牛。。</td><td><code>博客</code>、<code>大牛</code></td></tr><tr><td><a href="https://github.com/pigcan/blog" target="_blank" rel="noopener">pigcan</a></td><td>webpack和git相关文章占多数，目前总共16篇文章</td><td><code>博客</code>、<code>webpack</code></td></tr><tr><td><a href="https://github.com/dwqs/blog" target="_blank" rel="noopener">Pomy blog</a></td><td>主要分享基础知识和Vue相关知识。</td><td><code>博客</code>、<code>前端基础</code>、<code>Vue</code></td></tr><tr><td><a href="http://blog.poetries.top/" target="_blank" rel="noopener">Potery’s Blog</a></td><td>首页很炫，作者并不算前端大牛，但是擅长总结，内容很实用</td><td><code>炫酷</code></td></tr><tr><td><a href="https://www.t3kila.com/" target="_blank" rel="noopener">Romain Wurtz</a></td><td>鼠标滑过特效是水墨风</td><td><code>特效</code>、<code>水墨</code></td></tr><tr><td><a href="https://saber.love/" target="_blank" rel="noopener">saber.love</a></td><td>这是一个充满福利的网站，懂的自然懂</td><td><code>福利</code>、<code>二次元</code></td></tr><tr><td><a href="http://ghmagical.com/" target="_blank" rel="noopener">TG-路虽远，无所畏</a></td><td>作者是一个前端大牛，不仅有自己开发的移动端UI框架，还有三本前端书籍</td><td><code>博客</code>、<code>大牛</code></td></tr><tr><td><a href="https://github.com/justjavac/the-front-end-knowledge-you-may-not-know/issues?page=1&amp;q=is:issue+is:open" target="_blank" rel="noopener">the-front-end-knowledge-you-may-not-know</a></td><td>你需要知道的前端知识，多是一些很冷门但很基础的知识。</td><td><code>前端基础</code>、<code>冷门</code></td></tr><tr><td><a href="http://www.vanschneider.com/" target="_blank" rel="noopener">Tobias van Schneider</a></td><td>一个跨领域多学科设计师，前Spotify的首席设计师和艺术指导，设计界的网红</td><td><code>设计</code>、<code>网红</code></td></tr><tr><td><a href="http://www.css88.com/" target="_blank" rel="noopener">Web前端开发</a></td><td>专注前端开发,关注用户体验,内容很丰富,不仅有前端相关的新闻,还有一些教程资源,同时还有各种中文文档,是目前为止翻译的最好的中文文档,最重要的是,这竟然是某个前端开发工程师的个人网站!</td><td><code>教程</code>、<code>文档</code>、<code>资源</code></td></tr><tr><td><a href="http://www.wendyshijia.com/" target="_blank" rel="noopener">Wendy Shijia</a></td><td>简单大气，一目了然，独特的时间线以及信息表达方式</td><td><code>创意</code>、<code>简单</code></td></tr><tr><td><a href="http://iconmoon.com/" target="_blank" rel="noopener">关于 JJ Ying</a></td><td>排版很不错的一个网站，hover特效简单精致</td><td><code>特效</code>、<code>排版</code></td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">冴羽的博客</a></td><td>冴羽写博客的地方，预计写四个系列：JavaScript深入系列、JavaScript专题系列、ES6系列、React系列。</td><td><code>博客</code>、<code>JS</code>、<code>React</code></td></tr><tr><td><a href="https://github.com/ljianshu/Blog" target="_blank" rel="noopener">前端工匠</a></td><td>侧重于前端基础知识以及react、node和webpack等入门与底层原理分析</td><td><code>博客</code>、<code>前端基础</code>、<code>框架</code></td></tr><tr><td><a href="http://www.yelanqiu.com/" target="_blank" rel="noopener">叶蓝秋</a></td><td>很别致的一个网站，排版配色都很不错</td><td><code>排版</code>、<code>配色</code></td></tr><tr><td><a href="https://www.yeehee.cn/" target="_blank" rel="noopener">叶赫先生</a></td><td>有很多Wordpress、小程序相关的文章，同时网站特效很不错</td><td><code>Wordpress</code>、<code>小程序</code>、<code>特效</code></td></tr><tr><td><a href="http://miaoxiaoer.com/" target="_blank" rel="noopener">喵小二</a></td><td>一个交互型网站，可以尝试输入各种词，比如“呵呵”</td><td><code>交互</code>、<code>人工智能</code></td></tr><tr><td><a href="http://dreamwq.com/home/" target="_blank" rel="noopener">大冬瓜主页</a></td><td>全屏滚动，特效很多</td><td><code>特效</code>、<code>全屏</code></td></tr><tr><td><a href="https://www.runningcheese.com/" target="_blank" rel="noopener">奔跑中的奶酪</a></td><td>作者喜欢分享，软件、工具、书籍等等。</td><td><code>分享</code></td></tr><tr><td><a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a></td><td>廖雪峰，全栈工程师，python专家，关于前端的教程没有什么特色，可以作为补漏的教材吧。</td><td><code>博客</code>、<code>专家</code></td></tr><tr><td><a href="http://www.bingo929.com/" target="_blank" rel="noopener">彬Go的个人网站</a></td><td>一个老前端的个人网站，首页很酷</td><td><code>酷</code></td></tr><tr><td><a href="https://blog.wpjam.com/" target="_blank" rel="noopener">我爱水煮鱼blog</a></td><td>我爱水煮鱼是一个关注 WordPress 开源博客平台应用和互联网的独立 IT 博客。为广大 WordPress 爱好者提供了大量关于 WordPress 的插件、代码以及相关的建站经验分享，同时提供了 WordPress 主题制作与 WordPress 博客客户化等商业服务。</td><td><code>Wodpress</code></td></tr><tr><td><a href="http://jspang.com/" target="_blank" rel="noopener">技术胖博客</a></td><td>技术胖-胜洪宇关注web前端技术-前端免费视频第一博客，里面有很多免费的视频教程。</td><td><code>免费视频</code>、<code>教程</code></td></tr><tr><td><a href="https://github.com/yygmind/blog" target="_blank" rel="noopener">木易杨blog</a></td><td>前端进阶系列和Vue进阶系列写的很不错</td><td><code>进阶</code>、<code>Vue</code></td></tr><tr><td><a href="https://github.com/youngwind/blog" target="_blank" rel="noopener">梁少峰的个人博客</a></td><td>梁少峰的个人博客，有很多对于Vue、React的前端知识总结</td><td><code>Vue</code>、<code>React</code></td></tr><tr><td><a href="https://mikelin.cn/" target="_blank" rel="noopener">楠哥说</a></td><td>wordpress搭建的博客，很有创造力</td><td><code>Wordpress</code></td></tr><tr><td><a href="http://www.cnblogs.com/tomxu/archive/2011/12/15/2288411.html" target="_blank" rel="noopener">汤姆大叔的博客</a></td><td>链接为汤姆大叔博客中的深入理解JavaScript系列文章，虽然不适合初学者，但是进阶还是知识满满</td><td><code>进阶</code>、<code>JS</code></td></tr><tr><td><a href="https://github.com/ljianshu/Blog" target="_blank" rel="noopener">浪里行舟</a></td><td>将近三十篇文章，多集中在基础知识和Vue</td><td><code>前端基础</code>、<code>Vue</code></td></tr><tr><td><a href="http://www.yanshiba.com/" target="_blank" rel="noopener">燕十八博客</a></td><td>燕十八,PHP培训师,但是涉猎比较广,而且个人感觉讲的比较明白清楚,博客上的内容虽然比较少,但是肯定会有所帮助.</td><td><code>PHP</code></td></tr><tr><td><a href="https://liukanshan.zhihu.com" target="_blank" rel="noopener">知乎的刘看山</a></td><td>刘看山作为知乎推出的吉祥物，其上线以来就饱受争议（大部分因为长相），不过这个小站做的还是蛮不错的</td><td><code>知乎</code>、<code>吉祥物</code></td></tr><tr><td><a href="https://shenzjd.com/" target="_blank" rel="noopener">神族九帝</a></td><td>一个专注于分享的网站</td><td><code>分享</code></td></tr><tr><td><a href="https://www.qqzmly.com/" target="_blank" rel="noopener">程志辉博客</a></td><td>程志辉的个人博客</td><td><code>Typecho</code></td></tr><tr><td><a href="http://glexe.com/#/intro" target="_blank" rel="noopener">第5维度™工作室</a></td><td>很酷炫的一个个人站，一个 设计+代码 多修的“手艺人”。</td><td><code>酷炫</code>、<code>设计</code></td></tr><tr><td><a href="http://www.syg315.com/" target="_blank" rel="noopener">素云阁</a></td><td>简洁大气，交互很有个性，背景音乐也不错，博主是湖南卫视芒果TV视觉设计师</td><td><code>简洁</code>、<code>交互</code></td></tr><tr><td><a href="https://www.dandyweng.com/" target="_blank" rel="noopener">翁天信的个人博客</a></td><td>少年博主，每年都会进行一次改版，每次改版都能看到他的切实成长(摄影前端写作身高等各方各面的)</td><td><code>摄影</code></td></tr><tr><td><a href="https://morvanzhou.github.io/tutorials/" target="_blank" rel="noopener">莫烦Python</a></td><td>机器学习大神莫烦的个人博客</td><td><code>机器学习</code>、<code>大神</code></td></tr><tr><td><a href="http://blog.sina.com.cn/u/5691553152" target="_blank" rel="noopener">车小胖的博客</a></td><td>关于网络方面的技术博客，作者对网络中的一些现象和技术点做了比较通透的解释。</td><td><code>网络</code></td></tr><tr><td><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰</a></td><td>阮一峰，经济学博士，但是也是IT研究人员，主要专注于网站制作，他阅读量非常大，而且涉猎面比较广，相信这个网站教给你的不会局限于技术。</td><td><code>大神</code></td></tr><tr><td><a href="https://www.yuque.com/ruanyf/share" target="_blank" rel="noopener">阮一峰每周分享</a></td><td>每周五阮一峰都会在博客上记录过去一周，看到的值得分享的东西。</td><td><code>分享</code>、<code>阮一峰</code></td></tr></tbody></table><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://www.atyun.com/" target="_blank" rel="noopener">AiTechYun</a></td><td>关于AI的各种信息，包括新闻和资源下载，旨在让大家更了解人工智能</td><td><code>网站导航</code>、<code>资源</code></td></tr><tr><td><a href="http://sklearn.lzjqsdd.com/" target="_blank" rel="noopener">scikit-learn</a></td><td>基于Python语言的机器学习工具，可以很轻松的实现分类、聚类、回归等</td><td><code>机器学习</code>、<code>Python</code></td></tr><tr><td><a href="https://blog.limiabc.com/" target="_blank" rel="noopener">里米先生</a></td><td>wordpress主题，设计师的个人博客，简约大方，创意十足</td><td><code>Wordpress</code>、<code>设计</code>、<code>创意</code></td></tr></tbody></table><h2 id="优秀网站"><a href="#优秀网站" class="headerlink" title="优秀网站"></a>优秀网站</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://aquatilis.tv/aquatilis-expedition/" target="_blank" rel="noopener">Aquatilis Expedition</a></td><td>是一项为期三年的通过未知的史诗级水下之旅,探索世界上最不寻常的生物，网站动效和视觉效果很不错</td><td><code>生物</code>、<code>动效</code>、<code>视觉</code></td></tr><tr><td><a href="http://www.basics09.de/" target="_blank" rel="noopener">Basics09</a></td><td>通过点击手指添加不同乐器与和弦</td><td><code>音乐</code>、<code>创意</code></td></tr><tr><td><a href="http://benthebodyguard.com/" target="_blank" rel="noopener">Ben the Bodyguard</a></td><td>一段关于Ben来历的视频，营造出一个很酷的场景。它采用了很另类的视觉设计</td><td><code>酷</code>、<code>视觉</code></td></tr><tr><td><a href="https://bulma.io/" target="_blank" rel="noopener">Bulma</a></td><td>Bulma是一个基于Flexbox的开源CSS框架，网站整体布局和设计都很精致</td><td><code>布局</code>、<code>设计</code></td></tr><tr><td><a href="https://www.canva.com/" target="_blank" rel="noopener">Canva</a></td><td>利用 Canva 的拖放功能和布局，可以设计、分享和打印名片、徽标、演示文稿及更多内容。</td><td><code>设计</code>、<code>分享</code></td></tr><tr><td><a href="https://codepen.io/guide" target="_blank" rel="noopener">Codepen设计模式</a></td><td>codepen网站的设计模式</td><td><code>Codepen</code>、<code>设计模式</code></td></tr><tr><td><a href="https://www.grabient.com/" target="_blank" rel="noopener">Grabient</a></td><td>生成漂亮的CSS渐变，操作简单，网站设计也很棒</td><td><code>CSS</code>、<code>渐变</code>、<code>设计</code></td></tr><tr><td><a href="https://gravual.com/en/" target="_blank" rel="noopener">GRAVUAL™</a></td><td>位于比利时的一个平面设计工作室网站，一些hover特效蛮不错的</td><td><code>特效</code>、<code>设计</code></td></tr><tr><td><a href="https://hakim.se/" target="_blank" rel="noopener">Hakim.se</a></td><td>按钮的交互方式很特别</td><td><code>交互</code></td></tr><tr><td><a href="https://uber.github.io/kepler.gl/#/" target="_blank" rel="noopener">Kepler.gl</a></td><td>Kepler.gl是Uber开发的一个强大的地理空间分析工具，可用于大规模数据集。</td><td><code>Uber</code>、<code>大数据</code></td></tr><tr><td><a href="http://oops.re/" target="_blank" rel="noopener">Oops Pages</a></td><td>404页面优秀设计案例展示</td><td><code>404</code>、<code>案例</code>、<code>设计</code></td></tr><tr><td><a href="http://www.rainymood.com/" target="_blank" rel="noopener">Rainy Mood</a></td><td>一款App的介绍视频，通过下雨打雷等音效让你身临其境</td><td><code>音效</code></td></tr><tr><td><a href="http://weavesilk.com/" target="_blank" rel="noopener">Silk</a></td><td>可以用鼠标随便涂画，有同名App</td><td><code>涂画</code></td></tr><tr><td><a href="https://source.unsplash.com/" target="_blank" rel="noopener">Unsplash Source</a></td><td>一个简单的API，用于嵌入来自Unsplash的高分辨率照片。</td><td><code>API</code>、<code>Unsplash</code>、<code>照片</code></td></tr><tr><td><a href="https://www.uplabs.com" target="_blank" rel="noopener">Uplabs</a></td><td>Uplabs是一个创意集中的社区，每天都会提供最好的特效灵感并提供下载</td><td><code>创意</code>、<code>特效</code>、<code>社区</code></td></tr><tr><td><a href="http://www.vo2-group.com/en" target="_blank" rel="noopener">VO2 Group</a></td><td>体会如何通过字体、颜色、排版表现力度和冲击感</td><td><code>字体</code>、<code>颜色</code>、<code>排版</code></td></tr><tr><td><a href="https://wakatime.com/" target="_blank" rel="noopener">WakaTime</a></td><td>跟踪项目花费的时间，需要安装插件</td><td><code>插件</code>、<code>项目</code></td></tr><tr><td><a href="http://www.sanyachloe.com/" target="_blank" rel="noopener">克洛伊摄影</a></td><td>专注于婚纱摄影的网站，网站做的很不错</td><td><code>摄影</code></td></tr><tr><td><a href="http://chuangzaoshi.com/" target="_blank" rel="noopener">创造狮</a></td><td>创造狮，一个创意工作者的导航，专注分享正版优质设计、前端、产品、运营的书签导航</td><td><code>创意</code>、<code>网站导航</code>、<code>分享</code></td></tr></tbody></table><h2 id="创意十足"><a href="#创意十足" class="headerlink" title="创意十足"></a>创意十足</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://1stwebdesigner.com/css-effects/" target="_blank" rel="noopener">150 CSS Effects</a></td><td>150 Amazing Examples of CSS Animation &amp; Effects</td><td><code>特效</code>、<code>CSS</code>、<code>动画</code></td></tr><tr><td><a href="http://2018.makemepulse.com/" target="_blank" rel="noopener">2018 Make Me Pulse</a></td><td>用canvas绘制了2018这四个数字，特效很赞</td><td><code>canvas</code>、<code>特效</code></td></tr><tr><td><a href="http://www.68design.net/cool/" target="_blank" rel="noopener">68Design</a></td><td>专门搜集国外高质量的网站，而且定期更新，非常酷炫</td><td><code>酷炫</code></td></tr><tr><td><a href="http://animista.net" target="_blank" rel="noopener">Animista</a></td><td>在线生成各种CSS动画</td><td><code>CSS动画</code></td></tr><tr><td><a href="http://asciiflow.com/" target="_blank" rel="noopener">ASCIIFlow Infinity</a></td><td>利用ASCII字符进行绘制，可以调整大小，自由绘制，可以绘制出类似于佛祖那样的代码。</td><td><code>ACSII</code>、<code>代码</code></td></tr><tr><td><a href="https://bellwoods.xyz/" target="_blank" rel="noopener">bellwoods</a></td><td>在高高的草地上跟着鸟儿去追逐风和探索五颜六色吧</td><td><code>交互</code></td></tr><tr><td><a href="http://bennettfeely.com/gradients/" target="_blank" rel="noopener">Bennett Feely的图案库</a></td><td>利用混合模式生成的CSS渐变图案</td><td><code>混合模式</code>、<code>CSS渐变</code></td></tr><tr><td><a href="http://simurai.com/archive/buttons/" target="_blank" rel="noopener">BonBon</a></td><td>Simurai以其精湛的手法将border-radius发挥到了极致，其糖果按钮展示了各种奇妙的形状</td><td><code>按钮</code>、<code>糖果</code>、<code>border-radius</code></td></tr><tr><td><a href="http://browserhacks.com/" target="_blank" rel="noopener">Browserhacks</a></td><td>Browserhacks是一个记录特定的CSS和JavaScript的Hack写法的列表。</td><td><code>Hack</code>、<code>CSS</code>、<code>JS</code></td></tr><tr><td><a href="https://codepip.com/" target="_blank" rel="noopener">Codepip</a></td><td>你可以在这里找到一些寓教于乐的游戏，目前有Flexbox和CSS Grid两款</td><td><code>游戏</code>、<code>Flexbox</code>、<code>Grid</code></td></tr><tr><td><a href="https://tympanus.net/codrops/" target="_blank" rel="noopener">Codrops</a></td><td>它有很多可以在线预览且兼具视觉化以及交互性的动效，每个案例后面都附有代码。</td><td><code>动效</code>、<code>资源</code></td></tr><tr><td><a href="http://www.mta.me/" target="_blank" rel="noopener">Conductor</a></td><td>一些美妙的线条，不断前进和交错，同时也会90度转弯，碰到时会展示出弹性，线条和背景的颜色会不断变化，但它们都有自己的生命周期，时间到了就会消失在幕布上，看看它们在画什么。</td><td><code>创意</code></td></tr><tr><td><a href="https://cssanimation.rocks/" target="_blank" rel="noopener">CSS Animation</a></td><td>关于CSS动画的文章，技巧和教程。</td><td><code>CSS动画</code>、<code>教程</code></td></tr><tr><td><a href="https://cssicon.space/#/" target="_blank" rel="noopener">CSS ICON</a></td><td>作者使用CSS绘制了很多小icon，其次页面做的也很精致</td><td><code>Icon</code></td></tr><tr><td><a href="https://css-tricks.com/" target="_blank" rel="noopener">CSS-Tricks</a></td><td>使用CSS时的一些技巧和注意事项</td><td><code>CSS</code>、<code>技巧</code></td></tr><tr><td><a href="http://lea.verou.me/css3patterns/" target="_blank" rel="noopener">CSS3图案库</a></td><td>展示了CSS渐变早在2011年就能够实现的效果</td><td><code>CSS渐变</code></td></tr><tr><td><a href="http://www.uisdc.com/css3-hover-effects-tutorials" target="_blank" rel="noopener">CSS3悬停效果</a></td><td>作者总结了17个有趣实用的CSS 3悬停效果教程，创意十足，非常酷炫！</td><td><code>酷炫</code>、<code>悬停</code></td></tr><tr><td><a href="https://philiprogers.com/svgpatterns/" target="_blank" rel="noopener">CSS图案库的SVG版实现</a></td><td>展示了SVG能够实现的简单CSS图案</td><td><code>SVG</code>、<code>图案</code></td></tr><tr><td><a href="http://www.webhek.com/post/css-shake.html" target="_blank" rel="noopener">css抖动</a></td><td>css抖动插件，通过添加类名就可以给元素添加各式各样的抖动特效</td><td><code>抖动</code></td></tr><tr><td><a href="http://www.csszengarden.com" target="_blank" rel="noopener">CSS禅意花园</a></td><td>从视觉上形象地展示了基于CSS设计的网站所能达到的效果</td><td><code>视觉</code></td></tr><tr><td><a href="http://www.elasticode.com/" target="_blank" rel="noopener">Elasticode</a></td><td>如果设计动效时候没有灵感时可以参照Elasticode上各种丰富的交互动效，包括按钮的点击效果、页面切换/跳转、图文出现/消失、元素变换等效果。</td><td><code>动效</code>、<code>交互</code></td></tr><tr><td><a href="http://fff.cmiscm.com/" target="_blank" rel="noopener">FFF互动</a></td><td>各种H5特效，每种特效都有其独特的设计和功能</td><td><code>特效</code></td></tr><tr><td><a href="http://goinghome.302chanwoo.com/" target="_blank" rel="noopener">Going Home</a></td><td>一个带有简单交互的故事动画，通过鼠标点击使你融入故事中</td><td><code>交互</code>、<code>故事</code>、<code>动画</code></td></tr><tr><td><a href="https://cssgridgarden.com/" target="_blank" rel="noopener">Grid Garden</a></td><td>Grid Garden是Codepip创建的一款寓教于乐的在线网页游戏，游戏共有28关。玩家可以通过过关的方式掌握CSS最新标准CSS Grid。</td><td><code>游戏</code>、<code>Grid</code></td></tr><tr><td><a href="https://habitica.com/static/home" target="_blank" rel="noopener">habitica</a></td><td>将TodoList游戏化，把你的真实生活当成游戏吧</td><td><code>TodoList</code>、<code>游戏</code></td></tr><tr><td><a href="https://heraclosgame.com/" target="_blank" rel="noopener">Heraclos</a></td><td>一个在线的用手柄进行的游戏，画面很好看，你控制一个女生进行探索。</td><td><code>游戏</code>、<code>视觉</code></td></tr><tr><td><a href="http://blog.itmyhome.com/hone_hone_clock/" target="_blank" rel="noopener">Hone Hone Clock</a></td><td>很火的一个人体时钟，可以直接看其源码引用，本质上是用flash实现的</td><td><code>时钟</code>、<code>flash</code></td></tr><tr><td><a href="http://html5.huceo.com/" target="_blank" rel="noopener">html5游戏</a></td><td>总结了很多html5做的小游戏</td><td><code>H5</code>、<code>游戏</code></td></tr><tr><td><a href="http://www.html5tricks.com/demo/jiaoben1892/index.html" target="_blank" rel="noopener">HTML5爱心表白动画</a></td><td>程序员做的纯HTML5爱心表白动画，值得学习！</td><td><code>H5</code>、<code>表白</code>、<code>动画</code></td></tr><tr><td><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git Branching</a></td><td>以动画和闯关的形式来学习Git</td><td><code>游戏</code>、<code>git</code></td></tr><tr><td><a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">mermaid</a></td><td>采用类似Markdown的语法，通过单纯的文本生成图表和流程图</td><td><code>流程图</code>、<code>Markdown</code></td></tr><tr><td><a href="https://getmosh.io/" target="_blank" rel="noopener">MoshImages</a></td><td>给图片添加特效的网站，操作简单，还可以导出为gif，创意非凡！</td><td><code>图片</code>、<code>特效</code>、<code>创意</code></td></tr><tr><td><a href="http://www.nicetool.net/" target="_blank" rel="noopener">Nicetool</a></td><td>好工具网致力于收集和打造各种简单易用的在线工具，目前已有500多个工具。</td><td><code>工具</code></td></tr><tr><td><a href="http://oatthegoat.co.nz/" target="_blank" rel="noopener">Oat the Goat</a></td><td>这是一个以故事形式来展现的网站，动画很有感觉，所有的画面非常的漂亮，就像在看电影一样，同时网站还带有一至交互体验，让用户去选择。</td><td><code>故事</code>、<code>视觉</code>、<code>交互</code></td></tr><tr><td><a href="http://objetorocha.com/" target="_blank" rel="noopener">Objeto Rocha</a></td><td>图片的投影会随着鼠标的位置发生变化，很有趣</td><td><code>交互</code></td></tr><tr><td><a href="http://one-div.com/" target="_blank" rel="noopener">One div</a></td><td>这位站长制作了许多纯css图标，更不可思议的是，所有的图标只用到了一个标签！</td><td><code>CSS图标</code></td></tr><tr><td><a href="https://www.packwire.com/" target="_blank" rel="noopener">packwire</a></td><td>这个网站的特效都很不错。。</td><td><code>特效</code></td></tr><tr><td><a href="http://species-in-pieces.com/" target="_blank" rel="noopener">pieces</a></td><td>这是一个告诫人们物种灭绝的网站，通过碎片和动画的形式，非常生动</td><td><code>动画</code></td></tr><tr><td><a href="http://diana-adrianne.com/purecss-francine/" target="_blank" rel="noopener">Purecss Francine</a></td><td>纯CSS画的一幅油画，非常的逼真，只能用卧槽形容</td><td><code>CSS</code>、<code>油画</code></td></tr><tr><td><a href="https://regexper.com" target="_blank" rel="noopener">Regexper</a></td><td>使用铁路图将正则表达式可视化</td><td><code>正则</code>、<code>可视化</code></td></tr><tr><td><a href="http://www.ro.me/" target="_blank" rel="noopener">ro.me</a></td><td>通过webgl生成了一部电影，耐心的等待会有惊喜的</td><td><code>WebGL</code>、<code>电影</code></td></tr><tr><td><a href="https://sandspiel.club/" target="_blank" rel="noopener">SandsPiel</a></td><td>让不同颜色的沙子落到地上，你可以绘制一幅属于你的作品。</td><td><code>创意</code></td></tr><tr><td><a href="https://musiclab.chromeexperiments.com/Song-Maker/" target="_blank" rel="noopener">Song Maker</a></td><td>SongMaker是Chrome音乐实验室的一项实验成果，它提供了任何人制作和共享歌曲的简单方法。</td><td><code>音乐</code>、<code>共享</code></td></tr><tr><td><a href="http://www.spacegoo.com/" target="_blank" rel="noopener">spacegoo</a></td><td>一个立体的三维空间，它能够旋转和点击，这种交互方式是以canvas元素+位图实现的，看上去不一般哦。</td><td><code>交互</code>、<code>canvas</code></td></tr><tr><td><a href="https://www.uplabs.com" target="_blank" rel="noopener">Uplabs</a></td><td>Uplabs是一个创意集中的社区，每天都会提供最好的特效灵感并提供下载</td><td><code>创意</code>、<code>特效</code>、<code>社区</code></td></tr><tr><td><a href="https://visualgo.net" target="_blank" rel="noopener">VisuAlgo</a></td><td>通过动画的形式将数据结构和算法可视化，很酷</td><td><code>动画</code>、<code>数据结构</code>、<code>算法</code>、<code>可视化</code></td></tr><tr><td><a href="https://www.wolframalpha.com/" target="_blank" rel="noopener">WolframAlpha</a></td><td>将专家级的知识和能力带到所有职业和教育水平的最广泛人群中。</td><td><code>创意</code></td></tr><tr><td><a href="http://mynameismatthieu.com/WOW/" target="_blank" rel="noopener">WOW.js</a></td><td>WOW.js是一个给页面添加滚动动画的JS插件，可以与Animate.css完美结合。</td><td><code>滚动动画</code>、<code>插件</code></td></tr><tr><td><a href="http://nicolasgallagher.com/pure-css-gui-icons/demo/" target="_blank" rel="noopener">伪元素实现CSS icon</a></td><td>伪元素大师Nicolas Gallagher将伪元素发挥到了极致，实现了一些常见icon</td><td><code>icon</code>、<code>伪元素</code></td></tr><tr><td><a href="https://www.zhihu.com/question/25415121" target="_blank" rel="noopener">帅到爆的设计</a></td><td>知乎-有哪些一见到就感觉帅到爆的设计？</td><td><code>知乎</code>、<code>设计</code></td></tr><tr><td><a href="https://sorry.bluerain.io/" target="_blank" rel="noopener">王境泽/偷车贼/为所欲为等字幕梗生成器</a></td><td>字幕梗Gif生成器，目前已开源</td><td><code>字幕梗</code>、<code>gif</code></td></tr></tbody></table><h2 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://www.easyicon.net/" target="_blank" rel="noopener">easyicon</a></td><td>是一个免费搜索图标的搜索引擎站点，国内非常不错的搜索图标的站点之一，收录了超过40万个精美PNG、ICO、YCNS图标，内容非常丰富，提供中文、英文、繁体中文语言界面。</td><td><code>图标</code></td></tr><tr><td><a href="https://www.flaticon.com/" target="_blank" rel="noopener">FLATICON</a></td><td>号称最大的免费图标数据库，有各种格式的icon。</td><td><code>图标</code></td></tr><tr><td><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">font-awesome</a></td><td>很适合前端开发人员的图标库，可以通过font属性控制图标大小、颜色以及旋转角度，还可以任意组合</td><td><code>font</code>、<code>图标</code></td></tr><tr><td><a href="http://www.iconpng.com/" target="_blank" rel="noopener">iconpng</a></td><td>是一个中文的在线图标搜索引擎，不仅可以搜索到大量的 PNG 格式图标，还有图标系列的集合可以下载，另外 IconPng 还支持图标的 tag 和图标分类，可以方便的找到自己想要找的大量类似图标</td><td><code>PNG</code>、<code>图标</code></td></tr><tr><td><a href="http://ionicons.com/" target="_blank" rel="noopener">ionicons</a></td><td>作为有1万star的的开源icon库，多而杂的图标肯定能够满足你，但是不太容易直接搜索查找</td><td><code>icon</code></td></tr><tr><td><a href="https://material.io/tools/icons/" target="_blank" rel="noopener">Material icons</a></td><td>提供各种类型的图标，包括SVG和PNG格式，同时也可以通过CSS引入</td><td><code>图标</code></td></tr><tr><td><a href="https://material.io/icons/" target="_blank" rel="noopener">material.io</a></td><td>Google的图标库，数量实在是多，一定有你想要的</td><td><code>Google</code></td></tr><tr><td><a href="https://ibaotu.com/" target="_blank" rel="noopener">包图网</a></td><td>包图网的内容包括图标图片，图标素材，图标模板，图标设计等</td><td><code>素材</code></td></tr><tr><td><a href="http://logonc.com/" target="_blank" rel="noopener">藏标网</a></td><td>藏标网提供在线logo设计欣赏、标志图片素材、公司商标设计、国外标志设计欣赏、字体设计大全、企业吉祥物设计、校徽设计含义分享的标志网站，为logo设计师和设计爱好者提供一个寻找标识设计寓意的灵感平台，从分享logo设计图片素材过程中进步提高。</td><td><code>设计</code>、<code>logo</code></td></tr><tr><td><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图</a></td><td>阿里妈妈UED开发的图标库</td><td><code>阿里</code>、<code>图标</code></td></tr></tbody></table><h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://mybrandnewlogo.com/logo-maker" target="_blank" rel="noopener">My Brand New Logo</a></td><td>在30秒内创建一个Logo，可用于各种用途</td><td><code>Logo</code></td></tr><tr><td><a href="https://jikipedia.com/" target="_blank" rel="noopener">小鸡词典</a></td><td>查网络流行语，就上小鸡词典。小鸡词典专注于网络流行语的收录和解释，以最快的速度在全网捕捉当下的网络热词。以简单明了，清晰易懂的形式，向用户介绍网络流行语的含义、来历、传播过程和引申义。用户不仅能够通过小鸡词典了解网络用语，还能接触到小众黑话、新梗热梗、弹幕用语、方言俚语等不同的流行文化，以及网友们自主创造的旧词新解等。</td><td><code>流行语</code>、<code>梗</code></td></tr><tr><td><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">猴子都能懂的GIT入门</a></td><td>超级简单的Git入门，有入门篇、高级篇和 Git 索引，内容很全</td><td><code>Git</code>、<code>教程</code></td></tr><tr><td><a href="https://10minutemail.com/10MinuteMail/index.html?dswid=5142" target="_blank" rel="noopener">10分钟邮箱</a></td><td>访问网页即可获得一个临时邮箱，页面广告较多。</td><td><code>临时邮箱</code></td></tr><tr><td><a href="http://www.99pdf.com/" target="_blank" rel="noopener">99PDF</a></td><td>在线批量压缩PDF</td><td><code>压缩PDF</code></td></tr><tr><td><a href="http://www.network-science.de/ascii/" target="_blank" rel="noopener">ASCII Generator</a></td><td>根据你输入的英文单词，生成相应的字符图形</td><td><code>字符图形</code></td></tr><tr><td><a href="http://asciiflow.com/" target="_blank" rel="noopener">ASCIIFlow Infinity</a></td><td>利用ASCII字符进行绘制，可以调整大小，自由绘制，可以绘制出类似于佛祖那样的代码。</td><td><code>ASCII</code>、<code>代码</code></td></tr><tr><td><a href="http://www.atool.org" target="_blank" rel="noopener">ATOOL在线工具</a></td><td>由华中科技大学一位在校女研究生开发的在线工具集合网站，旨在做出最简单方便、最完整干净、最全面完整的工具网站</td><td><code>工具集合</code></td></tr><tr><td><a href="http://autoprefixer.github.io/" target="_blank" rel="noopener">autoprefixer</a></td><td>在线生成css兼容代码，其实就是autoprefixer的在线版。。</td><td><code>兼容</code>、<code>autoprefixer</code></td></tr><tr><td><a href="http://mu.aynu.top/" target="_blank" rel="noopener">AYNU音乐实验室</a></td><td>免费的在线音乐播放器。收录全网最新无损音乐，提供无损MP3音乐免费下载，免开VIP尽享全网音乐免费播放下载！</td><td><code>音乐</code></td></tr><tr><td><a href="http://www.zamzar.com/convert/azw3-to-epub/" target="_blank" rel="noopener">AZW3在线转换</a></td><td>将azw3文件转换成其他格式文件</td><td><code>azw3</code>、<code>转换</code></td></tr><tr><td><a href="https://demo.marpi.pl/biomes/" target="_blank" rel="noopener">BIOMES</a></td><td>利用WebGL可以随机生成抽象的体素地形</td><td><code>WebGL</code>、<code>地形</code></td></tr><tr><td><a href="http://brandmark.io/" target="_blank" rel="noopener">Brandmark</a></td><td>免费生成logo，可通过关键词限定范围</td><td><code>logo</code></td></tr><tr><td><a href="https://cacoo.com/" target="_blank" rel="noopener">Cacoo</a></td><td>在线画图软件，可以创建和共享流程图、线框图、UML模型、网络图等。</td><td><code>流程图</code></td></tr><tr><td><a href="https://caniuse.com/" target="_blank" rel="noopener">Can I use</a></td><td>提供现代Web技术的浏览器支持情况查询</td><td><code>Web</code>、<code>兼容</code></td></tr><tr><td><a href="https://www.canva.com/" target="_blank" rel="noopener">Canva</a></td><td>利用 Canva 的拖放功能和布局，可以设计、分享和打印名片、徽标、演示文稿及更多内容。</td><td><code>设计</code>、<code>分享</code></td></tr><tr><td><a href="https://carbon.now.sh" target="_blank" rel="noopener">Carbon</a></td><td>生成类似 mac 风格的代码图片，用于分享</td><td><code>Mac</code>、<code>代码</code></td></tr><tr><td><a href="https://dev.w3.org/html5/html-author/charref" target="_blank" rel="noopener">Character Entity Reference Chart</a></td><td>各种符号的转义字符表</td><td><code>转义</code></td></tr><tr><td><a href="https://choosealicense.com/" target="_blank" rel="noopener">Choose A License</a></td><td>根据几个问题为你的开源协议的选择提供建议</td><td><code>协议</code></td></tr><tr><td><a href="https://www.clipconverter.cc/" target="_blank" rel="noopener">ClipConverter.cc</a></td><td>单个Youtube视频下载，支持多种格式、多种清晰度。</td><td><code>Youtube</code></td></tr><tr><td><a href="https://unbug.github.io/codelf/" target="_blank" rel="noopener">CODELF</a></td><td>项目命名神器，可以通过关键词搜索github、gitlab等网站上的项目名称</td><td><code>命名</code></td></tr><tr><td><a href="https://convertio.co/zh/" target="_blank" rel="noopener">Convertio</a></td><td>Convertio – 在线转换文件的简单工具。支持超过284种不同的文档、图像、电子表格、电子书、文档、演示文稿、音频和视频格式。</td><td><code>转换文件</code></td></tr><tr><td><a href="https://spritegen.website-performance.org/" target="_blank" rel="noopener">CSS Sprite Generator</a></td><td>在线生成雪碧图和对应CSS的工具</td><td><code>雪碧图</code>、<code>Sprite</code></td></tr><tr><td><a href="http://apps.eky.hk/css-triangle-generator/zh-hant" target="_blank" rel="noopener">CSS Triangle Generator</a></td><td>CSS三角形产生器</td><td><code>三角形</code></td></tr><tr><td><a href="https://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a></td><td>列举了在不同浏览器引擎中，各种CSS属性对于重排和重绘的影响</td><td><code>重排</code>、<code>重绘</code></td></tr><tr><td><a href="https://frontend30.com/css-selectors-cheatsheet/" target="_blank" rel="noopener">css-selectors-cheatsheet</a></td><td>共十几道题，考察你对CSS选择器的掌握程度</td><td><code>CSS选择器</code></td></tr><tr><td><a href="http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67" target="_blank" rel="noopener">CSS动画曲线绘制</a></td><td>通过可视化的方式帮你生成CSS中的cubic-bezier函数参数</td><td><code>CSS动画</code>、<code>贝塞尔曲线</code>、<code>cubic-bezier</code></td></tr><tr><td><a href="https://www.degraeve.com/img2txt.php" target="_blank" rel="noopener">Degraeve</a></td><td>根据图片生成相应的字符图形</td><td><code>字符图形</code></td></tr><tr><td><a href="https://devhints.io/" target="_blank" rel="noopener">Devhints</a></td><td>常用速查表，快速查询各类框架和库的常用方法，很实用</td><td><code>速查</code></td></tr><tr><td><a href="https://webdemo.myscript.com/views/diagram/index.html#/edit" target="_blank" rel="noopener">Diagram</a></td><td>手绘图，然后保存成 PPT 的在线服务。</td><td><code>手绘</code>、<code>PPT</code></td></tr><tr><td><a href="https://www.draw.io/" target="_blank" rel="noopener">Draw.io</a></td><td>在线云绘图制作平台，可以快速、自由的创建简单的图表，流程图、网页模版构架图、框架图等等</td><td><code>流程图</code></td></tr><tr><td><a href="http://editor.pho.to/zh/edit/" target="_blank" rel="noopener">Editor.Pho.to</a></td><td>Editor.Pho.to 是一款拥有照片即时编辑工具的在线照片编辑器。添加文本和标签，应用滤镜和特效。裁剪、旋转、调整大小和调整图片。</td><td><code>照片编辑</code>、<code>滤镜</code></td></tr><tr><td><a href="http://esprima.org/demo/parse.html" target="_blank" rel="noopener">esprima Parser</a></td><td>输入JS语句可以立马生成我们所需的抽象语法树（AST）</td><td><code>抽象语法树</code>、<code>AST</code></td></tr><tr><td><a href="http://www.ezyzip.com/cn.html" target="_blank" rel="noopener">ezyZip</a></td><td>在线压缩文件。无需安装或上传/下载。在浏览器中运行</td><td><code>压缩文件</code></td></tr><tr><td><a href="http://www.favicon.cc/" target="_blank" rel="noopener">favicon.cc</a></td><td>这是一个可以将用户的图片转换为ico图片的网站。将图片制作成ico图标并导出。</td><td><code>ico</code></td></tr><tr><td><a href="https://www.figma.com" target="_blank" rel="noopener">FIGMA</a></td><td>一款界面设计协作神器，图形设计功能强大、支持多人在线编辑与多人实时评论，用于开会或者研讨非常方便，也可以随意保存历史版本，简直堪称设计界的Google Docs。支持导出jpg、png、svg等多种格式。</td><td><code>设计</code>、<code>协同</code></td></tr><tr><td><a href="https://freessl.cn/" target="_blank" rel="noopener">FreeSSL.org</a></td><td>一个申请免费HTTPS证书的网站</td><td><code>免费证书</code>、<code>HTTPS</code></td></tr><tr><td><a href="https://gitpunch.com/" target="_blank" rel="noopener">GitPunch</a></td><td>会定制你想追踪的npm包库，还可以定时发邮件通知</td><td><code>NPM</code>、<code>邮件</code></td></tr><tr><td><a href="http://hotu.co/hua/" target="_blank" rel="noopener">html5在线画板</a></td><td>一个通过html5就可以进行绘画的在线画板</td><td><code>HTML5</code>、<code>在线画板</code></td></tr><tr><td><a href="https://linkfox.io/" target="_blank" rel="noopener">LinkFox</a></td><td>免费的短链服务，可以将长链接转换为短链</td><td><code>短链</code></td></tr><tr><td><a href="https://www.studyjava.cn/douyin" target="_blank" rel="noopener">https://www.studyjava.cn/douyin</a></td><td>支持抖音、快手、微视等视频无水印下载</td><td><code>无水印</code></td></tr><tr><td><a href="https://icomoon.io/" target="_blank" rel="noopener">IcoMoon</a></td><td>提供了一系列矢量图标，还提供了一个用于制作iconfont的工具，直接导入SVG即可</td><td><code>图标</code></td></tr><tr><td><a href="http://www.ih5.cn" target="_blank" rel="noopener">iH5</a></td><td>移动页面制作工作，制作教程非常方便，功能强大到让你不可思议——物理碰撞、时间轴动画、滑动时间轴、地理定位、数据库、720°全景…统统都有，而且使用上永久免费。</td><td><code>HTML5</code></td></tr><tr><td><a href="https://imageoptim.com/" target="_blank" rel="noopener">ImageOptim</a></td><td>一个免费的应用程序，使图像加载速度更快，占用更少的磁盘空间，而不牺牲质量。提供Mac App以及Api，同时还是开源的。</td><td><code>图片</code>、<code>Mac</code></td></tr><tr><td><a href="https://lightpdf.com/zh/" target="_blank" rel="noopener">LightPDF</a></td><td>LightPDF提供在线免费转换、分割、合并、编辑PDF文件服务及PDF相关解决方案。</td><td><code>PDF</code></td></tr><tr><td><a href="https://www.logaster.com/" target="_blank" rel="noopener">logaster</a></td><td>在线生成logo，你只需要提供网站名称和网站类型</td><td><code>logo</code></td></tr><tr><td><a href="https://logomakr.com/" target="_blank" rel="noopener">LogoMakr</a></td><td>在线设计logo，可以插入不同形状的图形和文字</td><td><code>logo</code></td></tr><tr><td><a href="https://coldday.github.io/mp4ToGif/" target="_blank" rel="noopener">MP4ToGif</a></td><td>视频转Gif，可以在线添加文字和编辑</td><td><code>视频</code>、<code>Gif</code></td></tr><tr><td><a href="https://myssl.com/" target="_blank" rel="noopener">MySSL</a></td><td>检测网站的SSL证书是否安全，是否存在漏洞，是否达到SSL行业标准，符合苹果ATS规范，能否通过微信小程序安全要求。同时提供证书格式转换，CSR，证书链，SSL配置生成等工具。</td><td><code>SSL</code></td></tr><tr><td><a href="https://namebeta.com/" target="_blank" rel="noopener">NameBeta</a></td><td>共收录 1578 种顶级域名，汇集互联网上 27 家知名域名注册商，每日更新价格信息</td><td><code>域名</code></td></tr><tr><td><a href="https://nginxconfig.io/" target="_blank" rel="noopener">nginxconfig.io</a></td><td>在线生成nginx配置文件，可以选择语言和功能，而且该站点是开源的。</td><td><code>nginx</code></td></tr><tr><td><a href="http://www.nicetool.net/" target="_blank" rel="noopener">Nicetool</a></td><td>好工具网致力于收集和打造各种简单易用的在线工具，目前已有500多个工具。</td><td><code>工具集合</code></td></tr><tr><td><a href="http://pressbin.com/tools/excel_to_html_table/index.html" target="_blank" rel="noopener">No-Cruft Excel to HTML Table Converter</a></td><td>可以从Excel电子表格（或HTML表格）粘贴数据，并将其转换为没有任何格式的新HTML表。</td><td><code>HTML</code>、<code>表格</code></td></tr><tr><td><a href="https://cn.office-converter.com/" target="_blank" rel="noopener">Office Converter</a></td><td>免费在线文件转换器( office-converter.com)，是最佳在线文件转换器。你能免费在线转换视频,在线转换音频,在线转换图形,在线转换文档和压缩。在线转换文件，包括PDF，Word，Excel，PowerPoint，OpenOffice，Flash，HTML，MP4，MP3，AVI，MKV，FLV，MOV，SWF，iPhone，Microsoft Xbox，WMV，WMA，OGG，JPG，BMP，TIFF，PNG，GIF，EPUB，ZIP，RAR等多种格式</td><td><code>文件转换</code></td></tr><tr><td><a href="https://www.opengps.cn/Data/IP/LocHighAcc.aspx" target="_blank" rel="noopener">openGPS.cn</a></td><td>根据IP定位地理位置</td><td><code>IP</code>、<code>地理位置</code></td></tr><tr><td><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a></td><td>测试网站速度，优化性能，同时还会给出很具体的建议，很强大实用</td><td><code>性能</code></td></tr><tr><td><a href="http://paletton.com/" target="_blank" rel="noopener">Paletton</a></td><td>一个用于创建颜色组合的设计工具，使用色轮来创造伟大的调色板</td><td><code>设计</code>、<code>颜色组合</code></td></tr><tr><td><a href="https://www.ilovepdf.com/zh_cn" target="_blank" rel="noopener">PDF在线管理工具</a></td><td>完全免费的PDF文件在线管理工具，其功能包括：合并PDF文件、拆分PDF文件、压缩PDF文件、Office文件转换为PDF文件、PDF文件转换为JPG图片、JPG图片转换为PDF文件。无需安装。</td><td><code>PDF</code></td></tr><tr><td><a href="https://photomosh.com/" target="_blank" rel="noopener">photomosh</a></td><td>可以制作电视电脑屏幕坏了 / 你手机屏幕碎了的效果，它提供了27种故障特效，支持JPG / GIF / MP4三种格式的导出。</td><td><code>故障特效</code></td></tr><tr><td><a href="https://www.picdiet.com/" target="_blank" rel="noopener">picdiet</a></td><td>Picdiet是一款用JavaScript编写而成的图片压缩神器，所有压缩过程都在浏览器中进行，尺寸、数量、大小均无限制，完全免费，缺点是只能压缩jpg格式的图片</td><td><code>图片压缩</code>、<code>JPG</code></td></tr><tr><td><a href="https://placeit.net/" target="_blank" rel="noopener">Placeit</a></td><td>提供了各种设计P图模板，每个演示用的模板上都附有标准尺寸，你也可以先在PS等软件处理好尺寸再上传，立即生成各种手拿iPhone、iMac，开着Macbook的图片，来演示你设计的静态图效果。</td><td><code>设计</code>、<code>图片</code></td></tr><tr><td><a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn</a></td><td>免费在线作图，同时支持实时协作</td><td><code>作图</code>、<code>协作</code></td></tr><tr><td><a href="http://pxtoem.com/" target="_blank" rel="noopener">PXtoEM</a></td><td>PX和EM单位转换器</td><td><code>单位转换</code></td></tr><tr><td><a href="https://regex101.com/" target="_blank" rel="noopener">Regex101</a></td><td>在线测试正则表达式</td><td><code>正则</code></td></tr><tr><td><a href="https://www.sassmeister.com/" target="_blank" rel="noopener">SassMeister</a></td><td>Sass在线编译，就是网站做的有点少女。。</td><td><code>Sass</code>、<code>编译</code></td></tr><tr><td><a href="http://screensiz.es/" target="_blank" rel="noopener">Screen Sizes</a></td><td>展示了各种机型的尺寸、像素密度和像素比</td><td><code>机型</code>、<code>像素</code></td></tr><tr><td><a href="https://shields.io/" target="_blank" rel="noopener">ShieldsIO</a></td><td>提供了很多用于Github、Wordpress的徽章，拥有多种定制化功能</td><td><code>徽章</code></td></tr><tr><td><a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a></td><td>支持多张照片上传，单文件限制 5M 以内。支持 UBB 代码，上传后点 BBCode 即可。</td><td><code>图片上传</code></td></tr><tr><td><a href="https://smallpdf.com/" target="_blank" rel="noopener">Smallpdf</a></td><td>非常厉害的一个网站，PDF压缩，PDF转PPT，Word，Excel等等都可以直接通过这个网站实现</td><td><code>PDF</code></td></tr><tr><td><a href="https://squoosh.app/" target="_blank" rel="noopener">Squoosh</a></td><td>GoogleCreativeLab出品的在线压缩图片工具</td><td><code>Google</code>、<code>压缩图片</code></td></tr><tr><td><a href="https://www.ssllabs.com/ssltest/analyze.html" target="_blank" rel="noopener">SSL Labs</a></td><td>对SSL Web服务器进行深入分析，不过耗时较长</td><td><code>Web</code>、<code>服务器分析</code></td></tr><tr><td><a href="http://www.ssleye.com/" target="_blank" rel="noopener">SSL在线工具</a></td><td>支持15种对称加密算法在线校验、公私钥对的生成、PKCS1、PKCS8相互转换、CSR生成&amp;查看、证书查看等等功能</td><td><code>SSL</code></td></tr><tr><td><a href="http://www.tablesgenerator.com/" target="_blank" rel="noopener">TablesGenerator</a></td><td>在线可视化生成LateX、Markdown、HTML表格</td><td><code>表格</code></td></tr><tr><td><a href="http://thumborize.me/" target="_blank" rel="noopener">thumborize.me</a></td><td>Thumbor是一个智能图片处理服务，可以提供图片裁切、缩放、旋转等服务，wiki地址：<a href="https://thumbor.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://thumbor.readthedocs.io/en/latest/index.html</a></td><td><code>图片处理</code></td></tr><tr><td><a href="https://www.tineye.com/" target="_blank" rel="noopener">Tineye</a></td><td>Search by image and find where that image appears online</td><td><code>图片来源</code></td></tr><tr><td><a href="https://tinypng.com/" target="_blank" rel="noopener">tinyPNG</a></td><td>在线压缩jpg或png格式的图片，最大5MB，最多20张</td><td><code>图片压缩</code></td></tr><tr><td><a href="https://www.toolfk.com/" target="_blank" rel="noopener">Toolfk在线工具箱</a></td><td>一款程序员工具箱，包含几十个实用的工具。</td><td><code>工具集合</code></td></tr><tr><td><a href="https://torrentz2.eu/" target="_blank" rel="noopener">Torrentz2</a></td><td>种子搜索器</td><td><code>种子搜索</code></td></tr><tr><td><a href="https://transfonter.org/" target="_blank" rel="noopener">transfonter</a></td><td>该工具将任何TTF、OTF、WOFF、WOFF2或SVG字体转换成CSS字体格式，并有CSS和SVG格式类型文件。</td><td><code>字体转换</code></td></tr><tr><td><a href="https://uigradients.com/" target="_blank" rel="noopener">uiGradients</a></td><td>汇集了一些好看的渐变，可以直接下载图片和CSS，同时还支持旋转、导入等功能</td><td><code>渐变</code></td></tr><tr><td><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">Ultimate CSS Gradient Generator</a></td><td>一个强大的PS图象处理软件类CSS渐变编辑器</td><td><code>图像处理</code>、<code>渐变</code></td></tr><tr><td><a href="https://source.unsplash.com/" target="_blank" rel="noopener">Unsplash Source</a></td><td>一个简单的API，用于嵌入来自Unsplash的高分辨率照片。</td><td><code>照片</code>、<code>Unsplash</code></td></tr><tr><td><a href="https://www.webpagetest.org/" target="_blank" rel="noopener">WebPagetest</a></td><td>网站性能在线检测工具，同时会给出详细的优化建议。</td><td><code>性能检测</code></td></tr><tr><td><a href="https://whimsical.co/" target="_blank" rel="noopener">Whimsical</a></td><td>可视化协作！用流程图制作流程图，用线框设计用户界面，用便签运行项目。</td><td><code>流程图</code>、<code>协作</code>、<code>可视化</code></td></tr><tr><td><a href="https://translate.yandex.com/ocr" target="_blank" rel="noopener">Yandex Image Translate</a></td><td>俄罗斯搜索引擎 Yandex 的图片 OCR 服务，可以将图片里面的文字翻译成另一种文字。</td><td><code>OCR</code>、<code>文字识别</code></td></tr><tr><td><a href="https://www.yworks.com/products/yed" target="_blank" rel="noopener">yEd</a></td><td>在线绘制流程图</td><td><code>流程图</code></td></tr><tr><td><a href="https://yellowlab.tools/" target="_blank" rel="noopener">Yellow Lab Tools</a></td><td>Yellow Lab Tools 偏向于一个发现不良实践的工具，会综合页面权重、请求数、DOM、错误的 Javascript、错误的 CSS 等方面取得一个评分。并显示出在加载页面的过程中，DOM 是如何相互影响。</td><td><code>Web</code>、<code>性能分析</code></td></tr><tr><td><a href="https://youtubemultidownloader.net/playlists.html" target="_blank" rel="noopener">Youtube Multi Downloader</a></td><td>免费的Youtube视频下载器</td><td><code>Youtube</code></td></tr><tr><td><a href="https://wangyasai.github.io/Stars-Emmision/" target="_blank" rel="noopener">万箭齐发</a></td><td>可以一键生成各种射线发射的效果，可以调整各种参数，包括方向、速度、射线大小等等，支持导出为PNG。</td><td><code>发射效果</code></td></tr><tr><td><a href="https://kn007.net/code-highlight.html" target="_blank" rel="noopener">代码高亮化</a></td><td>只支持html、css、js、xml、php这几种语言的高亮化</td><td><code>高亮</code></td></tr><tr><td><a href="http://bddn.cn/zb.htm" target="_blank" rel="noopener">全球电视直播</a></td><td>一个功能非常强大的电视直播网站，真的是十分良心；它支持几百个电视直播的网站，几乎拥有一般电视直播网站拥有的所有频道，它还支持港澳台卫视，国外电视等等。</td><td><code>电视直播</code></td></tr><tr><td><a href="https://docschina.org/" target="_blank" rel="noopener">印记中文</a></td><td>深入挖掘国外前端新领域，为中国 Web 前端开发人员提供优质文档！</td><td><code>文档</code></td></tr><tr><td><a href="https://www.yasuotu.com/" target="_blank" rel="noopener">压缩图</a></td><td>这个网站功能比较多，支持图片压缩、在线图片加水印、图片旋转、制作长图拼接、图片改颜色、图片添加文字、图片去底色、证件照换底色、转换格式、图片加边框、制作一寸、两寸证件照等</td><td><code>图片处理</code></td></tr><tr><td><a href="http://www.tuhaokuai.com/" target="_blank" rel="noopener">图好快</a></td><td>在线压缩图片，并且支持添加水印和图片格式转换</td><td><code>图片压缩</code>、<code>格式转换</code></td></tr><tr><td><a href="https://pissang.github.io/voxelize-image/" target="_blank" rel="noopener">图片体素化生成器</a></td><td>你只需要拖拽一张图片，它就会自动把图片转换成立体的体素效果，还提供超多参数配置。</td><td><code>体素效果</code></td></tr><tr><td><a href="http://tool.oschina.net/less" target="_blank" rel="noopener">在线Less编译</a></td><td>在线编译less</td><td><code>编译</code>、<code>Less</code></td></tr><tr><td><a href="http://www.jq22.com/textDifference" target="_blank" rel="noopener">在线文本比较</a></td><td>可以在线比较文本以及代码</td><td><code>文本比较</code></td></tr><tr><td><a href="http://regexr.com/" target="_blank" rel="noopener">在线正则匹配验证</a></td><td>顾名思义，可以在线进行正则匹配的验证，支持手动输入正则匹配表达式以及需要验证的文本</td><td><code>正则验证</code></td></tr><tr><td><a href="https://ppt.baomitu.com/" target="_blank" rel="noopener">声享</a></td><td>声享 – 在线制作PPT平台, 让您可以随时随地制作、分享和录制PPT</td><td><code>制作PPT</code></td></tr><tr><td><a href="http://www.tianox.com/" target="_blank" rel="noopener">天牛表白网</a></td><td>HTML5表白网页在线生成</td><td><code>表白</code></td></tr><tr><td><a href="http://www.hunlipic.com/love/" target="_blank" rel="noopener">婚礼Pic</a></td><td>最浪漫的表白网页在线生成网站</td><td><code>表白</code></td></tr><tr><td><a href="http://tool.oschina.net/apidocs" target="_blank" rel="noopener">常用API文档索引</a></td><td>有好多API文档的索引，包括apache、android、bootstrap等等</td><td><code>API文档</code></td></tr><tr><td><a href="https://mubu.com/" target="_blank" rel="noopener">幕布</a></td><td>幕布是一款结合了大纲笔记和思维导图的头脑管理工具，帮你用更高效的方式和更清晰的结构来记录笔记、管理任务、制定计划甚至是组织头脑风暴。完整覆盖电脑端和移动端</td><td><code>笔记</code>、<code>头脑管理</code></td></tr><tr><td><a href="http://www.wwei.cn/" target="_blank" rel="noopener">微微二维码</a></td><td>微微二维码和小程序码在线生成器，可定制颜色、logo、背景图、前景图还有多种模板选择，录音语音、图文排版、趣味卡通、微博、微信、挥春、等彩色二维码制作，制作创意二维码无需学PS技术，轻松在线生成，十分适用于店铺商家使用</td><td><code>二维码</code>、<code>小程序码</code></td></tr><tr><td><a href="http://so.jutuit.com/zd/wenku/0/" target="_blank" rel="noopener">思维趣文库</a></td><td>免费下载百度文库文档，只不过暂时只支持doc格式的</td><td><code>百度文库</code></td></tr><tr><td><a href="https://certmall.trustauth.cn/Free" target="_blank" rel="noopener">数安时代</a></td><td>数安时代免费SSL证书支持单域名，适用于谷歌、火狐、IE、360等多种浏览器。</td><td><code>SSL证书</code></td></tr><tr><td><a href="https://www.doutula.com/" target="_blank" rel="noopener">斗图啦</a></td><td>斗图啦，收集了成千上万的撕逼斗图表情包，在这里你可以快速找到想要的表情，通过在线表情制作可以快速生成自定义表情。</td><td><code>表情</code></td></tr><tr><td><a href="https://edit.newrank.cn/" target="_blank" rel="noopener">新榜编辑器</a></td><td>新榜编辑器，丰富的样式和模板、海量的在线图片搜索，一键同步多平台，还有大量爆文供你参考。</td><td><code>编辑器</code></td></tr><tr><td><a href="http://dwz.wailian.work/" target="_blank" rel="noopener">新浪短网址</a></td><td>新浪短网址服务(Sina.lt)是互联网上最稳定、最安全、最快速的短网址服务，帮您把冗长的URL地址缩短成8个字符以内的短网址。</td><td><code>短链</code></td></tr><tr><td><a href="https://zhitu.isux.us/" target="_blank" rel="noopener">智图</a></td><td>腾讯ISUX前端团队开发的图片压缩工具。他与周边的tinypng压缩神器相比较，压缩效果和效率会相对优化。他可以转换为webp格式的图片（相比PNG和JPEG在不降低图片质量的同时，减少约三分之一的体积），可以控制图片输出质量，而且可以拖动设置条对比压缩前后的效果。</td><td><code>图片压缩</code></td></tr><tr><td><a href="http://www.biaonimeia.com" target="_blank" rel="noopener">标你妹啊</a></td><td>UI自动标注工具，一键生成iOS、android、网页标注神器！提升设计师效率！</td><td><code>自动标注</code></td></tr><tr><td><a href="http://www.qiuziti.com/" target="_blank" rel="noopener">求字体</a></td><td>求字体网免费提供上传图片找字体、字体实时预览及字体下载服务，本网站可识别中文、英文、日韩、书法等多种类字体。只要上传图片或输入字体名称，就可以帮您找字体。</td><td><code>找字体</code></td></tr><tr><td><a href="https://codepen.io/pissang/full/geajpX" target="_blank" rel="noopener">渐变层生成器</a></td><td>直接用鼠标拖拽就可以调整渐变层的各种参数，然后可以导出为svg格式。</td><td><code>渐变</code></td></tr><tr><td><a href="http://naotu.baidu.com/" target="_blank" rel="noopener">百度脑图</a></td><td>类似ProcessOn，但是感觉功能会更多，有序号、进度指示灯功能</td><td><code>流程图</code></td></tr><tr><td><a href="https://www.gaoding.com/koutu" target="_blank" rel="noopener">稿定抠图</a></td><td>稿定设计是一款专为淘宝店主、新媒体运营人员和修图爱好者打造的免费在线抠图工具，无需进行复杂的操作，通过简单拖拽，就能完成产品抠图、淘宝抠图、证件照抠图换背景、抠商品图</td><td><code>抠图</code></td></tr><tr><td><a href="https://easings.net/" target="_blank" rel="noopener">缓动函数速查表</a></td><td>形象地介绍了各种缓动函数，而且开源</td><td><code>缓动函数</code></td></tr><tr><td><a href="http://f2er.meitu.com/animastore/" target="_blank" rel="noopener">美图前端动画库</a></td><td>美图的前端团队制作的动画库，收集了一些简单实用的动画，可以直接复制代码</td><td><code>动画</code></td></tr><tr><td><a href="http://cli.im/" target="_blank" rel="noopener">草料二维码</a></td><td>生成二维码，可以是文本、网址、名片、小程序等等</td><td><code>二维码</code></td></tr><tr><td><a href="https://www.zhuangbi.info/" target="_blank" rel="noopener">装逼大全</a></td><td>快速搜索制作各种装逼表情。让开我要开始装逼了。</td><td><code>表情</code></td></tr><tr><td><a href="http://deepba.com/" target="_blank" rel="noopener">装逼神器</a></td><td>在线免费制作各种美女举牌照,id照,搞笑网络证件,搞笑表情在线制作,支付宝转账生成,装b神器,装逼神器,随风出品</td><td><code>图片</code>、<code>表情</code></td></tr><tr><td><a href="https://shenzjd.com/shenzjd/music/" target="_blank" rel="noopener">音乐搜索器</a></td><td>多站合一音乐搜索解决方案，可搜索试听网易云音乐、QQ音乐、酷狗音乐、酷我音乐、虾米音乐、百度音乐、一听音乐、咪咕音乐、荔枝FM、蜻蜓FM、喜马拉雅FM、全民K歌、5sing原创翻唱音乐。</td><td><code>音乐搜索</code></td></tr><tr><td><a href="https://music.liuzhijin.cn/" target="_blank" rel="noopener">音乐直链搜索</a></td><td>刘志进特制多站合一音乐搜索解决方案，可搜索试听网易云音乐、QQ音乐、酷狗音乐、酷我音乐、虾米音乐、百度音乐、一听音乐、咪咕音乐、荔枝FM、蜻蜓FM、喜马拉雅FM、全民K歌、5sing原创翻唱音乐。</td><td><code>音乐搜索</code></td></tr><tr><td><a href="http://color3d.herokuapp.com/" target="_blank" rel="noopener">颜色分析工具</a></td><td>上传图片后可以查看像素在LAB、RGB、HSL、HSV中的分布</td><td><code>颜色分析</code></td></tr><tr><td><a href="http://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">颜色码转换</a></td><td>RGB颜色值与十六进制颜色码转换工具</td><td><code>颜色转换</code></td></tr></tbody></table><h2 id="在线简历"><a href="#在线简历" class="headerlink" title="在线简历"></a>在线简历</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://enhancv.com/" target="_blank" rel="noopener">Enhancv</a></td><td>在线生成简历</td><td><code>简历生成</code></td></tr><tr><td><a href="http://jerryonlyzrj.com/resume/" target="_blank" rel="noopener">jerryonlyzrj的简历</a></td><td></td><td><code>简历</code></td></tr><tr><td><a href="http://lucybain.com/" target="_blank" rel="noopener">Lucy Bain</a></td><td>一个外国人制作的简历，网站风格不入我法眼</td><td><code>简历</code></td></tr><tr><td><a href="http://www.webhek.com/post/interactive-resume.html" target="_blank" rel="noopener">Robby Leonardi</a></td><td>超级酷炫的HTML5互动式程序员求职简历</td><td><code>求职</code>、<code>酷炫</code>、<code>互动</code></td></tr><tr><td><a href="http://hotu.co/cv/" target="_blank" rel="noopener">个人作品展示</a></td><td>这是一个很炫酷的展示个人作品的网站</td><td><code>炫酷</code>、<code>作品展示</code></td></tr><tr><td><a href="http://resume.jasinyip.com/" target="_blank" rel="noopener">叶俊星的简介</a></td><td>很简单的一个简历，但是内容已经足够了</td><td><code>简单</code></td></tr><tr><td><a href="http://strml.net/" target="_blank" rel="noopener">大牛的自我介绍</a></td><td>初看这个网站不会很吸引人，但它却是一个创意与技术的完美结合作品，一位前端程序员用很有趣的方式介绍了自己，同时也展现他娴熟的技术，不得不赞一下！</td><td><code>创意</code>、<code>打字</code></td></tr><tr><td><a href="http://szhangpitt.github.io/" target="_blank" rel="noopener">张邵鹏</a></td><td>相比其简历，我更喜欢他的个人主页</td><td><code>主页</code></td></tr><tr><td><a href="http://zhangwenli.com/cv/cn.html" target="_blank" rel="noopener">张雯莉的简历</a></td><td>可以切换中英文，提供下载功能，就是网站太慢了</td><td><code>下载</code></td></tr><tr><td><a href="http://cv.heeroluo.net/" target="_blank" rel="noopener">罗礼权的个人简历</a></td><td>简单却不平凡，突出了项目经历，值得推荐</td><td><code>简单</code></td></tr><tr><td><a href="https://jirengu-inc.github.io/animating-resume/public/" target="_blank" rel="noopener">一个会动的简历</a></td><td>一个很独特的简历，不过总感觉可远观而不可亵玩</td><td><code>独特</code></td></tr></tbody></table><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://commondatastorage.googleapis.com/chromium-browser-continuous/index.html" target="_blank" rel="noopener">chrome浏览器不同版本</a></td><td>在这里可以找到各种系统的各版本chrome，chrome 1都有。。</td><td><code>chrome</code></td></tr><tr><td><a href="http://www.html5tricks.com/" target="_blank" rel="noopener">htmlt5tricks</a></td><td>可以在这个网站上找到很多关于HTML5的特效和教程</td><td><code>HTML5</code>、<code>特效</code>、<code>教程</code></td></tr><tr><td><a href="http://patternlab.io/" target="_blank" rel="noopener">Pattern Lab</a></td><td>Pattern Lab帮助您和您的团队使用原子设计原则构建周到的、模式驱动的用户界面。</td><td><code>原子设计</code>、<code>模式驱动</code></td></tr><tr><td><a href="http://www.php100.com/" target="_blank" rel="noopener">php100</a></td><td>php中文网-互联网开发者平台</td><td><code>PHP</code></td></tr><tr><td><a href="http://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a></td><td>是一个与程序相关的IT技术问答网站。用户可以在网站免费提交问题，浏览问题，索引相关内容</td><td><code>技术问答</code></td></tr><tr><td><a href="https://www.trustasia.com/" target="_blank" rel="noopener">TrustAsia</a></td><td>亚洲诚信是赛门铁克亚太区官方唯一安全技术专家战略合作伙伴,500强企业首选.提供全球可信的SSL证书、HTTPS证书、EV SSL证书、代码签名证书、SSL数字证书等,SSL证书申请及SSL证书购买一站式服务</td><td><code>HTTPS</code>、<code>证书</code></td></tr><tr><td><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">W3C官网</a></td><td>w3c的官网，内容比较全，有各种语言的入门教程</td><td><code>入门教程</code></td></tr><tr><td><a href="http://yanhaijing.com/es5/#about" target="_blank" rel="noopener">w3c规范镜像版</a></td><td>w3c规范的镜像版，中文未校订，但是优化了阅读体验，可以很方便的查找规范</td><td><code>规范</code></td></tr><tr><td><a href="http://styleguides.io/" target="_blank" rel="noopener">Website Style Guide Resources</a></td><td>创建前端样式指南和模式库的协作资源集合</td><td><code>资源集合</code></td></tr><tr><td><a href="http://www.xintheme.com/" target="_blank" rel="noopener">xintheme</a></td><td>提供了多种wordpress主题</td><td><code>wordpress</code>、<code>主题</code></td></tr><tr><td><a href="https://www.sxl.cn/" target="_blank" rel="noopener">上线了</a></td><td>十分钟创建网站和小程序，无需专业技术知识与设计经验</td><td><code>网站</code>、<code>小程序</code></td></tr><tr><td><a href="http://www.themepark.com.cn/" target="_blank" rel="noopener">主题公园</a></td><td>wordpress的各种主题，其中有免费的，也有付费的，可以在上面尝试几个，可能会有复合自己审美口味的</td><td><code>wordpress</code>、<code>主题</code></td></tr><tr><td><a href="https://www.quanzhanketang.com/" target="_blank" rel="noopener">全栈课堂</a></td><td>一个在线学习前端的网站，知识比较基础，适合新手</td><td><code>前端学习</code></td></tr><tr><td><a href="http://code.ciaoca.com" target="_blank" rel="noopener">前端开发仓库</a></td><td>前端总结网站，有一些手册和在线编辑功能，同时有一些比较实用的插件地址</td><td><code>手册</code>、<code>插件</code></td></tr><tr><td><a href="http://byr.wiki/" target="_blank" rel="noopener">北邮人导航</a></td><td>北邮人常用的导航页，随时随地 byr.wiki。一个框，全能搜！若打开缓慢，请访问简洁版 <a href="http://so.byr.wiki/" target="_blank" rel="noopener">http://so.byr.wiki/</a></td><td><code>北邮人</code>、<code>网站导航</code></td></tr><tr><td><a href="https://docschina.org/" target="_blank" rel="noopener">印记中文</a></td><td>深入挖掘国外前端新领域，为中国 Web 前端开发人员提供优质文档！</td><td><code>文档</code></td></tr><tr><td><a href="http://www.digimons.net/" target="_blank" rel="noopener">数码兽数据库</a></td><td>非官方数码兽同好站点，但是内容很多，包括图鉴、玩具、游戏、漫画、动画等等</td><td><code>数码宝贝</code></td></tr><tr><td><a href="https://www.marvel.com" target="_blank" rel="noopener">漫威官网</a></td><td>漫威官方网站，你想知道的都在这里</td><td><code>漫威</code></td></tr><tr><td><a href="http://www.runoob.com" target="_blank" rel="noopener">菜鸟教程</a></td><td>感觉和w3c做的好像，不过好像界面会更优美一点，不过我没有看过上面的教程</td><td><code>教程</code></td></tr><tr><td><a href="http://www.kotonohanoniwa.jp/" target="_blank" rel="noopener">言叶之庭官网</a></td><td>电影《言叶之庭》官网</td><td><code>言叶之庭</code></td></tr></tbody></table><h2 id="数据分析工具"><a href="#数据分析工具" class="headerlink" title="数据分析工具"></a>数据分析工具</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://www.crazyegg.com/" target="_blank" rel="noopener">Crazy egg热力图</a></td><td>主要特点是对页面热点追踪分析的热力图，功能不错</td><td><code>热力图</code></td></tr><tr><td><a href="https://cube.datastory.com.cn/" target="_blank" rel="noopener">数说立方</a></td><td>本质上是一个BI产品，配备百亿级社交数据库，支持全网公开数据实时抓取，并搭载了分布式搜索、语义分析、数据可视化三大引擎系统的海量计算平台，实现数据处理“探索式分析”和“秒级响应”的两个核心功能。</td><td><code>数据分析</code></td></tr><tr><td><a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a></td><td>包括流量相关的网站统计、推广统计、移动统计三部分内容。分析内容包括趋势分析、来源分析、页面分析、访客分析、定制分析和优化分析。其中的页面点击热力图功能不错。</td><td><code>统计</code>、<code>热力图</code></td></tr><tr><td><a href="http://www.google.com/analytics/" target="_blank" rel="noopener">谷歌分析</a></td><td>包括流量分析工具、内容分析、社交分析、移动分析、转化分析、广告分析几部分内容</td><td><code>谷歌</code></td></tr></tbody></table><h2 id="炫酷特效"><a href="#炫酷特效" class="headerlink" title="炫酷特效"></a>炫酷特效</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://www.anita-gelato.com/" target="_blank" rel="noopener">Anita</a></td><td>本款美食类网站，整款设计采用了非常有趣的黑白插画设计风格，极赋视觉吸引力。加之，通过直观的黑白网格，更加直观集中的展示其产品和相关服务，用户体验也是极好。</td><td><code>黑白插画</code>、<code>设计</code></td></tr><tr><td><a href="https://www.baileyscreamers.com/" target="_blank" rel="noopener">Bailey Coffee Screamers</a></td><td>黑色背景，辅以高清彩色产品图片或视频，能够极大的强调和突出页面产品，提升产品销售量。而作为一款在线咖啡类产品售卖的网站，本网页，就在黑色背景上，展示了各种高清产品图片和视频，轻轻松松将让用户集中于所售卖的产品，从而效的提升用户购买的可能。</td><td><code>配色</code></td></tr><tr><td><a href="https://www.bugatti.com/divo/" target="_blank" rel="noopener">Bugatti Divo</a></td><td>该款汽车类网页设计，除了采用处处透着高档奢华之感的黑、白、蓝配色方案之外，最引人入胜的是其页面添加的交互式车道设计。用户简单滚动鼠标，跟随蜿蜒的车道，指尖轻点，即可了解产品（即各类车型）相关信息。此外，车辆信息，全屏视频展示，也更加生动直观，有趣而不失实用性，有效地降低了网站跳出率。</td><td><code>设计</code>、<code>配色</code>、<code>交互</code></td></tr><tr><td><a href="https://tympanus.net/codrops2018/" target="_blank" rel="noopener">Codrops2018</a></td><td>前端设计网站Codrops收集的一些2018年的酷炫特效demo和网站</td><td><code>酷炫</code>、<code>网站集合</code></td></tr><tr><td><a href="https://coolbackgrounds.io/" target="_blank" rel="noopener">Cool Backgrounds</a></td><td>提供了很多酷炫的背景图片，你可以将它们添加到博客，网站，或作为电脑和手机的壁纸。</td><td><code>背景图片</code></td></tr><tr><td><a href="https://kentatoshikura.com/" target="_blank" rel="noopener">Kenta Toshikura</a></td><td>这是个作品集展示网页，方方面面（包括背景图片，页面文案以及鼠标悬浮效果等等）都采用了极其简约的黑白配色，干净整洁。结合视觉滚动差设计，让整个网页更加流畅而实用。</td><td><code>作品展示</code>、<code>交互</code>、<code>黑白配色</code>、<code>视觉</code></td></tr><tr><td><a href="https://kin.movie/" target="_blank" rel="noopener">Kin Movie</a></td><td>黑白配色中的黑，轻松即可让人联想到黑夜。而论提升页面视觉效果，与黑夜最搭的，无疑是五颜六色的灯光。而本款影视类网页的设计师深刻的认识到这一点，利用光束和光点，结合电影主题，打造出了极具视觉效果的科幻风设计。</td><td><code>视觉</code>、<code>科幻风</code></td></tr><tr><td><a href="https://skinfinity.hr/" target="_blank" rel="noopener">Skinfinity Cosmetics</a></td><td>本款化妆品类网页设计，通过不规则的字母排版，让整款设计低调而时尚。加之，黑白配色的应用，若隐若现背景图的点缀，使整个网页奢华而神秘。非常符合其所售卖产品——女性化妆品的特色。</td><td><code>字母排版</code>、<code>黑白配色</code></td></tr><tr><td><a href="https://studiobjork.com/" target="_blank" rel="noopener">Studio Bjork</a></td><td>本款在线工作室类网页设计，采用黑白配色风格的同时，选用了极具特色的横向滚动式设计，新颖实用。</td><td><code>黑白配色</code>、<code>横向滚动</code></td></tr><tr><td><a href="https://tpmm.ge/en/" target="_blank" rel="noopener">TPMM</a></td><td>在线摄影和多媒体博物馆的网页设计，采用黑白配色方案的同时，利用黑色背景下，白色光点更易于突出展示内容的特点。通过交互式设计方式，为用户提供了极具视觉效果的网页设计。用户滑动鼠标，光点即跟随变化，展开或隐藏界面导航。</td><td><code>黑白配色</code>、<code>交互</code></td></tr><tr><td><a href="https://typora.io/" target="_blank" rel="noopener">typora</a></td><td>一款markdown编辑器和阅读器</td><td><code>Markdown</code></td></tr><tr><td><a href="https://uimovement.com/" target="_blank" rel="noopener">UI Moverment</a></td><td>这是一个设计爱好者的聚集地，他们在这里分享和讨论最有趣和独特的UI设计。</td><td><code>设计</code>、<code>社区</code></td></tr><tr><td><a href="http://www.zhinengshe.com/index.html" target="_blank" rel="noopener">智能社</a></td><td>智能社就是前端开发培训，北京最具深度和口碑的JavaScript、HTML5培训，专注于让学员获得快乐的学习体验并找到高薪工作的培训——数百名毕业学员高薪就职大型互联网公司，推出的《智能社JavaScript视频教程》更被大家誉为——最经典的JavaScript视频教程。</td><td><code>培训</code>、<code>教程</code></td></tr><tr><td><a href="https://salongweb.com/" target="_blank" rel="noopener">萨龙网络</a></td><td>专注WordPress高端主题设计与开发，为您提供一个现代、干净的WEB站点！</td><td><code>wordpress</code>、<code>主题</code></td></tr></tbody></table><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://www.bdys.co/" target="_blank" rel="noopener">BD影视</a></td><td>主要提供丰富的影视资源下载,并且可以在线云播预览,上映之后三个月内发布枪版,三个月之后发布蓝光高清下载</td><td><code>电影资源</code></td></tr><tr><td><a href="https://www.cheatography.com/" target="_blank" rel="noopener">Cheatography</a></td><td>这个网站上有超过4000份对照表，包括Linux、MySQL、Vim等等</td><td><code>对照表</code></td></tr><tr><td><a href="http://blog.csdn.net/web/index.html" target="_blank" rel="noopener">CSDN</a></td><td>已经没落的CSDN，好文章越来越少了感觉</td><td><code>CSDN</code>、<code>文章</code></td></tr><tr><td><a href="http://fandom.wikia.com/" target="_blank" rel="noopener">Fandom</a></td><td>这是国外知名的粉丝文化社区，你能在上面找到几乎所有领域的粉丝群，无论是游戏，电影，电视剧还是漫画</td><td><code>粉丝文化</code></td></tr><tr><td><a href="https://www.g-cores.com/" target="_blank" rel="noopener">GAMECORES</a></td><td>机核网，国内首个综合性的游戏（以各大主机游戏为主）、游戏周边的网络广播站点及论坛，并为广大游戏玩家提供最新最及时的声讯、视讯以及现场报道。</td><td><code>游戏</code>、<code>资讯</code></td></tr><tr><td><a href="https://github.com/" target="_blank" rel="noopener">Github</a></td><td>最好的项目管理工具，程序猿必备技能</td><td><code>项目管理</code></td></tr><tr><td><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a></td><td>这里是一个提供用户脚本的网站</td><td><code>用户脚本</code></td></tr><tr><td><a href="http://www.jq22.com/" target="_blank" rel="noopener">jQuery插件库</a></td><td>致力于收集jQuery插件和提供各种jQuery特效的详细使用方法，提供在线预览，jQuery插件下载及教程。</td><td><code>jQuery</code>、<code>插件</code>、<code>特效</code></td></tr><tr><td><a href="http://marvelspoileroficial.blogspot.com/" target="_blank" rel="noopener">Marvel Spoiler Official</a></td><td>这是一个历史悠久的漫威粉丝网站，专门出品各种以假乱真的“官方海报/壁纸”，全部都是粉丝自发制作的，免费下载。</td><td><code>漫威</code>、<code>粉丝</code></td></tr><tr><td><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></td><td>仍然很活跃的社区，帖子很多</td><td><code>社区</code>、<code>问答</code></td></tr><tr><td><a href="http://web.jobbole.com/" target="_blank" rel="noopener">伯乐在线</a></td><td>微信公众号“前端大全”经常引用这里的文章</td><td><code>文章</code></td></tr><tr><td><a href="http://www.html-js.com/" target="_blank" rel="noopener">前端乱炖</a></td><td>前端乱炖，这里是最专业的前端知识平台，汇集国内大部分前端开发人员的前端花名册，最精彩的原创文章专栏，最专业的问答平台，最火热的话题频道，最丰富的线下线上活动。</td><td><code>前端花名册</code>、<code>问答</code></td></tr><tr><td><a href="http://www.qdfuns.com/" target="_blank" rel="noopener">前端网</a></td><td>原来是W3Cfuns，现在变成了QDfuns，而且好多广告</td><td><code>前端</code></td></tr><tr><td><a href="http://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a></td><td>开发者的网上家园，原创文章还是蛮多的</td><td><code>原创文章</code></td></tr><tr><td><a href="https://www.52pojie.cn/" target="_blank" rel="noopener">吾爱破解</a></td><td>吾爱破解论坛致力于软件安全与病毒分析的前沿，丰富的技术版块交相辉映，由无数热衷于软件加密解密及反病毒爱好者共同维护</td><td><code>破解</code></td></tr><tr><td><a href="http://www.oschina.net/" target="_blank" rel="noopener">开源中国</a></td><td>不太喜欢他的排版和网站风格</td><td><code>开源</code></td></tr><tr><td><a href="https://sharecuts.cn/" target="_blank" rel="noopener">捷径社区</a></td><td>捷径社区，专注于发现和分享 Siri 捷径，让人们通过捷径探索 iOS 更大的世界。</td><td><code>捷径</code>、<code>iOS</code></td></tr><tr><td><a href="https://www.vgtime.com/" target="_blank" rel="noopener">游戏时光</a></td><td>专业、严谨、有趣，游戏时光致力于分享游戏乐趣，为玩家们提供快速准确的新闻资讯、全面的资料和友好开放的交流平台。</td><td><code>游戏</code></td></tr><tr><td><a href="https://www.iztwp.com/" target="_blank" rel="noopener">爱主题</a></td><td>免费WordPress主题、WordPress模板及WordPress插件分享下载，致力于为国内站长提供方便快捷的wordpress建站服务体验，爱主题所收集的wordpress主题涵盖范围广，包括：WordPress企业主题、CMS主题、图片主题、博客主题等，同时我们也提供自己的原创wordpress企业主题模板出售，给您更多选择。</td><td><code>wordpress</code>、<code>主题</code></td></tr><tr><td><a href="https://www.zcool.com.cn/" target="_blank" rel="noopener">站酷</a></td><td>中国设计师互动平台。深耕设计领域十二年，站酷聚集了650万设计师、摄影师、插画师、艺术家、创意人，设计创意群体中具有较高的影响力与号召力。</td><td><code>设计</code></td></tr><tr><td><a href="http://www.shejidaren.com/" target="_blank" rel="noopener">设计达人</a></td><td>精选全球优秀UI设计和网页设计欣赏，分享免费高质量设计素材，为设计师提供新鲜的技术教程和创意灵感，探讨交互设计、产品设计、用户体验以及xhtml+css教程。</td><td><code>设计</code>、<code>素材</code>、<code>创意</code></td></tr></tbody></table><h2 id="素材下载"><a href="#素材下载" class="headerlink" title="素材下载"></a>素材下载</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://www.17sucai.com/" target="_blank" rel="noopener">17素材</a></td><td>各种各样的素材和源码</td><td><code>素材</code>、<code>源码</code></td></tr><tr><td><a href="http://www.6m5m.com/" target="_blank" rel="noopener">6m5m</a></td><td>游戏素材资源平台</td><td><code>游戏素材</code>、<code>资源</code></td></tr><tr><td><a href="http://cupcake.nilssonlee.se/" target="_blank" rel="noopener">Cupcake</a></td><td>所有图片你都可以复制、修改和分发，即使是为了商业目的</td><td><code>图片</code></td></tr><tr><td><a href="http://designdeck.co.uk/" target="_blank" rel="noopener">design deck</a></td><td>很多素材，包括图片、模板以及图标等等</td><td><code>图片</code>、<code>图标</code></td></tr><tr><td><a href="https://www.desktoppr.co/" target="_blank" rel="noopener">Desktoppr</a></td><td>提供不同分辨率的好看的壁纸</td><td><code>壁纸</code></td></tr><tr><td><a href="https://dribbble.com/" target="_blank" rel="noopener">dribbble</a></td><td>是一个全球优秀设计师聚集的地方，可以从上面发现很多Web设计的灵感和创意</td><td><code>设计</code>、<code>创意</code></td></tr><tr><td><a href="http://epic-spinners.epicmax.co/#/" target="_blank" rel="noopener">Epic Spinners</a></td><td>一个好看的css loading 代码库</td><td><code>loading</code></td></tr><tr><td><a href="https://www.fontspace.com" target="_blank" rel="noopener">Font Space</a></td><td>共有37000款英文字体供免费下载和使用，搜索avengers还有复仇者联盟中的字体，整整49款。</td><td><code>字体</code></td></tr><tr><td><a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Font</a></td><td>谷歌字体，可以很方便的引用</td><td><code>Google</code>、<code>字体</code></td></tr><tr><td><a href="https://gratisography.com/" target="_blank" rel="noopener">Gratisography</a></td><td>世界上最奇特的免费高分辨率图片集合，包括世界上最好，最有创意的照片，完全免费。</td><td><code>图片</code>、<code>高分辨率</code>、<code>创意</code></td></tr><tr><td><a href="https://www.hloom.com/" target="_blank" rel="noopener">Hloom</a></td><td>提供Microsoft Word, Microsoft Excel, PDF, Google Docs的模板</td><td><code>模板</code></td></tr><tr><td><a href="https://html5up.net/" target="_blank" rel="noopener">HTML5 UP</a></td><td>响应式的HTML5和CSS3站点模板</td><td><code>响应式</code>、<code>站点模板</code></td></tr><tr><td><a href="http://www.jq22.com/" target="_blank" rel="noopener">jQuery插件库</a></td><td>致力于收集jQuery插件和提供各种jQuery特效的详细使用方法，提供在线预览，jQuery插件下载及教程。</td><td><code>jQuery</code>、<code>插件</code>、<code>教程</code></td></tr><tr><td><a href="https://www.kisspng.com/" target="_blank" rel="noopener">kiss png</a></td><td>这是个免抠素材库，共有将近640万张png格式的矢量图，不限次数下载。</td><td><code>矢量图</code></td></tr><tr><td><a href="http://www.koppt.cn/" target="_blank" rel="noopener">KOPPT</a></td><td>一个做PPT的神器，提供PPT模板、简历、图表下载，同时提供图表、背景图等资源的下载</td><td><code>PPT</code></td></tr><tr><td><a href="https://www.lifeofpix.com/" target="_blank" rel="noopener">Lifeofpix</a></td><td>摄影级别的图片，像素非常高，支持搜索和免费下载</td><td><code>图片</code>、<code>摄影</code></td></tr><tr><td><a href="http://magazinelib.com/" target="_blank" rel="noopener">MAGAZINELIB</a></td><td>可以免费下载很多种杂志，不过大多是英文的</td><td><code>杂志</code></td></tr><tr><td><a href="https://opengameart.org/" target="_blank" rel="noopener">Open Game Art</a></td><td>这里提供游戏相关的素材免费下载，包括图片、音频、动画等，大部分都是网友自愿上传的。</td><td><code>游戏</code></td></tr><tr><td><a href="http://openlogos.org/" target="_blank" rel="noopener">OPEN LOGOS</a></td><td>作者设计了一些logo，你可以进行申请，社区将决定哪个开源社会获得此logo</td><td><code>logo</code></td></tr><tr><td><a href="https://www.pexels.com/" target="_blank" rel="noopener">PEXELS</a></td><td>免费高清图片，你可以任意使用</td><td><code>高清图片</code></td></tr><tr><td><a href="https://picjumbo.com/" target="_blank" rel="noopener">Picjumbo</a></td><td>网站收录的图片多以暖色为主，完全免费</td><td><code>图片</code></td></tr><tr><td><a href="https://pixabay.com/" target="_blank" rel="noopener">Pixabay</a></td><td>1.4 百万张图片和视频，这是一个充满活力的创意社区</td><td><code>图片</code>、<code>视频</code></td></tr><tr><td><a href="https://stocksnap.io/" target="_blank" rel="noopener">StockSnap.io</a></td><td>免费图片库，每周增加数百张高分辨率图像。</td><td><code>高分辨率</code>、<code>图片</code></td></tr><tr><td><a href="http://streetwill.co/" target="_blank" rel="noopener">Streetwill</a></td><td>免费高清大图</td><td><code>图片</code></td></tr><tr><td><a href="https://undraw.co/" target="_blank" rel="noopener">unDraw</a></td><td>不断更新各种免费的SVG素材，可以免费下载</td><td><code>SVG</code></td></tr><tr><td><a href="https://vuejsexamples.com/" target="_blank" rel="noopener">Vue.js Examples</a></td><td>收集了很多用Vue.js实现的好的例子</td><td><code>Vue</code>、<code>demo</code></td></tr><tr><td><a href="http://pixweb.authing.cn/#/" target="_blank" rel="noopener">像素网页</a></td><td>提供很多免费的响应式网站模板下载</td><td><code>响应式</code>、<code>网站模板</code></td></tr><tr><td><a href="https://www.chuangkit.com/" target="_blank" rel="noopener">创客贴</a></td><td>极简的平面设计工具，有很多设计类模板，包括PPT、海报等</td><td><code>设计</code>、<code>PPT</code>、<code>海报</code></td></tr><tr><td><a href="https://www.ssyer.com/" target="_blank" rel="noopener">别样网</a></td><td>高质量无版权图片遵循 CC0 协议，来自全球的内容社区，随时随地发布与使用</td><td><code>图片</code></td></tr><tr><td><a href="http://www.58pic.com/" target="_blank" rel="noopener">千图网</a></td><td>专注免费设计素材网站</td><td><code>设计素材</code></td></tr><tr><td><a href="http://www.ireadweek.com/index.php/" target="_blank" rel="noopener">周读</a></td><td>提供免费电子书下载、分享。包括mobi、epud、pdf、txt格式，kindle电子书下载</td><td><code>电子书</code></td></tr><tr><td><a href="http://www.kaicz.com/" target="_blank" rel="noopener">开创者素材</a></td><td>开创者素材专注于网站模板的建设与解决方案，提供最好的网站模板！免费为站长提供JS代码、HTML整站模板、CMS开源程序等代码下载功能和站长工具查询服务</td><td><code>网站模板</code></td></tr><tr><td><a href="http://www.yimijili.com/xcxwzdh.html" target="_blank" rel="noopener">微信小程序开发资源精选网址导航</a></td><td>集中了小程序开发资源，包括专业工具、参考文档和开发教程等等</td><td><code>小程序</code></td></tr><tr><td><a href="http://www.lanrenzhijia.com/" target="_blank" rel="noopener">懒人之家</a></td><td>可能是JS网页特效代码收集最全的懒站</td><td><code>网页特效</code></td></tr><tr><td><a href="https://www.youziku.com/" target="_blank" rel="noopener">有字库</a></td><td>全球第一中文web font（在线字体）服务平台，专为网页设计师提供在线字体</td><td><code>在线字体</code></td></tr><tr><td><a href="http://www.qiuziti.com/" target="_blank" rel="noopener">求字体</a></td><td>求字体网免费提供上传图片找字体、字体实时预览及字体下载服务，本网站可识别中文、英文、日韩、书法等多种类字体。只要上传图片或输入字体名称，就可以帮您找字体。</td><td><code>找字体</code></td></tr><tr><td><a href="http://www.yanj.cn/" target="_blank" rel="noopener">演界网</a></td><td>PPT模板，PPT图表，PPT作品，PPT动画，keynote模板，图片素材</td><td><code>PPT</code>、<code>keynote</code></td></tr><tr><td><a href="http://codepen.io/tsuhre/full/BYbjyg" target="_blank" rel="noopener">炫光生成器</a></td><td>CodePen炫光生成器，可以利用它生成各种各样的炫彩背景。点击鼠标就随机生成一张图就可以了，最后右键保存图片即可。</td><td><code>炫彩背景</code></td></tr><tr><td><a href="http://sc.chinaz.com/" target="_blank" rel="noopener">站长素材</a></td><td>很老的一个素材网站，但是内容还是很多的</td><td><code>素材</code></td></tr><tr><td><a href="http://www.51yuansu.com/" target="_blank" rel="noopener">觅元素</a></td><td>觅元素,设计元素的免费下载网站,提供位图、透明背景素材、高清png、图片素材、漂浮元素、装饰元素、标签元素、字体元素、图标元素等免抠设计元素的免费下载.</td><td><code>设计素材</code></td></tr><tr><td><a href="https://www.ifeiwu.com/" target="_blank" rel="noopener">飞屋设计</a></td><td>飞屋是一个以简约轻盈风格为方向的网页设计工作室，为你提供Web端的创意视觉多平台解决方案。</td><td><code>简约</code>、<code>网页设计</code></td></tr></tbody></table><h2 id="视频学习"><a href="#视频学习" class="headerlink" title="视频学习"></a>视频学习</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://www.rails365.net/" target="_blank" rel="noopener">rails365编程学院</a></td><td>rails365编程学院是一家学习 web 全栈式开发等技术，分享高质量的 web 编程技术文章和视频教程的网站</td><td><code>编程</code>、<code>教程</code></td></tr><tr><td><a href="http://www.haoduoshipin.com/" target="_blank" rel="noopener">好多视频网</a></td><td>很多类型的视频，同时还有文字讲解</td><td><code>视频</code></td></tr><tr><td><a href="http://www.miaov.com/" target="_blank" rel="noopener">妙味课堂</a></td><td>网站设计的很精美,各种CSS和JS动画让你不会厌倦,就算不看视频看看他的网站设计思路也会获益匪浅.</td><td><code>动画</code></td></tr><tr><td><a href="http://www.imooc.com/" target="_blank" rel="noopener">慕课网</a></td><td>更加有针对性地解决一些问题，而且还可以下载源码，是首推的视频学习网站</td><td><code>视频学习</code>、<code>源码</code></td></tr><tr><td><a href="http://jspang.com/" target="_blank" rel="noopener">技术胖博客</a></td><td>技术胖-胜洪宇关注web前端技术-前端免费视频第一博客，里面有很多免费的视频教程。</td><td><code>免费视频</code></td></tr><tr><td><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a></td><td>对于小白来说更加亲切，学习进阶路线更加清晰，但是大部分需要会员，北邮人bt上有会员资源。</td><td><code>视频学习</code></td></tr><tr><td><a href="http://www.hubwiz.com/" target="_blank" rel="noopener">汇智网</a></td><td>用互动的方式，学习最前沿的技术</td><td><code>互动</code></td></tr><tr><td><a href="https://www.jisuanke.com/" target="_blank" rel="noopener">计蒜客</a></td><td>不知道这个名字是什么鬼。。但是从目的出发的理念很不错</td><td><code>视频学习</code></td></tr></tbody></table><h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://colorsupplyyy.com/app" target="_blank" rel="noopener">Color Supply</a></td><td>使用颜色控制盘选择喜欢的样式，然后就可以得到对应的颜色代码</td><td><code>配色</code></td></tr><tr><td><a href="http://www.colorhunt.co/" target="_blank" rel="noopener">Color Hunt</a></td><td>如你所见，这个网站提供很简单直观的配色方案，这些配色方案并不是一成不变的，也不是由计算机生成的，而是用户不断提交的，网站只是负责展示，你可以对喜欢的配色点赞。很有特点的是网站对这些配色方案进行了一些非常有用的分类。按照最新、最热、最受欢迎、随机。这样你就可以轻松选出时下最流行的配色。</td><td><code>配色</code></td></tr><tr><td><a href="http://www.peise.net/tools/web/" target="_blank" rel="noopener">Color Schema Design</a></td><td>这个网站提供了六种配色模式：单色、互补色、三角形搭配、矩形搭配、类似色搭配、类似色搭配互补色。同时还提供对比度调节，饱和度/明度调节等参数调节，最厉害的是可以直接预览应用配色后的网站的样子，很直观高效。而且网站提供的仪表盘操作也很有专业的感觉。对于那些有想法，喜欢自己动手实现的童鞋来讲是在合适不过了。</td><td><code>配色搭配</code></td></tr><tr><td><a href="https://colordrop.io/" target="_blank" rel="noopener">ColorDrop</a></td><td>这纯粹是一个懒人网站。网站提供了437种扁平化的配色方案，对！就是437种！我数过。如果你不怕挑花眼的话通过这个网站你可以轻松的获取你想要的配色的RGB值与HEX（十六进制形式）值。</td><td><code>扁平化</code></td></tr><tr><td><a href="http://www.colorfavs.com/" target="_blank" rel="noopener">ColorFavs</a></td><td>可以通过你上传的图片或者网络的图片来分析图片的配色构成。并且你可以查看别人的分析结果。对于借助图片来配色的情况可谓是很有帮助的，能省下不少的功夫。</td><td><code>配色分析</code></td></tr><tr><td><a href="http://webcolourdata.com/" target="_blank" rel="noopener">Colours</a></td><td>如果你想分析一个网站的配色，这个工具就很适合你。你只需要把你想要分析的网站的链接丢进这个网站他便可帮你快速高效的分析出网站的配色方案。而且分析的结果会有三种不同的图示来表示，很靠谱很专业。如果你想模仿一个网站的配色，这个工具是一个不错的选择。</td><td><code>网站配色分析</code></td></tr><tr><td><a href="https://webkul.github.io/coolhue/" target="_blank" rel="noopener">coolHue</a></td><td>这个渐变色网站我在之前的文章中推荐过。非常轻量的渐变色网站。网站提供了60种常用的渐变色，你不仅可以从网站获取渐变色的值你还能直接获得制作好的渐变色的图片，直接拿来做背景实在是再合适不过了。</td><td><code>背景图片</code></td></tr><tr><td><a href="https://coolors.co/app" target="_blank" rel="noopener">COOLORS</a></td><td>提供很强大的配色方案，也支持上传图片进行取色。另外还可以随机推荐配色方案，你可以拖拽调换颜色位置，调出相近色阶列表，调整整体方案的色调、饱和度、亮度、冷暖度。</td><td><code>图片取色</code></td></tr><tr><td><a href="https://duotone.shapefactory.co/" target="_blank" rel="noopener">Duotone</a></td><td>这个神器能让你一键无痛生成酷炫的双色画风，图片素材都是来源于大名鼎鼎的免费可商用图库 Unsplash</td><td><code>双色</code></td></tr><tr><td><a href="http://flatuicolors.com/" target="_blank" rel="noopener">flatuicolors</a></td><td>一个提供配色方案和助攻前端UI设计的素材网站</td><td><code>素材</code></td></tr><tr><td><a href="https://webgradients.com/" target="_blank" rel="noopener">itmeo</a></td><td>提供了多达180种渐变色配色方案，同时提供渐变值与渐变图片，用来作渐变配色再合适不过了。</td><td><code>渐变图片</code></td></tr><tr><td><a href="https://www.materialpalette.com" target="_blank" rel="noopener">Material palette</a></td><td>谷歌开发的自动颜色搭配网站，勾选两个主颜色，自动生成色阶相近、协调度高的配色列表。</td><td><code>Google</code>、<code>自动生成</code></td></tr><tr><td><a href="http://zhongguose.com/" target="_blank" rel="noopener">中国传统色</a></td><td>这个网站很多人都知道，主要以中国传统色为主。主要提供一些很经典的传统色，比如胭脂色、朱砂色、鸭蛋青等，而且是根据中科院的一些资料制作的，所以这的颜色都是很正点的，用在与古风相关的设计中最合适不过了。</td><td><code>传统色</code></td></tr><tr><td><a href="http://dwz.cn/gome002" target="_blank" rel="noopener">色轮</a></td><td>这是由Adobe出的一款配色工具，提供七种配色规则。虽然界面上操作很简单，但是对于颜色的调节上功能一点都不差。非常靠谱。同时除了支持常见的RGB值、HEX值还支持CMYK值、LAB值、HSB值。可谓非常专业。</td><td><code>配色工具</code></td></tr><tr><td><a href="http://tool.c7sky.com/webcolor/" target="_blank" rel="noopener">配色表</a></td><td>正如这个网页的名字一样：配色表。这是一个很普通的配色表。这个配色表最大的特色是对颜色按照所给人的印象进行了分类：比如优雅、稳重、自然等。这使得在某些场合下使用这个配色表更加贴切与实用。</td><td><code>配色表</code></td></tr></tbody></table><h2 id="静态资源库"><a href="#静态资源库" class="headerlink" title="静态资源库"></a>静态资源库</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></td><td></td><td><code>CDN</code></td></tr><tr><td><a href="https://cdnjs.com/" target="_blank" rel="noopener">cdnjs</a></td><td>很简单的页面，但是资源很多，就是搜索的时候简直太慢了</td><td><code>资源</code></td></tr><tr><td><a href="http://cdn.code.baidu.com/" target="_blank" rel="noopener">百度静态资源共享库</a></td><td></td><td><code>百度</code></td></tr></tbody></table><h2 id="音效素材库"><a href="#音效素材库" class="headerlink" title="音效素材库"></a>音效素材库</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://100audio.com" target="_blank" rel="noopener">100AUDIO</a></td><td>100audio是一支体验和操作都非常优质的音效素材网站，但是因为定位是商业网站，所以说，网站上的所有音源都是需要付费获得的，但是这里的音源基本都是正版，可以让你免去版权纷争。</td><td><code>音效</code></td></tr><tr><td><a href="https://offers.adobe.com/en/na/audition/offers/audition_dlc.html" target="_blank" rel="noopener">ADOBE</a></td><td>这是ADOBE官方提供的免费音源素材，音效素材总体量在20G左右，提供免费下载和使用，是非常好的内容了，可千万别错过！</td><td><code>Adobe</code></td></tr><tr><td><a href="http://www.freesfx.co.uk" target="_blank" rel="noopener">FREESFX</a></td><td>音源质量较高，该网站提供免费素材。</td><td><code>音效素材</code></td></tr><tr><td><a href="http://freesound.org" target="_blank" rel="noopener">freesound</a></td><td>FreeSound实际是一个社区，该网站是一个协作型的团队合作式音频发布站点，世界各地的用户可以在该网站分享和上传音效内容，你可以在该网站找到非常多的音效，而且很多音效是可以直接在项目中使用的。</td><td><code>协作</code></td></tr><tr><td><a href="https://www.pond5.com" target="_blank" rel="noopener">pond5</a></td><td>pond5是一个综合素材网站，提供照片、插画、音乐、音效、AE模版和3D模式、视频等资源，该网站的音效素材也非常丰富，其素材也分为免费和付费内容，当然，这些内容都是有版权保证的。</td><td><code>照片</code>、<code>插画</code>、<code>音效</code>、<code>模板</code></td></tr><tr><td><a href="http://www.sound-effects-library.com" target="_blank" rel="noopener">sound-effects-library</a></td><td>同行推荐的专业门户，可自行研究</td><td><code>门户</code></td></tr><tr><td><a href="https://videohive.net" target="_blank" rel="noopener">videohive</a></td><td>videohive也是一个综合性较高的素材门户，当然除了音效，还有很多特效素材的提供，该门户分为国际版和国内版，而国际版的内容素材量优质，种类也比较丰富，所有素材都需要支付费用。但是该网站的素材确实质量较高，有非常多的声画效果值得参考。</td><td><code>声画效果</code></td></tr><tr><td><a href="http://www.shengyin.com" target="_blank" rel="noopener">声音网</a></td><td></td><td></td></tr><tr><td><a href="http://www.2gei.com" target="_blank" rel="noopener">爱给网</a></td><td></td><td></td></tr><tr><td><a href="http://www.yinxiao.com" target="_blank" rel="noopener">音效网</a></td><td></td><td></td></tr></tbody></table><h2 id="Hover特效"><a href="#Hover特效" class="headerlink" title="Hover特效"></a>Hover特效</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://2018.makemepulse.com/" target="_blank" rel="noopener">2018 Make Me Pulse</a></td><td>用canvas绘制了2018这四个数字，特效很赞</td><td><code>canvas</code>、<code>2018</code></td></tr><tr><td><a href="http://preview.themeforest.net/item/alinti-minimal-creative-wordpress-portfolio/full_screen_preview/17753077" target="_blank" rel="noopener">Alinti</a></td><td>利用高清黑白照片或背景图片，简化黑白网页设计，简约式WordPress黑白网页设计典范</td><td><code>黑白</code></td></tr><tr><td><a href="http://leaverou.github.io/animatable/" target="_blank" rel="noopener">animatable</a></td><td>一个CSS属性，两个值，就可以产生各种不一般的特效</td><td><code>CSS</code></td></tr><tr><td><a href="https://motion.ant.design/" target="_blank" rel="noopener">Ant Design Pro</a></td><td>Ant Design Pro正式发布了，其官方网站的交互效果很赞。</td><td><code>Antd</code></td></tr><tr><td><a href="https://www.g-cores.com/" target="_blank" rel="noopener">GAMECORES</a></td><td>机核网，国内首个综合性的游戏（以各大主机游戏为主）、游戏周边的网络广播站点及论坛，并为广大游戏玩家提供最新最及时的声讯、视讯以及现场报道。</td><td><code>游戏</code></td></tr><tr><td><a href="https://vue.w3ctech.com/#about" target="_blank" rel="noopener">Vue Conf</a></td><td>演讲嘉宾那里的Hover特效很别致</td><td></td></tr><tr><td><a href="https://www.yeehee.cn/" target="_blank" rel="noopener">叶赫先生</a></td><td>有很多Wordpress、小程序相关的文章，同时网站特效很不错</td><td></td></tr><tr><td><a href="https://idc.yygzs.cn/" target="_blank" rel="noopener">逍遥运</a></td><td>云服务器提供商，网站上有大量的hover效果</td><td></td></tr><tr><td><a href="https://blog.limiabc.com/" target="_blank" rel="noopener">里米先生</a></td><td>wordpress主题，设计师的个人博客，简约大方，创意十足</td><td><code>简约</code></td></tr></tbody></table><h2 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://preview.themeforest.net/item/alinti-minimal-creative-wordpress-portfolio/full_screen_preview/17753077" target="_blank" rel="noopener">Alinti</a></td><td>利用高清黑白照片或背景图片，简化黑白网页设计，简约式WordPress黑白网页设计典范</td><td><code>黑白</code>、<code>简约</code></td></tr><tr><td><a href="https://www.famethemes.com/" target="_blank" rel="noopener">famethemes</a></td><td>提供了一些设计优雅、干净、漂亮的WordPress主题，包括免费和付费的</td><td><code>主题</code></td></tr><tr><td><a href="https://shields.io/" target="_blank" rel="noopener">ShieldsIO</a></td><td>提供了很多用于Github、Wordpress的徽章，拥有多种定制化功能</td><td><code>徽章</code></td></tr><tr><td><a href="https://salongweb.com/" target="_blank" rel="noopener">萨龙网络</a></td><td>专注WordPress高端主题设计与开发，为您提供一个现代、干净的WEB站点！</td><td><code>主题</code></td></tr><tr><td><a href="https://blog.limiabc.com/" target="_blank" rel="noopener">里米先生</a></td><td>wordpress主题，设计师的个人博客，简约大方，创意十足</td><td><code>主题</code>、<code>简约</code></td></tr></tbody></table><h2 id="值得收藏"><a href="#值得收藏" class="headerlink" title="值得收藏"></a>值得收藏</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://www.instagram.com/bosslogic/" target="_blank" rel="noopener">@bosslogic</a></td><td>这是一位大神，你在网上看到的 90% 的漫威非官方海报都可能出自他手</td><td><code>漫威海报</code></td></tr><tr><td><a href="http://mu.aynu.top/" target="_blank" rel="noopener">AYNU音乐实验室</a></td><td>免费的在线音乐播放器。收录全网最新无损音乐，提供无损MP3音乐免费下载，免开VIP尽享全网音乐免费播放下载！</td><td><code>音乐播放器</code>、<code>音乐下载</code></td></tr><tr><td><a href="https://www.bdys.co/" target="_blank" rel="noopener">BD影视</a></td><td>主要提供丰富的影视资源下载，并且可以在线云播预览，上映之后三个月内发布枪版，三个月之后发布蓝光高清下载</td><td><code>影视资源下载</code></td></tr><tr><td><a href="http://v.apkgm.top/" target="_blank" rel="noopener">BTtwo</a></td><td>有很多电影和电视剧，同时提供在线观看</td><td><code>电影</code>、<code>电视剧</code>、<code>在线观看</code></td></tr><tr><td><a href="https://www.cheatography.com/" target="_blank" rel="noopener">Cheatography</a></td><td>这个网站上有超过4000份对照表，包括Linux、MySQL、Vim等等</td><td><code>对照表</code></td></tr><tr><td><a href="https://hellogithub.com/" target="_blank" rel="noopener">Hello Github</a></td><td>分享 GitHub 上入门级、有趣的开源项目</td><td><code>Github</code>、<code>开源项目</code></td></tr><tr><td><a href="http://linkFox.io" target="_blank" rel="noopener">linkfox</a></td><td>免费的短链服务，可以将长链接转换为短链</td><td><code>短链</code></td></tr><tr><td><a href="http://www.jq22.com/" target="_blank" rel="noopener">jQuery插件库</a></td><td>致力于收集jQuery插件和提供各种jQuery特效的详细使用方法，提供在线预览，jQuery插件下载及教程。</td><td><code>jQuery</code></td></tr><tr><td><a href="https://neets.cc/" target="_blank" rel="noopener">Neets</a></td><td>Nneets是你的追剧管家，你可以把目前追的各种影视、综艺等记录下来，做追剧清单，更新永不落。它不生产观看渠道，只是各种观看来源的搬运工，并且一般都会有好几个观看源供君选择，还加上了有无广告、是否在线播放等标签。</td><td><code>追剧管家</code></td></tr><tr><td><a href="http://www.nicetool.net/" target="_blank" rel="noopener">Nicetool</a></td><td>好工具网致力于收集和打造各种简单易用的在线工具，目前已有500多个工具。</td><td><code>在线工具</code></td></tr><tr><td><a href="https://typora.io/" target="_blank" rel="noopener">typora</a></td><td>一款markdown编辑器和阅读器</td><td><code>Markdown编辑器</code></td></tr><tr><td><a href="http://24mail.chacuo.net/" target="_blank" rel="noopener">临时邮箱</a></td><td>临时邮箱是一款帮助我们解决某些网站需要使用到我们自己的真实邮箱，但是我们又不想暴露我们的邮箱的工具。</td><td><code>临时邮箱</code></td></tr><tr><td><a href="https://www.cn-ki.net/" target="_blank" rel="noopener">仿知网</a></td><td>这个网站的论文检索结果和知网的搜索结果基本一样，而且这个网站每个账号前期免费提供论文下载，当你的下载次数没了，你完全可以用其它邮箱再注册其它账号使用；当然，如果你不想再注册账号，这个网站提供一块钱随意下载论文一天，也是非常值得尝试。</td><td><code>知网</code>、<code>论文下载</code></td></tr><tr><td><a href="https://www.52pojie.cn/" target="_blank" rel="noopener">吾爱破解</a></td><td>吾爱破解论坛致力于软件安全与病毒分析的前沿，丰富的技术版块交相辉映，由无数热衷于软件加密解密及反病毒爱好者共同维护</td><td><code>软件破解</code></td></tr><tr><td><a href="http://www.ireadweek.com/index.php/" target="_blank" rel="noopener">周读</a></td><td>提供免费电子书下载、分享。包括mobi、epud、pdf、txt格式，kindle电子书下载</td><td><code>电子书下载</code></td></tr><tr><td><a href="http://www.dysfz.vip/" target="_blank" rel="noopener">电影首发站</a></td><td>国内最优秀的高清电影下载网站，每天更新迅雷中英双字电影百度云盘下载，搜集和分享高清中英双字电影百度云盘下载站，致力于构建最大的高清电影下载汇聚地，迅雷电影下载、免费电影下载尽在电影首发站高清电影下载站。</td><td><code>电影下载</code></td></tr><tr><td><a href="http://www.meijushe.cc/" target="_blank" rel="noopener">美剧社</a></td><td>这里有最新最全的美剧资源和电影资源，同时支持在线播放</td><td><code>美剧</code>、<code>电影</code></td></tr><tr><td><a href="https://shenzjd.com/shenzjd/music/" target="_blank" rel="noopener">音乐搜索器</a></td><td>多站合一音乐搜索解决方案，可搜索试听网易云音乐、QQ音乐、酷狗音乐、酷我音乐、虾米音乐、百度音乐、一听音乐、咪咕音乐、荔枝FM、蜻蜓FM、喜马拉雅FM、全民K歌、5sing原创翻唱音乐。</td><td><code>音乐搜索</code></td></tr></tbody></table><h2 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://bookfere.com/" target="_blank" rel="noopener">书伴</a></td><td>网站页面简洁，无广告。书伴还有一个最大的特色是【推送服务】，注册账号后，定期会自动接收到最新期刊的更新。书伴电子书资源不是很多，但是更新速度快</td><td><code>推送</code>、<code>电子书</code></td></tr><tr><td><a href="https://shuge.org/" target="_blank" rel="noopener">书格</a></td><td>书格是一个自由开放的在线古籍图书馆，致力于开放式分享、介绍、推荐有价值的古籍善本，并鼓励将文化艺术作品数字化归档。</td><td><code>古籍图书馆</code></td></tr><tr><td><a href="https://hellogithub.com/periodical/category/开源书籍/?page=1" target="_blank" rel="noopener">开源书籍</a></td><td>GitHub 上开源、有趣的开源书籍 – 适合新手入门的开源书籍</td><td><code>Github</code>、<code>开源书籍</code>、<code>入门</code></td></tr><tr><td><a href="http://www.zxcs.me/" target="_blank" rel="noopener">知轩藏书</a></td><td>专注精校小说，网站同样没有多余的广告。</td><td><code>精校小说</code></td></tr><tr><td><a href="https://www.xilinjie.com/" target="_blank" rel="noopener">西林街</a></td><td>西林街不仅仅可以搜索电子书，可以通过自定义搜索设置，搜索【网盘】、【视频】、【Mooc】等。另外，还可以搜索相应的学术搜索，为科研人员带来了方便之处。</td><td><code>电子书</code>、<code>学术</code>、<code>网盘</code></td></tr><tr><td><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩搜书</a></td><td>鸠摩搜书，是国内一款强大的电子书搜索引擎，涵盖大部分电子书资源，界面简洁，无广告骚扰。另外无需注册、就可以直接下载国内外电子书，部分书籍还有在线朗读版。</td><td><code>电子书</code>、<code>在线朗读</code></td></tr></tbody></table><h2 id="网站导航"><a href="#网站导航" class="headerlink" title="网站导航"></a>网站导航</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://hao.uisdc.com/" target="_blank" rel="noopener">优设导航</a></td><td>优设网站导航为设计师提供ps教程、UI设计、素材下载、高清图库、配色方案、用户体验、网页设计等全方位设计师网站导航指引。每周更新及时，是优秀设计联盟（SDC）旗下最实用、最专业、最全面、最好用的设计师导航！</td><td><code>设计师</code></td></tr><tr><td><a href="http://qianshan.co/" target="_blank" rel="noopener">千山</a></td><td>千山是一个简洁的网址导航。没有广告、弹窗和冗余信息，千山希望成为通向未知的最短路径。快捷键直达站点、一键打开多个标签页，千山愿为你节省每分每秒。</td><td><code>网址导航</code></td></tr><tr><td><a href="http://www.jetli.com.cn/" target="_blank" rel="noopener">博客志</a></td><td>建站于2006年，专注于收藏有价值的有效更新的优秀个人独立博客。</td><td><code>个人博客</code></td></tr><tr><td><a href="http://www.miguyu.com" target="_blank" rel="noopener">咪咕鱼</a></td><td>咪咕鱼，一个分享实用链接的网站，在这里你可以发现更多优秀有用的站点，收藏自己喜欢的链接。</td><td><code>实用链接</code></td></tr><tr><td><a href="http://hao.199it.com/" target="_blank" rel="noopener">大数据导航</a></td><td>大数据导航，以大数据产业为主，大数据工具为辅，给用户提供一个更加快速找到大数据相关的工具平台。</td><td><code>大数据工具</code></td></tr><tr><td><a href="http://wxbbx.jh1z.com/" target="_blank" rel="noopener">微信百宝箱</a></td><td>微信工作者的智库，收集了微信相关的工具，包括编辑器、二维码生成器和插件等等。</td><td><code>微信工具</code></td></tr><tr><td><a href="http://www.we123.com/" target="_blank" rel="noopener">微导航</a></td><td>最好的微信小程序大全，收录最全、分类最准确。是集微信小程序商店、微信小游戏，微信公众号平台，微官网，微网址为一体的微信大全，微信二维码大全。微信应用号，微信订阅号，微信服务号，三位一体完美结合。更有微头条，微商大全，微信精华一站全包括。</td><td><code>微信小程序</code></td></tr><tr><td><a href="https://www.daohangtx.com/" target="_blank" rel="noopener">技术导航</a></td><td>国内首屈一指的技术教程活动导航分类平台，站点已累计收录数千网站，累计为中国网民提供多达数亿的访问点击，满足用户随时查阅最全面最权威的文章资讯教程</td><td><code>技术教程</code></td></tr><tr><td><a href="http://www.xiaolvji.com/" target="_blank" rel="noopener">效率集</a></td><td>效率集是一个让你聚合互联网资源，分享互联网资源，且可以高度定制的导航网站。你可以自定义网址导航及主页搜索引擎，还自带在线记事，在线任务。通过效率集的聚合搜索，你可以购物比价，在线看电影，在线词典，在线翻译等。通过效率集，你还可以把自己收藏的网站分享给他人</td><td><code>互联网资源</code></td></tr><tr><td><a href="http://www.paomianba.com/" target="_blank" rel="noopener">泡面吧</a></td><td>泡面吧，在线教育导航品牌，服务在线教育行业创业者、投资人。促进交流，让大家可以像泡面一样了解在线教育的名站动态。</td><td><code>教育导航</code></td></tr><tr><td><a href="https://oo1.win/" target="_blank" rel="noopener">炫猿</a></td><td>电影、云、音乐、软件、浏览器插件、娱乐、学习等类型网站导航</td><td><code>网站</code></td></tr><tr><td><a href="http://ilxdh.com/" target="_blank" rel="noopener">龙轩导航</a></td><td>龙轩导航提供最快捷的资源平台，让你迅速找到想要的资源，准确又方便快捷</td><td><code>资源</code></td></tr></tbody></table><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="http://www.6vhao.tv/" target="_blank" rel="noopener">6v电影网</a></td><td>好看的电影、电视剧、综艺在线观看和下载，还可以查看观看榜单</td><td><code>电影</code>、<code>电视剧</code>、<code>综艺</code></td></tr><tr><td><a href="https://landing.ant.design/index-cn" target="_blank" rel="noopener">Ant Design Landing</a></td><td>平台拥有丰富的各类首页模板，下载模板代码包，即可快速使用，也可使用首页编辑器，快速搭建一个属于你的专属首页</td><td><code>首页模板</code></td></tr><tr><td><a href="https://www.clipconverter.cc/" target="_blank" rel="noopener">ClipConverter.cc</a></td><td>单个Youtube视频下载，支持多种格式、多种清晰度。</td><td><code>Youtube视频下载</code></td></tr><tr><td><a href="http://www.jqhtml.com/down/" target="_blank" rel="noopener">down</a></td><td>提供了一些计算机领域的书籍的免费下载，前端书籍居多。</td><td><code>书籍下载</code></td></tr><tr><td><a href="https://www.studyjava.cn/douyin" target="_blank" rel="noopener">无水印下载</a></td><td>支持抖音、快手、微视等视频无水印下载</td><td><code>无水印下载</code></td></tr><tr><td><a href="https://www.cn-ki.net/" target="_blank" rel="noopener">iData</a></td><td>iData知识检索—免费下载学术文献，知网免费下载，全球最大的知网镜像。</td><td><code>学术文献</code></td></tr><tr><td><a href="http://subhd.com/" target="_blank" rel="noopener">Sub HD</a></td><td>Sub HD为影视爱好者们提供交流字幕的平台，你可以在这里找到并下载字幕，对字幕打分和评论，也可以上传字幕与大家分享。</td><td><code>字幕</code></td></tr><tr><td><a href="https://alpha.wallhaven.cc/random" target="_blank" rel="noopener">wallhaven.cc</a></td><td>电脑壁纸下载</td><td><code>电脑壁纸</code></td></tr><tr><td><a href="http://cv.qiaobutang.com/" target="_blank" rel="noopener">乔布简历</a></td><td>乔布简历为广大大学生及应届毕业生提供各行业最新最全的中英文个人求职简历模板表格免费下载，以及大量关于简历写作技巧的文章，致力于帮助求职者打造最专业的简历。</td><td><code>简历模板</code>、<code>简历技巧</code></td></tr><tr><td><a href="http://doc.hiwenku.com/" target="_blank" rel="noopener">嗨文库</a></td><td>支持百度文库文档免券下载，支持word、PPT、excel等格式原文件下载。</td><td><code>百度文库</code></td></tr><tr><td><a href="http://www.kengso.com/" target="_blank" rel="noopener">坑搜网</a></td><td>坑搜网网盘搜索是专业的百度云搜索引擎，实时收录百度云、百度网盘等资源，每天更新各类高清电影、视频、种子、小说等网盘资源，真正你懂的网盘搜索神器！</td><td><code>百度云</code>、<code>网盘</code></td></tr><tr><td><a href="http://www.ttmeiju.vip/" target="_blank" rel="noopener">天天美剧</a></td><td>天天美剧(ttmeiju.vip)第一时间为您提供最火最新的高清美剧下载,高清美剧在线观看.天天美剧是一个非盈利性美剧爱好者组织，我们的宗旨是：分享快乐，打造国内最顶级的BT美剧片源分享平台</td><td><code>美剧</code></td></tr><tr><td><a href="https://www.zimuku.cn/" target="_blank" rel="noopener">字幕库</a></td><td>字幕下载</td><td><code>字幕</code></td></tr><tr><td><a href="http://www.zimuzu.tv/" target="_blank" rel="noopener">字幕组</a></td><td>字幕组网站是由爱好者成员成立的网站，继续为您翻译最新最快的海外影视剧字幕,美剧,日剧,电影最新字幕下载</td><td><code>字幕</code></td></tr><tr><td><a href="http://www.dysfz.vip/" target="_blank" rel="noopener">电影首发站</a></td><td>国内最优秀的高清电影下载网站，每天更新迅雷中英双字电影百度云盘下载，搜集和分享高清中英双字电影百度云盘下载站，致力于构建最大的高清电影下载汇聚地，迅雷电影下载、免费电影下载尽在电影首发站高清电影下载站。</td><td><code>电影下载</code>、<code>网盘</code></td></tr><tr><td><a href="https://www.qpg123.com/" target="_blank" rel="noopener">青苹果影院</a></td><td>青苹果影院是最新最全的电影网站，迅雷免费下载观看随时随地看电影大片，青苹果电影网专注于电影在线观看服务。</td><td><code>电影</code></td></tr></tbody></table><h2 id="边学边玩"><a href="#边学边玩" class="headerlink" title="边学边玩"></a>边学边玩</h2><table><thead><tr><th>站点名称</th><th>描述</th><th>标签</th></tr></thead><tbody><tr><td><a href="https://checkio.org/" target="_blank" rel="noopener">Check iO</a></td><td>一款需要你使用 Python 或 Javascript 来推进的页游</td><td><code>Python</code>、<code>Javascript</code></td></tr><tr><td><a href="https://www.playcodemonkey.com/" target="_blank" rel="noopener">Code Monkey</a></td><td>通过编写代码来抓住香蕉。主要用于教师教学生们学习编程。（付费的）</td><td><code>付费学习</code></td></tr><tr><td><a href="https://www.codewars.com/" target="_blank" rel="noopener">Codewars</a></td><td>通过跟他人的实际挑战赛达到逐步掌握编程语言的目的。支持 JavaScript， Python， C#， Java， Python 等。</td><td><code>挑战赛</code></td></tr><tr><td><a href="https://www.codingame.com/start" target="_blank" rel="noopener">CodinGame</a></td><td>解决具有挑战性的编码问题，基本上支持所有编程语言。</td><td><code>编码问题</code></td></tr><tr><td><a href="http://www.cyber-dojo.org/" target="_blank" rel="noopener">Cyber Dojo</a></td><td>程序员练习编程的一个地方，支持 JavaScript， Java， Python， PHP， Ruby 等。</td><td><code>练习编程</code></td></tr><tr><td><a href="http://play.elevatorsaga.com/" target="_blank" rel="noopener">Elevator Saga</a></td><td>一款电梯升降式游戏，一步步解决问题，如在第一关中，你要在最多 60 秒内运输 15 人。</td><td><code>电梯游戏</code></td></tr><tr><td><a href="http://www.flexboxdefense.com/" target="_blank" rel="noopener">Flexbox Defense</a></td><td>使用Flexbox定位属性进行防御的塔防游戏</td><td><code>Flexbox</code></td></tr><tr><td><a href="http://flexboxfroggy.com/" target="_blank" rel="noopener">Flexbox Froggy</a></td><td>使用CSS相关属性帮青蛙渡河</td><td><code>CSS</code>、<code>青蛙渡河</code></td></tr><tr><td><a href="https://screeps.com/" target="_blank" rel="noopener">Screeps</a></td><td>通过玩游戏来学习 JavaScript。据称是全球第一个面向程序员的大型多人在线沙盒游戏。</td><td><code>在线沙盒游戏</code>、<code>Javascript</code></td></tr><tr><td><a href="https://bezier.method.ac/" target="_blank" rel="noopener">The Bezier Game</a></td><td>在The Bezier Game游戏中，首先以动画的方式来演示一遍贝塞尔曲线画法，然后自己尝试去绘制。要注册看演示的提示，比要按Shift或Alt按等。</td><td><code>贝塞尔曲线</code></td></tr><tr><td><a href="https://vim-adventures.com/" target="_blank" rel="noopener">Vim Adventures</a></td><td>在游戏中学习Vim</td><td><code>Vim</code></td></tr><tr><td><a href="https://xss-game.appspot.com/" target="_blank" rel="noopener">XSS game</a></td><td>通过游戏的方式了解XSS的攻击方式以及如何防备</td><td><code>XSS</code></td></tr><tr><td><a href="https://codecombat.com/play" target="_blank" rel="noopener">极客战记</a></td><td>一个面向学生的通过把玩真正的游戏来学习计算机科学的平台。它是一个由上千玩家共同志愿维护的项目。支持 Java， JavaScript， Python， Lua， CoffeeScript。</td><td><code>游戏</code>、<code>计算机科学</code></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 稽古振今 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具网站 </tag>
            
            <tag> 实用值得收藏的站点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 五个核心概念</title>
      <link href="/articl/99fca78d.html"/>
      <url>/articl/99fca78d.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/a50ec10ee9b942fe93858b20243ebabb.jpeg" alt=""></p><a id="more"></a><h1 id="webpack-五个核心概念"><a href="#webpack-五个核心概念" class="headerlink" title="webpack 五个核心概念"></a>webpack 五个核心概念</h1><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>Loader 让 webpack 能够去处理那些非 JavaScript 文件(webpack 自身只理解<br>JavaScript)</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，<br>一直到重新定义环境中的变量等。</p><h2 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h2><p>模式(Mode)指示 webpack 使用相应模式的配置。</p><table><thead><tr><th align="center">选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td align="center">development</td><td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置<br>为 development。启用 NamedChunksPlugin 和<br>NamedModulesPlugin。</td><td>能让代码本地调试<br>运行的环境</td></tr><tr><td align="center">production</td><td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置<br>为 production。启用 FlagDependencyUsagePlugin,<br>FlagIncludedChunksPlugin, ModuleConcatenationPlugin,<br>NoEmitOnErrorsPlugin, OccurrenceOrderPlugin,<br>SideEffectsFlagPlugin 和 TerserPlugin。</td><td>能让代码优化上线<br>运行的环境</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebPack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5简单介绍</title>
      <link href="/articl/7b44a508.html"/>
      <url>/articl/7b44a508.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/abcedf8e184a4a01ba2b256955d0ca3b.jpeg" alt=""></p><a id="more"></a><h1 id="webpack5"><a href="#webpack5" class="headerlink" title="webpack5"></a>webpack5</h1><p>此版本重点关注以下内容:</p><ul><li>通过持久缓存提高构建性能.</li><li>使用更好的算法和默认值来改善长期缓存.</li><li>通过更好的树摇和代码生成来改善捆绑包大小.</li><li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</li><li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>npm i webpack@next webpack-cli -D</li></ul><h2 id="自动删除-Node-js-Polyfills"><a href="#自动删除-Node-js-Polyfills" class="headerlink" title="自动删除 Node.js Polyfills"></a>自动删除 Node.js Polyfills</h2><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。</p><p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。</p><p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。</p><p>迁移：</p><ul><li>尽可能尝试使用与前端兼容的模块。</li><li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。</li></ul><h2 id="Chunk-和模块-ID"><a href="#Chunk-和模块-ID" class="headerlink" title="Chunk 和模块 ID"></a>Chunk 和模块 ID</h2><p>添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。</p><p><code>chunkIds: "deterministic", moduleIds: "deterministic"</code></p><h2 id="Chunk-ID"><a href="#Chunk-ID" class="headerlink" title="Chunk ID"></a>Chunk ID</h2><p>你可以不用使用 <code>import(/* webpackChunkName: "name" */ "module")</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p><p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了</p><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><ol><li>webpack 现在能够处理对嵌套模块的 tree shaking</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inner.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">'./inner'</span>;</span><br><span class="line"><span class="keyword">export</span> { inner };</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></tbody></table></figure><p>在生产环境中, inner 模块暴露的 <code>b</code> 会被删除</p><ol start="2"><li>webpack 现在能够多个模块之前的关系</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { something } <span class="keyword">from</span> <span class="string">'./something'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当设置了<code>"sideEffects": false</code>时，一旦发现<code>test</code>方法没有使用，不但删除<code>test</code>，还会删除<code>"./something"</code></p><ol start="3"><li>webpack 现在能处理对 Commonjs 的 tree shaking</li></ol><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>webpack 4 默认只能输出 ES5 代码</p><p>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.</p><p>如：<code>output.ecmaVersion: 2015</code></p><h2 id="SplitChunk"><a href="#SplitChunk" class="headerlink" title="SplitChunk"></a>SplitChunk</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack5</span></span><br><span class="line">minSize: {</span><br><span class="line">  javascript: <span class="number">30000</span>,</span><br><span class="line">  style: <span class="number">50000</span>,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置缓存</span></span><br><span class="line">cache: {</span><br><span class="line">  <span class="comment">// 磁盘存储</span></span><br><span class="line">  type: <span class="string">"filesystem"</span>,</span><br><span class="line">  buildDependencies: {</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>缓存将存储到 <code>node_modules/.cache/webpack</code></p><h2 id="监视输出文件"><a href="#监视输出文件" class="headerlink" title="监视输出文件"></a>监视输出文件</h2><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。</p><p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。</p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><ul><li><code>entry: "./src/index.js</code></li><li><code>output.path: path.resolve(__dirname, "dist")</code></li><li><code>output.filename: "[name].js"</code></li></ul><h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><p><a href="https://github.com/webpack/changelog-v5" target="_blank" rel="noopener">https://github.com/webpack/changelog-v5</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebPack5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack详细配置</title>
      <link href="/articl/5cb45415.html"/>
      <url>/articl/5cb45415.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/256f40f171ae48459ab8e570c92a78db.jpeg" alt=""></p><a id="more"></a><h1 id="webpack详细配置-smile"><a href="#webpack详细配置-smile" class="headerlink" title="webpack详细配置:smile:"></a>webpack详细配置<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></h1><h2 id="webpack详细配置之entry"><a href="#webpack详细配置之entry" class="headerlink" title="webpack详细配置之entry"></a>webpack详细配置之entry</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">entry: 入口起点</span><br><span class="line">    1. string --&gt; './src/index.js'</span><br><span class="line">      单入口</span><br><span class="line">      打包形成一个chunk。 输出一个bundle文件。</span><br><span class="line">      此时chunk的名称默认是 main</span><br><span class="line">    2. array  --&gt; ['./src/index.js', './src/add.js']</span><br><span class="line">      多入口</span><br><span class="line">      所有入口文件最终只会形成一个chunk, 输出出去只有一个bundle文件。</span><br><span class="line">        --&gt; 只有在HMR功能中让html热更新生效~</span><br><span class="line">    3. object</span><br><span class="line">      多入口</span><br><span class="line">      有几个入口文件就形成几个chunk，输出几个bundle文件</span><br><span class="line">      此时chunk的名称是 key</span><br><span class="line"></span><br><span class="line">      --&gt; 特殊用法</span><br><span class="line">        {</span><br><span class="line">          // 所有入口文件最终只会形成一个chunk, 输出出去只有一个bundle文件。</span><br><span class="line">          index: ['./src/index.js', './src/count.js'], </span><br><span class="line">          // 形成一个chunk，输出一个bundle文件。</span><br><span class="line">          add: './src/add.js'</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>webpack.config.js文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: {</span><br><span class="line">    index: [<span class="string">'./src/index.js'</span>, <span class="string">'./src/count.js'</span>], </span><br><span class="line">    add: <span class="string">'./src/add.js'</span></span><br><span class="line">  },</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="webpack详细配置之output"><a href="#webpack详细配置之output" class="headerlink" title="webpack详细配置之output"></a>webpack详细配置之output</h2><ul><li><p><code>filename</code>:文件名称（指定名称+目录）。</p></li><li><p><code>path</code>:输出文件目录（将来所有资源输出的公共目录）。</p></li><li><p><code>publicPath</code>:所有资源引入公共路径前缀 –&gt; ‘imgs/a.jpg’ –&gt; ‘/imgs/a.jpg’。</p></li><li><p><code>chunkFilename</code>:非入口chunk的名称，如：</p><p>第一种情况：通过import语法，将文件单独分割成一个chunk，这个chunk的名称会采用这个<code>chunkFilename: 'js/[name]_chunk.js'</code>这个命名。</p><p>第二种情况： 通过optimization将node_modules分割成单独的一个chunk，这个chunk的名称也会采用这个<code>chunkFilename: 'js/[name]_chunk.js'</code>这个命名。</p><p>关于代码分割详细看：<a href="https://aqingya.cn/2020/07/16/56/#code-split-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2" target="_blank" rel="noopener">这里。</a></p></li><li><p><code>library</code>:整个库向外暴露的变量名。</p></li><li><p><code>llibraryTarget: 'window'</code> 变量名添加到哪个上 browser。</p></li><li><p><code>libraryTarget: 'global'</code> 变量名添加到哪个上 node。</p><br></li></ul><p>webpack.config.js文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 所有资源引入公共路径前缀 --&gt; 'imgs/a.jpg' --&gt; '/imgs/a.jpg'</span></span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'js/[name]_chunk.js'</span>, <span class="comment">// 非入口chunk的名称</span></span><br><span class="line">    <span class="comment">// library: '[name]', // 整个库向外暴露的变量名</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'window' // 变量名添加到哪个上 browser</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'global' // 变量名添加到哪个上 node</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'commonjs'</span></span><br><span class="line">  },</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="webpack详细配置之module"><a href="#webpack详细配置之module" class="headerlink" title="webpack详细配置之module"></a>webpack详细配置之module</h2><ul><li><code>test: /\.css$/</code> :正则表达式，用来检测文件。</li><li><code>loader: 'eslint-loader'</code>单个loader用loader。</li><li><code>use: ['style-loader', 'css-loader']</code> 多个loader用use。</li><li><code>exclude: /node_modules/</code>排除node_modules下的js文件。</li><li><code>include: resolve(__dirname, 'src')</code> 只检查 src 下的js文件。</li><li><code>enforce: 'pre'</code> 优先执行。</li><li><code>enforce: 'post'</code> 延后执行。</li><li><code>oneOf: []</code> 以下配置只会生效一个。</li></ul><p>webpack.config.js文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 多个loader用use</span></span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="comment">// 排除node_modules下的js文件</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 只检查 src 下的js文件</span></span><br><span class="line">        include: resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        <span class="comment">// 延后执行</span></span><br><span class="line">        <span class="comment">// enforce: 'post',</span></span><br><span class="line">        <span class="comment">// 单个loader用loader</span></span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: {}</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">        oneOf: []</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="webpack详细配置之resolve"><a href="#webpack详细配置之resolve" class="headerlink" title="webpack详细配置之resolve"></a>webpack详细配置之resolve</h2><p>resolve解析模块的规则</p><ul><li>alias 配置解析模块路径别名: 优点简写路径 缺点路径没有提示。</li><li>extensions 配置省略文件路径的后缀名。<span style="background-color:#ff0">注意不能有相同的文件名。</span></li><li>modules 告诉 webpack 解析模块是去找哪个目录，不用一个一个向上级目录去寻找，直接一步到位。</li></ul><p>webpack.config.js文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  <span class="comment">// 解析模块的规则</span></span><br><span class="line">  resolve: {</span><br><span class="line">    <span class="comment">// 配置解析模块路径别名: 优点简写路径 缺点路径没有提示</span></span><br><span class="line">    alias: {</span><br><span class="line">      $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 配置省略文件路径的后缀名</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">    <span class="comment">// 告诉 webpack 解析模块是去找哪个目录</span></span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="webpack详细配置之-devserver"><a href="#webpack详细配置之-devserver" class="headerlink" title="webpack详细配置之 devserver"></a>webpack详细配置之 devserver</h2><p>webpack.config.js文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">devServer: {</span><br><span class="line">    <span class="comment">// 运行代码的目录</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 监视 contentBase 目录下的所有文件，一旦文件变化就会 reload</span></span><br><span class="line">    watchContentBase: <span class="literal">true</span>,</span><br><span class="line">    watchOptions: {</span><br><span class="line">      <span class="comment">// 忽略文件</span></span><br><span class="line">      ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">5000</span>,</span><br><span class="line">    <span class="comment">// 域名</span></span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启HMR功能</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">    clientLogLevel: <span class="string">'none'</span>,</span><br><span class="line">    <span class="comment">// 除了一些基本启动信息以外，其他内容都不要显示</span></span><br><span class="line">    quiet: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 如果出错了，不要全屏提示~</span></span><br><span class="line">    overlay: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 服务器代理 --&gt; 解决开发环境跨域问题</span></span><br><span class="line">    proxy: {</span><br><span class="line">      <span class="comment">// 一旦devServer(5000)服务器接受到 /api/xxx 的请求，就会把请求转发到另外一个服务器(3000)</span></span><br><span class="line">      <span class="string">'/api'</span>: {</span><br><span class="line">        target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">        <span class="comment">// 发送请求时，请求路径重写：将 /api/xxx --&gt; /xxx （去掉/api）</span></span><br><span class="line">        pathRewrite: {</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h2 id="webpack详细配置之optimization"><a href="#webpack详细配置之optimization" class="headerlink" title="webpack详细配置之optimization"></a>webpack详细配置之optimization</h2><ul><li><code>splitChunks</code> 代码分割。</li><li><code>runtimeChunk</code> 将当前模块的记录其他模块的hash单独打包为一个文件 runtime。解决：修改a文件导致b文件的contenthash变化。</li><li><code>minimizer</code>配置生产环境的压缩方案：js和css。</li></ul><p>webpack.config.js文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> TerserWebpackPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    chunkFilename: <span class="string">'js/[name].[contenthash:10]_chunk.js'</span></span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  resolve: {</span><br><span class="line">    alias: {</span><br><span class="line">      $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    },</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">  },</span><br><span class="line">  optimization: {</span><br><span class="line">    splitChunks: {</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">      <span class="comment">// 默认值，可以不写~</span></span><br><span class="line">      <span class="comment">/* minSize: 30 * 1024, // 分割的chunk最小为30kb</span></span><br><span class="line"><span class="comment">      maxSiza: 0, // 最大没有限制</span></span><br><span class="line"><span class="comment">      minChunks: 1, // 要提取的chunk最少被引用1次</span></span><br><span class="line"><span class="comment">      maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line"><span class="comment">      maxInitialRequests: 3, // 入口js文件最大并行请求数量</span></span><br><span class="line"><span class="comment">      automaticNameDelimiter: '~', // 名称连接符</span></span><br><span class="line"><span class="comment">      name: true, // 可以使用命名规则</span></span><br><span class="line"><span class="comment">      cacheGroups: {</span></span><br><span class="line"><span class="comment">        // 分割chunk的组</span></span><br><span class="line"><span class="comment">        // node_modules文件会被打包到 vendors 组的chunk中。--&gt; vendors~xxx.js</span></span><br><span class="line"><span class="comment">        // 满足上面的公共规则，如：大小超过30kb，至少被引用一次。</span></span><br><span class="line"><span class="comment">        vendors: {</span></span><br><span class="line"><span class="comment">          test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">          // 优先级</span></span><br><span class="line"><span class="comment">          priority: -10</span></span><br><span class="line"><span class="comment">        },</span></span><br><span class="line"><span class="comment">        default: {</span></span><br><span class="line"><span class="comment">          // 要提取的chunk最少被引用2次</span></span><br><span class="line"><span class="comment">          minChunks: 2,</span></span><br><span class="line"><span class="comment">          // 优先级</span></span><br><span class="line"><span class="comment">          priority: -20,</span></span><br><span class="line"><span class="comment">          // 如果当前要打包的模块，和之前已经被提取的模块是同一个，就会复用，而不是重新打包模块</span></span><br><span class="line"><span class="comment">          reuseExistingChunk: true</span></span><br><span class="line"><span class="comment">        } </span></span><br><span class="line"><span class="comment">      }*/</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// 将当前模块的记录其他模块的hash单独打包为一个文件 runtime</span></span><br><span class="line">    <span class="comment">// 解决：修改a文件导致b文件的contenthash变化</span></span><br><span class="line">    runtimeChunk: {</span><br><span class="line">      name: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">${entrypoint.name}</span>`</span></span><br><span class="line">    },</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="comment">// 配置生产环境的压缩方案：js和css</span></span><br><span class="line">      <span class="keyword">new</span> TerserWebpackPlugin({</span><br><span class="line">        <span class="comment">// 开启缓存</span></span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 开启多进程打包</span></span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 启动source-map</span></span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      })</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebPack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Module not found</title>
      <link href="/articl/b8589b4a.html"/>
      <url>/articl/b8589b4a.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/9e16f6e0531e479193ebcb3719abd6ed.jpeg" alt=""></p><a id="more"></a><h1 id="Module-not-found-Error-Can’t-resolve-‘XXX’-in-‘XXXX’"><a href="#Module-not-found-Error-Can’t-resolve-‘XXX’-in-‘XXXX’" class="headerlink" title="Module not found: Error: Can’t resolve ‘XXX’ in ‘XXXX’"></a>Module not found: Error: Can’t resolve ‘XXX’ in ‘XXXX’</h1><h2 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h2><p>控制台运行webpack/npm时出现</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module not found: Error: Can't resolve 'XXX' in 'XXXX'</span><br></pre></td></tr></tbody></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i XXX --save</span><br></pre></td></tr></tbody></table></figure><br><p>重新运行即可<br>如果提示<code>ERROR</code><br>尝试执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall XXX</span><br><span class="line">npm i XXX --save</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebPack </tag>
            
            <tag> nodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 性能优化</title>
      <link href="/articl/c15f5b9f.html"/>
      <url>/articl/c15f5b9f.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/f2aedd087b1941baa9f31ee14591f6c7.jpg" alt=""></p><a id="more"></a><h1 id="webpack-性能优化"><a href="#webpack-性能优化" class="headerlink" title="webpack 性能优化"></a>webpack 性能优化</h1><h2 id="HMR-（热模块替换）"><a href="#HMR-（热模块替换）" class="headerlink" title="HMR （热模块替换）"></a>HMR （热模块替换）</h2><p>HMR: hot module replacement 热模块替换 / 模块热替换</p><p>作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块）</p><p>极大提升构建速度</p><p>1、<strong>样式文件</strong>：可以使用HMR功能：因为style-loader内部实现了~</p><p>2、<strong>js文件</strong>：默认不能使用HMR功能 –&gt; 需要修改js代码，添加支持HMR功能的代码</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) {</span><br><span class="line">    <span class="comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span></span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">'./print.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="comment">// 方法会监听 print.js 文件的变化，一旦发生变化，其他模块不会重新打包构建。</span></span><br><span class="line">        <span class="comment">// 会执行后面的回调函数</span></span><br><span class="line">        <span class="comment">//print();</span></span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong><span style="background-color:#ff0">注意：HMR功能对js的处理，只能处理非入口js文件的其他文件。</span></strong></p><p>3、<strong>html文件</strong>: 默认不能使用HMR功能.同时会导致问题：html文件不能热更新了~ （不用做HMR功能）</p><p>​ 解决：修改entry入口，将html文件引入</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>]</span><br></pre></td></tr></tbody></table></figure><br><p>修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改entry入口，将html文件引入</span></span><br><span class="line">    entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>],</span><br><span class="line">    </span><br><span class="line">    output: {</span><br><span class="line">        filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// loader的配置</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理less资源</span></span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理css资源</span></span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理图片资源</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: {</span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    <span class="comment">// 关闭es6模块化</span></span><br><span class="line">                    esModule: <span class="literal">false</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理html中img资源</span></span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                loader: <span class="string">'html-loader'</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理其他资源</span></span><br><span class="line">                exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: {</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'media'</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// plugins的配置</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            template: <span class="string">'./src/index.html'</span></span><br><span class="line">        })</span><br><span class="line">    ],</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    devServer: {</span><br><span class="line">        contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 开启HMR功能</span></span><br><span class="line">        <span class="comment">// 当修改了webpack配置，新配置要想生效，必须重新webpack服务</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在<code>devServer</code>中开启hot就可以。</p><h2 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h2><p><strong>source-map:</strong> <span style="background-color:#ff0">一种 提供源代码到构建后代码映射 技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）</span></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map  //devtool属性的值</span><br></pre></td></tr></tbody></table></figure><br><p>source-map：外部</p><p>  错误代码准确信息 和 源代码的错误位置</p><p>inline-source-map：内联</p><p>  只生成一个内联source-map</p><p>  错误代码准确信息 和 源代码的错误位置</p><p>hidden-source-map：外部</p><p>  错误代码错误原因，但是没有错误位置</p><p>  不能追踪源代码错误，只能提示到构建后代码的错误位置</p><p>eval-source-map：内联</p><p>  每一个文件都生成对应的source-map，都在eval</p><p>  错误代码准确信息 和 源代码的错误位置</p><p>nosources-source-map：外部</p><p>   错误代码准确信息, 但是没有任何源代码信息</p><p>cheap-source-map：外部</p><p>  错误代码准确信息 和 源代码的错误位置</p><p>  只能精确的行</p><p>cheap-module-source-map：外部</p><p>  错误代码准确信息 和 源代码的错误位置</p><p>  module会将loader的source map加入</p><br><p><strong><span style="color:red">内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快</span></strong></p><br><p>开发环境：速度快，调试更友好</p><p>速度快(eval&gt;inline&gt;cheap&gt;…)</p><p>   eval-cheap-souce-map    速度最快</p><p>   eval-source-map  速度其次，<strong>在开发环境中推荐使用</strong>，vue中的脚手架也是采用的eval-source-map</p><p>调试更友好</p><p>​   souce-map</p><p>   cheap-module-souce-map</p><p>   cheap-souce-map</p><p><span style="background-color:#ff0">eval-source-map / eval-cheap-module-souce-map</span></p><br><p>生产环境：源代码要不要隐藏? 调试要不要更友好</p><p>内联会让代码体积变大，所以在生产环境不用内联</p><p>  nosources-source-map   全部隐藏</p><p>  hidden-source-map   只隐藏源代码，会提示构建后代码错误信息</p><p><span style="background-color:#ff0">source-map / cheap-module-souce-map</span></p><br><p>修改配置：<span style="background-color:#ff0">在<code>module.exports</code>中加入<code>devtool</code>属性即可</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  开发环境配置：能让代码运行</span></span><br><span class="line"><span class="comment">    运行项目指令：</span></span><br><span class="line"><span class="comment">      webpack 会将打包结果输出出去</span></span><br><span class="line"><span class="comment">      npx webpack-dev-server 只会在内存中编译打包，没有输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>],</span><br><span class="line">    output: {</span><br><span class="line">        filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// loader的配置</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理less资源</span></span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理css资源</span></span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理图片资源</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: {</span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    <span class="comment">// 关闭es6模块化</span></span><br><span class="line">                    esModule: <span class="literal">false</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理html中img资源</span></span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                loader: <span class="string">'html-loader'</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 处理其他资源</span></span><br><span class="line">                exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: {</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'media'</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// plugins的配置</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            minify: {</span><br><span class="line">                <span class="comment">// 移除空格</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 移除注释</span></span><br><span class="line">                removeComments: <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    ],</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    devServer: {</span><br><span class="line">        contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置source-map</span></span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span></span><br><span class="line">    </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="oneOf"><a href="#oneOf" class="headerlink" title="oneOf"></a>oneOf</h2><p>配置完oneOf，它以下的loader只会匹配一个<br><span style="background-color:#ff0">注意：不能有两个配置处理同一种类型文件,如果有就将一个提取上去，放外面就好了。</span></p><p>修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  {</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: {</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">      </span><br><span class="line">  <span class="comment">//-----------------------------------------------------------------------    </span></span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">        </span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">        <span class="comment">// 注意：不能有两个配置处理同一种类型文件,如果有就将一个提取上去，放外面就好了。</span></span><br><span class="line">        oneOf: [</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">          },</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">              先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: {</span><br><span class="line">              presets: [</span><br><span class="line">                [</span><br><span class="line">                  <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                  {</span><br><span class="line">                    useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                    corejs: {<span class="attr">version</span>: <span class="number">3</span>},</span><br><span class="line">                    targets: {</span><br><span class="line">                      chrome: <span class="string">'60'</span>,</span><br><span class="line">                      firefox: <span class="string">'50'</span></span><br><span class="line">                    }</span><br><span class="line">                  }</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: {</span><br><span class="line">              limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">              name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">              esModule: <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'html-loader'</span></span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: {</span><br><span class="line">              outputPath: <span class="string">'media'</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">      </span><br><span class="line">   <span class="comment">//-----------------------------------------------------------------------       </span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">      filename: <span class="string">'css/built.css'</span></span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>主要针对生产环境的缓存</p><p><span style="background-color:#ff0">注意：有可能是面试题 注意。</span></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">缓存：</span><br><span class="line">  babel缓存</span><br><span class="line">    cacheDirectory: true</span><br><span class="line">    --&gt; 让第二次打包构建速度更快</span><br><span class="line">    </span><br><span class="line">  文件资源缓存  修改 filename: 'js/built.[contenthash:10].js'</span><br><span class="line">    hash: 每次wepack构建时会生成一个唯一的hash值。</span><br><span class="line">      问题: 因为js和css同时使用一个hash值。</span><br><span class="line">        如果重新打包，会导致所有缓存失效。（可能我却只改动一个文件）</span><br><span class="line">    chunkhash：根据chunk生成的hash值。如果打包来源于同一个chunk，那么hash值就一样</span><br><span class="line">      问题: js和css的hash值还是一样的</span><br><span class="line">        因为css是在js中被引入的，所以同属于一个chunk</span><br><span class="line">    contenthash: 根据文件的内容生成hash值。不同文件hash值一定不一样    </span><br><span class="line">    --&gt; 让代码上线运行缓存更好使用</span><br></pre></td></tr></tbody></table></figure><p>设置配置文件：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="string">'css-loader'</span>,</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">            ident: <span class="string">'postcss'</span>,</span><br><span class="line">            plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">//------------------------------------------------------</span></span><br><span class="line">        filename: <span class="string">'js/built.[contenthash:10].js'</span>,</span><br><span class="line">        <span class="comment">//------------------------------------------------------</span></span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [{</span><br><span class="line">                <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                <span class="comment">// 优先执行</span></span><br><span class="line">                enforce: <span class="string">'pre'</span>,</span><br><span class="line">                loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">                options: {</span><br><span class="line">                    fix: <span class="literal">true</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">                <span class="comment">// 注意：不能有两个配置处理同一种类型文件</span></span><br><span class="line">                oneOf: [{</span><br><span class="line">                        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        use: [...commonCssLoader]</span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">                    },</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                      正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">                      当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">                        先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    {</span><br><span class="line">                        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                        options: {</span><br><span class="line">                            presets: [</span><br><span class="line">                                [</span><br><span class="line">                                    <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                                    {</span><br><span class="line">                                        useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                                        corejs: { <span class="attr">version</span>: <span class="number">3</span> },</span><br><span class="line">                                        targets: {</span><br><span class="line">                                            chrome: <span class="string">'60'</span>,</span><br><span class="line">                                            firefox: <span class="string">'50'</span></span><br><span class="line">                                        }</span><br><span class="line">                                    }</span><br><span class="line">                                ]</span><br><span class="line">                            ],</span><br><span class="line">                            </span><br><span class="line">                    <span class="comment">//------------------------------------------------        </span></span><br><span class="line">                            <span class="comment">// 开启babel缓存</span></span><br><span class="line">                            <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">                            cacheDirectory: <span class="literal">true</span></span><br><span class="line">                    <span class="comment">//------------------------------------------------ </span></span><br><span class="line">                        }</span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">                        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                        options: {</span><br><span class="line">                            limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                            name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                            outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                            esModule: <span class="literal">false</span></span><br><span class="line">                        }</span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                        loader: <span class="string">'html-loader'</span></span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">                        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                        options: {</span><br><span class="line">                            outputPath: <span class="string">'media'</span></span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                ]</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">            <span class="comment">//------------------------------------------------ </span></span><br><span class="line">            filename: <span class="string">'css/built.[contenthash:10].css'</span></span><br><span class="line">            <span class="comment">//------------------------------------------------ </span></span><br><span class="line">        }),</span><br><span class="line">        <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            minify: {</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                removeComments: <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    ],</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    devtool: <span class="string">'source-map'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h2><p><strong>tree shaking</strong>：去除无用代码<br>  前提：1. 必须使用ES6模块化 2. 开启production环境<br>  作用: 减少代码体积</p><br><p><span style="background-color:#ff0">在package.json中配置</span><br>   “sideEffects”: false 所有代码都没有副作用（都可以进行tree shaking）<br>   <strong>问题</strong>：可能会把css / @babel/polyfill （副作用）文件干掉<br>   “sideEffects”: [“<em>.css”, “</em>.less”]</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"sideEffects": ["*.css", "*.less"]</span><br></pre></td></tr></tbody></table></figure><h2 id="code-split-代码分割"><a href="#code-split-代码分割" class="headerlink" title="code split (代码分割)"></a>code split (代码分割)</h2><p>将一个大的js代码块 分割成多个小的代码块，并行加载，总而加快速度。</p><p>有三种分割方式：</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>有两种配置</p><p>1、单入口 —默认输出单个文件</p><p>2、多入口 —有几个入口输出几个入口</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716155656.png" alt=""></p><p>修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  <span class="comment">// entry: './src/js/index.js',</span></span><br><span class="line">  entry: {</span><br><span class="line">    <span class="comment">// 多入口：有一个入口，最终输出就有一个bundle</span></span><br><span class="line">    index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    test: <span class="string">'./src/js/test.js'</span></span><br><span class="line">  },</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">  output: {</span><br><span class="line">    <span class="comment">// [name]：取文件名</span></span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>有两种配置</p><p>1、单入口 —只将node_modules中代码封装打包</p><p>2、多入口 —除了打包node_modules中代码，还会分析这些多入口有没有公共的依赖。<strong>如果有会打包成单独一个chunk</strong></p><p><span style="background-color:#ff0">第二种分割代码不经常使用</span></p><p>我们在index.js和test.js中都引入jquery。</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200717090022.png" alt=""></p><p>修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  <span class="comment">// entry: './src/js/index.js',</span></span><br><span class="line">  entry: {</span><br><span class="line">    index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    test: <span class="string">'./src/js/test.js'</span></span><br><span class="line">  },</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">  output: {</span><br><span class="line">    <span class="comment">// [name]：取文件名</span></span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 可以将node_modules中代码单独打包一个chunk最终输出</span></span><br><span class="line"><span class="comment">    2. 自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  optimization: {</span><br><span class="line">    splitChunks: {</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h3 id="第三种（常用）"><a href="#第三种（常用）" class="headerlink" title="第三种（常用）"></a>第三种（常用）</h3><p>1、我们一般采用单入口，配合<code>optimization</code>,将node_modules中代码单独打包一个chunk，</p><p>2、其次我们还希望其他的js文件可以单独打包成一个文件，这样我们就使用js代码来实现。如：在头入口index.js中这样写。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  通过js代码，让某个文件被单独打包成一个chunk</span></span><br><span class="line"><span class="comment">  import动态导入语法：能将某个文件单独打包</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//webpackChunkName: 'test' 为它取一个名字。</span></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test' */</span><span class="string">'./test'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">// 文件加载成功~</span></span><br><span class="line">        <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件加载成功~'</span>);</span><br><span class="line"></span><br><span class="line">    })</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件加载失败~'</span>);</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><p>修改 <code>webpack.config.js</code> 中的配置</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">  output: {</span><br><span class="line">    <span class="comment">// [name]：取文件名</span></span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 可以将node_modules中代码单独打包一个chunk最终输出</span></span><br><span class="line"><span class="comment">    2. 自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  optimization: {</span><br><span class="line">    splitChunks: {</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">    <span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716164340.png" alt=""></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716164207.png" alt=""></p><h2 id="懒加载和预加载"><a href="#懒加载和预加载" class="headerlink" title="懒加载和预加载"></a>懒加载和预加载</h2><p><strong>懒加载~</strong>：当文件需要使用时才加载~，不是上来就加载而是触发某些条件才会加载的。<span style="background-color:#ff0"><strong>利用代码分割的思路，将代码分割的语法import放到一个异步函数当中，等条件触发，再来加载懒加载这些代码。</strong></span></p><p><strong>预加载 prefetch</strong>：会在使用之前，提前加载js文件</p><br><p>正常加载可以认为是并行加载（同一时间加载多个文件）</p><p>预加载 prefetch：等其他资源加载完毕，浏览器空闲了，再偷偷加载资源。<span style="background-color:#ff0">(缺点：兼容性差)</span></p><br><p>index.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'index.js文件被加载了~'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// import { mul } from './test';</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 懒加载~：当文件需要使用时才加载~</span></span><br><span class="line">    <span class="comment">// 预加载 prefetch：会在使用之前，提前加载js文件 </span></span><br><span class="line">    <span class="comment">// 正常加载可以认为是并行加载（同一时间加载多个文件）  </span></span><br><span class="line">    <span class="comment">// 预加载 prefetch：等其他资源加载完毕，浏览器空闲了，再偷偷加载资源</span></span><br><span class="line">    <span class="comment">//-------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">import</span> ( <span class="comment">/* webpackChunkName: 'test', webpackPrefetch: true */</span> <span class="string">'./test'</span>).then(<span class="function">(<span class="params">{ mul }</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">    });</span><br><span class="line">    <span class="comment">//-------------------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>test.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'test.js文件被加载了~'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716171931.png" alt=""></p><p><strong>同时利用前面的inport 进行代码分割，所以有两个js文件。</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716171825.png" alt=""></p><p><strong>点击按钮之后才会加载test.js文件</strong></p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716172037.png" alt=""></p><h2 id="pwd-离线可访问"><a href="#pwd-离线可访问" class="headerlink" title="pwd(离线可访问)"></a>pwd(离线可访问)</h2><p>PWA: 渐进式网络开发应用程序(离线可访问)</p><p>workbox –&gt; workbox-webpack-plugin</p><p>第一步：下载插件，引入插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i workbox-webpack-plugin -D</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">      filename: <span class="string">'css/built.[contenthash:10].css'</span></span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    }),</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW({</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">        2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        生成一个 serviceworker 配置文件~</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      clientsClaim: <span class="literal">true</span>,</span><br><span class="line">      skipWaiting: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">  ]</span><br></pre></td></tr></tbody></table></figure><p>第二步：在入口文件中注册<code>serviceWorker</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { mul } <span class="keyword">from</span> <span class="string">'./test'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 注册serviceWorker</span></span><br><span class="line"><span class="comment">// 处理兼容性问题</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) {</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; {</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">//eslint-disable-next-line</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册成功了~'</span>);</span><br><span class="line">      })</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">//eslint-disable-next-line</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册失败了~'</span>);</span><br><span class="line">      });</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br></pre></td></tr></tbody></table></figure><p>第三步： 我们要注意一些事项</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. eslint不认识 window、navigator全局变量</span><br><span class="line"> 解决：需要修改package.json中eslintConfig配置</span><br><span class="line">   "env": {</span><br><span class="line">     "browser": true // 支持浏览器端全局变量</span><br><span class="line">   }</span><br><span class="line">2. sw代码必须运行在服务器上</span><br><span class="line">   --&gt; nodejs</span><br><span class="line">   --&gt;</span><br><span class="line">     npm i serve -g</span><br><span class="line">     serve -s build 启动服务器，将build目录下所有资源作为静态资源暴露出去</span><br></pre></td></tr></tbody></table></figure><br><p>完整 <code>webpack.config.js</code> 中的配置：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  {</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: {</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">        <span class="comment">// 注意：不能有两个配置处理同一种类型文件</span></span><br><span class="line">        oneOf: [</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">          },</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">              先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: {</span><br><span class="line">              presets: [</span><br><span class="line">                [</span><br><span class="line">                  <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                  {</span><br><span class="line">                    useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                    corejs: { <span class="attr">version</span>: <span class="number">3</span> },</span><br><span class="line">                    targets: {</span><br><span class="line">                      chrome: <span class="string">'60'</span>,</span><br><span class="line">                      firefox: <span class="string">'50'</span></span><br><span class="line">                    }</span><br><span class="line">                  }</span><br><span class="line">                ]</span><br><span class="line">              ],</span><br><span class="line">              <span class="comment">// 开启babel缓存</span></span><br><span class="line">              <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">              cacheDirectory: <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: {</span><br><span class="line">              limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">              name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">              esModule: <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'html-loader'</span></span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: {</span><br><span class="line">              outputPath: <span class="string">'media'</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">      filename: <span class="string">'css/built.[contenthash:10].css'</span></span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    }),</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------      </span></span><br><span class="line">    <span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW({</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">        2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        生成一个 serviceworker 配置文件~</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      clientsClaim: <span class="literal">true</span>,</span><br><span class="line">      skipWaiting: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------      </span></span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'source-map'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="多进程打包"><a href="#多进程打包" class="headerlink" title="多进程打包"></a>多进程打包</h2><p>我们一般给 babel-loader 来用 ,<span style="background-color:#ff0">如果babel-loader处理的js文件大可以使用，如果较小，不推荐使用多进程打包。</span></p><p>1、下载安装包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install  thread-loader -D</span><br></pre></td></tr></tbody></table></figure><p>2、修改配置文件</p><p>原配置文件：babel-loader</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716191203.png" alt=""></p><p>配置之后的文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  {</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: {</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 以下loader只会匹配一个</span></span><br><span class="line">        <span class="comment">// 注意：不能有两个配置处理同一种类型文件</span></span><br><span class="line">        oneOf: [</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">          },</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">              先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">            </span><br><span class="line"> <span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line">            </span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            use: [</span><br><span class="line">              <span class="comment">/* </span></span><br><span class="line"><span class="comment">                开启多进程打包。 </span></span><br><span class="line"><span class="comment">                进程启动大概为600ms，进程通信也有开销。</span></span><br><span class="line"><span class="comment">                只有工作消耗时间比较长，才需要多进程打包</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">              {</span><br><span class="line">                loader: <span class="string">'thread-loader'</span>,</span><br><span class="line">                options: {</span><br><span class="line">                  workers: <span class="number">2</span> <span class="comment">// 进程2个</span></span><br><span class="line">                }</span><br><span class="line">              },</span><br><span class="line">              {</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: {</span><br><span class="line">                  presets: [</span><br><span class="line">                    [</span><br><span class="line">                      <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                      {</span><br><span class="line">                        useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                        corejs: { <span class="attr">version</span>: <span class="number">3</span> },</span><br><span class="line">                        targets: {</span><br><span class="line">                          chrome: <span class="string">'60'</span>,</span><br><span class="line">                          firefox: <span class="string">'50'</span></span><br><span class="line">                        }</span><br><span class="line">                      }</span><br><span class="line">                    ]</span><br><span class="line">                  ],</span><br><span class="line">                  <span class="comment">// 开启babel缓存</span></span><br><span class="line">                  <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">                  cacheDirectory: <span class="literal">true</span></span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">            ]</span><br><span class="line">          },</span><br><span class="line"> <span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: {</span><br><span class="line">              limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">              name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">              esModule: <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'html-loader'</span></span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: {</span><br><span class="line">              outputPath: <span class="string">'media'</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">      filename: <span class="string">'css/built.[contenthash:10].css'</span></span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW({</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">        2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        生成一个 serviceworker 配置文件~</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      clientsClaim: <span class="literal">true</span>,</span><br><span class="line">      skipWaiting: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'source-map'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h2><p>彻底不打包，通过一些外链的cdn ：jQuery，vue等等，用到时需用用cdn引入。</p><p>然后禁止一些包不会被打包到最后输出的 built.js 中，</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716194524.png" alt=""></p><p>修改配置文件：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  <span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line">  externals: {</span><br><span class="line">    <span class="comment">// 拒绝jQuery被打包进来</span></span><br><span class="line">    jquery: <span class="string">'jQuery'</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h2><p>对第三方库进行打包，需要打包，打包一次，将来不用重复打包。所以使我们第二次打包的时候，变得很快，因为少了第三方库的打包。</p><p>第一步：创建 <code>webpack.dll.js</code>文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span><br><span class="line">  当你运行 webpack 时，默认查找 webpack.config.js 配置文件</span><br><span class="line">  需求：需要运行 webpack.dll.js 文件</span><br><span class="line">    --&gt; webpack --config webpack.dll.js</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: {</span><br><span class="line">    <span class="comment">// 最终打包生成的[name] --&gt; jquery</span></span><br><span class="line">    <span class="comment">// ['jquery'] --&gt; 要打包的库是jquery</span></span><br><span class="line">    jquery: [<span class="string">'jquery'</span>],</span><br><span class="line">  },</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'dll'</span>),</span><br><span class="line">    library: <span class="string">'[name]_[hash]'</span> <span class="comment">// 打包的库里面向外暴露出去的内容叫什么名字</span></span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包生成一个 manifest.json --&gt; 提供和jquery映射</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin({</span><br><span class="line">      name: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 映射库的暴露的内容名称</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">'dll/manifest.json'</span>) <span class="comment">// 输出文件路径</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>运行命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --config webpack.dll.js</span><br></pre></td></tr></tbody></table></figure><p>生成dll文件夹</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200716214613.png" alt=""></p><p><code>jquery.js</code>是要打包的库是jquery，<code>manifest.json</code> 是 提供和jquery映射,这样以后jquery就不用重复打包了。</p><p>第二步：</p><p>下载一个插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i add-asset-html-webpack-plugin -D</span><br></pre></td></tr></tbody></table></figure><p>告诉webpack哪些库不参与打包，同时使用时的名称也得变~</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DllReferencePlugin({</span><br><span class="line">      manifest: resolve(__dirname, <span class="string">'dll/manifest.json'</span>)</span><br><span class="line">    }),</span><br></pre></td></tr></tbody></table></figure><p>将某个文件打包输出去，并在html中自动引入该资源</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AddAssetHtmlWebpackPlugin({</span><br><span class="line">      filepath: resolve(__dirname, <span class="string">'dll/jquery.js'</span>)</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure><p>修改<code>webpack.config.js</code> 中的配置：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    }),</span><br><span class="line">    <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变~</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin({</span><br><span class="line">      manifest: resolve(__dirname, <span class="string">'dll/manifest.json'</span>)</span><br><span class="line">    }),</span><br><span class="line">    <span class="comment">// 将某个文件打包输出去，并在html中自动引入该资源</span></span><br><span class="line">    <span class="keyword">new</span> AddAssetHtmlWebpackPlugin({</span><br><span class="line">      filepath: resolve(__dirname, <span class="string">'dll/jquery.js'</span>)</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">      </span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="webpack性能优化"><a href="#webpack性能优化" class="headerlink" title="webpack性能优化"></a>webpack性能优化</h2><ul><li><p>开发环境性能优化</p></li><li><p>生产环境性能优化</p></li></ul><h2 id="开发环境性能优化"><a href="#开发环境性能优化" class="headerlink" title="开发环境性能优化"></a>开发环境性能优化</h2><ul><li>优化打包构建速度<ul><li>HMR</li></ul></li><li>优化代码调试<ul><li>source-map</li></ul></li></ul><h2 id="生产环境性能优化"><a href="#生产环境性能优化" class="headerlink" title="生产环境性能优化"></a>生产环境性能优化</h2><ul><li>优化打包构建速度<ul><li>oneOf</li><li>babel缓存</li><li>多进程打包</li><li>externals</li><li>dll</li></ul></li><li>优化代码运行的性能<ul><li>缓存(hash-chunkhash-contenthash)</li><li>tree shaking</li><li>code split</li><li>懒加载/预加载</li><li>pwa</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebPack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 淘宝镜像的安装</title>
      <link href="/articl/c8d8dd8.html"/>
      <url>/articl/c8d8dd8.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/bedb48f87ec34fc8997e26ad4624f728.jpg" alt=""></p><a id="more"></a><h1 id="npm-淘宝镜像的安装"><a href="#npm-淘宝镜像的安装" class="headerlink" title="npm 淘宝镜像的安装"></a>npm 淘宝镜像的安装</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>使用阿里定制的cnpm命令行工具代替默认的npm，输入以下代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p>检查是否安装成功：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm -v</span><br></pre></td></tr></tbody></table></figure><p>安装成功之后，以后安装依赖包的方式和npm的是一样的，只是npm的命令换成是cnpm就可以了。</p><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>a:单次使用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p>b:永久替换：</p><p>在开发react-native的时候，不要使用cnpm，cnpm安装的模块路径比较奇怪，packager不能正常识别。</p><p>所以，为了方便开发，我们最好是直接永久使用淘宝的镜像源</p><p>直接命令行的设置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p>手动修改设置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.打开.npmrc文件（C:\Program Files\nodejs\node_modules\npm\npmrc，没有的话可以使用git命令行建一个( touch .npmrc)，用cmd命令建会报错）</span><br><span class="line">2.增加 registry =https://registry.npm.taobao.org  即可。</span><br></pre></td></tr></tbody></table></figure><p>如果需要恢复成原来的官方地址只需要执行如下命令:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></tbody></table></figure><p>检测是否安装成功：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></tbody></table></figure><p><br><br></p><p>愿你的坚持终有收获</p><p><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack生产环境的基本配置</title>
      <link href="/articl/ff365d29.html"/>
      <url>/articl/ff365d29.html</url>
      
        <content type="html"><![CDATA[<h1 id="webpack生产环境的基本配置-grinning"><a href="#webpack生产环境的基本配置-grinning" class="headerlink" title="webpack生产环境的基本配置:grinning:"></a>webpack生产环境的基本配置<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8">😀</span></h1><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1734dd9495a21b83.jpg" alt=""></p><a id="more"></a><h2 id="1-1-提取-css-成单独文件"><a href="#1-1-提取-css-成单独文件" class="headerlink" title="1.1 提取 css  成单独文件"></a>1.1 提取 css 成单独文件</h2><p>1、下载安装包</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200715105608.png" alt=""></p><p>2、下载插件 并且引入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install mini-css-extract-plugin -D</span><br></pre></td></tr></tbody></table></figure><p>3、 修改配置文件 <span style="background-color:#ff0"><strong>我们仍然需要注意路径。</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//引入mini-css-extract-plugin</span></span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 创建style标签，将样式放入</span></span><br><span class="line">          <span class="comment">// 'style-loader', </span></span><br><span class="line">          <span class="comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span></span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="comment">// 将css文件整合到js文件中</span></span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">      <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">      filename: <span class="string">'css/built.css'</span>   <span class="comment">//注意路径</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>4、运行指令: <code>webpack</code></p><h2 id="1-2-css-兼容性处理"><a href="#1-2-css-兼容性处理" class="headerlink" title="1.2 css 兼容性处理"></a>1.2 css 兼容性处理</h2><blockquote><p>css兼容性处理：postcss –&gt; postcss-loader postcss-preset-env</p><p>帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式</p></blockquote><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200715110210.png" alt=""></p><p>2、下载 loader</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install  postcss-loader postcss-preset-env -D</span><br></pre></td></tr></tbody></table></figure><p>3、修改配置文件 <span style="background-color:#ff0"><strong>我们仍然需要注意路径。</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置nodejs环境变量</span></span><br><span class="line"><span class="comment">// process.env.NODE_ENV = 'development';</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    output: {</span><br><span class="line">        filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [{</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">                MiniCssExtractPlugin.loader,</span><br><span class="line">                <span class="string">'css-loader'</span>,</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  "browserslist": {</span></span><br><span class="line"><span class="comment">                    // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span></span><br><span class="line"><span class="comment">                    "development": [</span></span><br><span class="line"><span class="comment">                      "last 1 chrome version",</span></span><br><span class="line"><span class="comment">                      "last 1 firefox version",</span></span><br><span class="line"><span class="comment">                      "last 1 safari version"</span></span><br><span class="line"><span class="comment">                    ],</span></span><br><span class="line"><span class="comment">                    // 生产环境：默认是看生产环境</span></span><br><span class="line"><span class="comment">                    "production": [</span></span><br><span class="line"><span class="comment">                      "&gt;0.2%",</span></span><br><span class="line"><span class="comment">                      "not dead",</span></span><br><span class="line"><span class="comment">                      "not op_mini all"</span></span><br><span class="line"><span class="comment">                    ]</span></span><br><span class="line"><span class="comment">                  }</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="comment">// 使用loader的默认配置</span></span><br><span class="line">                <span class="comment">// 'postcss-loader',</span></span><br><span class="line">                <span class="comment">// 修改loader的配置</span></span><br><span class="line">                {</span><br><span class="line">                    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                    options: {</span><br><span class="line">                        ident: <span class="string">'postcss'</span>,</span><br><span class="line">                        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                            <span class="comment">// postcss的插件</span></span><br><span class="line">                            <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()</span><br><span class="line">                        ]</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        }]</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            template: <span class="string">'./src/index.html'</span></span><br><span class="line">        }),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">            filename: <span class="string">'css/built.css'</span></span><br><span class="line">        })</span><br><span class="line">    ],</span><br><span class="line">    mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>4、修改 package.json     更多关于browserslist的规则介绍：<a href="https://github.com/browserslist/browserslist#shareable-configs" target="_blank" rel="noopener">https://github.com/browserslist/browserslist#shareable-configs</a></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"browserslist"</span>: {</span><br><span class="line">    <span class="string">"development"</span>: [</span><br><span class="line">      <span class="string">"last 1 chrome version"</span>,</span><br><span class="line">      <span class="string">"last 1 firefox version"</span>,</span><br><span class="line">      <span class="string">"last 1 safari version"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"production"</span>: [</span><br><span class="line">      <span class="string">"&gt;0.1%"</span>,</span><br><span class="line">      <span class="string">"not dead"</span>,</span><br><span class="line">      <span class="string">"not op_mini all"</span></span><br><span class="line">    ]</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>5、 运行指令: <code>webpack</code></p><h2 id="1-3-压缩-css"><a href="#1-3-压缩-css" class="headerlink" title="1.3 压缩 css"></a>1.3 压缩 css</h2><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200715111036.png" alt=""></p><p>2、下载安装包 并且引入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install  optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></tbody></table></figure><p>3、修改配置文件 <span style="background-color:#ff0"><strong>我们仍然需要注意路径。</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="comment">//引入optimize-css-assets-webpack-plugin</span></span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置nodejs环境变量</span></span><br><span class="line"><span class="comment">// process.env.NODE_ENV = 'development';</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    output: {</span><br><span class="line">        filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [{</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">                MiniCssExtractPlugin.loader,</span><br><span class="line">                <span class="string">'css-loader'</span>,</span><br><span class="line"></span><br><span class="line">                {</span><br><span class="line">                    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                    options: {</span><br><span class="line">                        ident: <span class="string">'postcss'</span>,</span><br><span class="line">                        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                            <span class="comment">// postcss的插件</span></span><br><span class="line">                            <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()</span><br><span class="line">                        ]</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        }]</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            template: <span class="string">'./src/index.html'</span></span><br><span class="line">        }),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">            filename: <span class="string">'css/built.css'</span></span><br><span class="line">        }),</span><br><span class="line">        <span class="comment">// 压缩css</span></span><br><span class="line">        <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin()   <span class="comment">// 压缩css</span></span><br><span class="line">    ],</span><br><span class="line">    mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>4、运行 <code>webpack</code></p><h2 id="1-4-js-语法检查"><a href="#1-4-js-语法检查" class="headerlink" title="1.4 js 语法检查"></a>1.4 js 语法检查</h2><blockquote><p>语法检查： eslint-loader eslint<br><span style="background-color:#ff0"><strong>注意：只检查自己写的源代码，第三方的库是不用检查的</strong></span><br>设置检查规则：<br>package.json中eslintConfig中设置~<br>“eslintConfig”: {<br>“extends”: “airbnb-base”<br>}<br>airbnb –&gt; eslint-config-airbnb-base eslint-plugin-import eslint</p></blockquote><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200715111655.png" alt=""></p><p>2、下载安装包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i eslint-loader eslint eslint-config-airbnb-base eslint-plugin-import -D</span><br></pre></td></tr></tbody></table></figure><p>3、修改配置文件 <span style="background-color:#ff0"><strong>我们仍然需要注意路径。</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语法检查： eslint-loader  eslint</span></span><br><span class="line"><span class="comment">          注意：只检查自己写的源代码，第三方的库是不用检查的</span></span><br><span class="line"><span class="comment">          设置检查规则：</span></span><br><span class="line"><span class="comment">            package.json中eslintConfig中设置~</span></span><br><span class="line"><span class="comment">              "eslintConfig": {</span></span><br><span class="line"><span class="comment">                "extends": "airbnb-base"</span></span><br><span class="line"><span class="comment">              }</span></span><br><span class="line"><span class="comment">            airbnb --&gt; eslint-config-airbnb-base  eslint-plugin-import eslint</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,  <span class="comment">//这个要排除node_modules，不然错误很多</span></span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          <span class="comment">// 自动修复eslint的错误</span></span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>4、配置 package.json</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"eslintConfig"</span>: {</span><br><span class="line">    <span class="string">"extends"</span>: <span class="string">"airbnb-base"</span>,</span><br><span class="line">    <span class="string">"env"</span>: {</span><br><span class="line">      <span class="string">"browser"</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>5、运行指令: <code>webpack</code></p><p>注意：</p><p>下一行eslint所有规则都失效（下一行不进行eslint检查）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//eslint-disable-next-line</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200715113508.png" alt=""></p><h2 id="1-5-js-兼容性处理"><a href="#1-5-js-兼容性处理" class="headerlink" title="1.5 js 兼容性处理"></a>1.5 js 兼容性处理</h2><blockquote><p>js兼容性处理：babel-loader @babel/core</p><p>1、基本js兼容性处理 –&gt; @babel/preset-env<br>换基本语法，如promise高级语法不能转换</p><p>2、全部js兼容性处理 –&gt; @babel/polyfill<br>解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</p><p><strong>使用时就是在 <span style="background-color:#ff0">需要做兼容性处理的js文件中 </span>引入即可</strong><code>import '@babel/polyfill';</code></p><p>3、需要做兼容性处理的就做：按需加载 –&gt; core-js</p></blockquote><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200715145630.png" alt=""></p><p>2、下载安装包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install  babel-loader @babel/core @babel/preset-env @babel/polyfill core-js -D</span><br></pre></td></tr></tbody></table></figure><p>3、修改配置文件 <span style="background-color:#ff0"><strong>我们仍然需要注意路径。</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        js兼容性处理：babel-loader @babel/core </span></span><br><span class="line"><span class="comment">          1. 基本js兼容性处理 --&gt; @babel/preset-env</span></span><br><span class="line"><span class="comment">            问题：只能转换基本语法，如promise高级语法不能转换</span></span><br><span class="line"><span class="comment">          2. 全部js兼容性处理 --&gt; @babel/polyfill  </span></span><br><span class="line"><span class="comment">            问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span></span><br><span class="line"><span class="comment">          3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span></span><br><span class="line"><span class="comment">      */</span>  </span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">              {</span><br><span class="line">                <span class="comment">// 按需加载</span></span><br><span class="line">                useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                <span class="comment">// 指定core-js版本</span></span><br><span class="line">                corejs: {</span><br><span class="line">                  version: <span class="number">3</span></span><br><span class="line">                },</span><br><span class="line">                <span class="comment">// 指定兼容性做到哪个版本浏览器</span></span><br><span class="line">                targets: {</span><br><span class="line">                  chrome: <span class="string">'60'</span>,</span><br><span class="line">                  firefox: <span class="string">'60'</span>,</span><br><span class="line">                  ie: <span class="string">'9'</span>,</span><br><span class="line">                  safari: <span class="string">'10'</span>,</span><br><span class="line">                  edge: <span class="string">'17'</span></span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>4、运行指令: <code>webpack</code></p><h2 id="1-6-js-压缩"><a href="#1-6-js-压缩" class="headerlink" title="1.6  js 压缩"></a>1.6 js 压缩</h2><p>1、修改配置文件</p><p><span style="background-color:#ff0"><strong>我们只需将mode模式改为生产环境下，它会自动压缩js代码</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 生产环境下会自动压缩js代码</span></span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="1-7-HTML-压缩"><a href="#1-7-HTML-压缩" class="headerlink" title="1.7  HTML 压缩"></a>1.7 HTML 压缩</h2><p>1、修改配置文件</p><p><span style="background-color:#ff0"><strong>我们只需在new HtmlWebpackPlugin 下添加<code>minify</code>代码</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      <span class="comment">// 压缩html代码</span></span><br><span class="line">      minify: {</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h1 id="webpack生产环境的基本配置总结"><a href="#webpack生产环境的基本配置总结" class="headerlink" title="webpack生产环境的基本配置总结"></a>webpack生产环境的基本配置总结</h1><p>修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="string">'css-loader'</span>,</span><br><span class="line">  {</span><br><span class="line">    <span class="comment">// 还需要在package.json中定义browserslist</span></span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: {</span><br><span class="line">      ident: <span class="string">'postcss'</span>,</span><br><span class="line">      plugins: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)()]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [...commonCssLoader]</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">      },</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        正常来讲，一个文件只能被一个loader处理。</span></span><br><span class="line"><span class="comment">        当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span></span><br><span class="line"><span class="comment">          先执行eslint 在执行babel</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 在package.json中eslintConfig --&gt; airbnb</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 优先执行</span></span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          fix: <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">              {</span><br><span class="line">                useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                corejs: {<span class="attr">version</span>: <span class="number">3</span>},</span><br><span class="line">                targets: {</span><br><span class="line">                  chrome: <span class="string">'60'</span>,</span><br><span class="line">                  firefox: <span class="string">'50'</span></span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">          esModule: <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          outputPath: <span class="string">'media'</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin({</span><br><span class="line">      filename: <span class="string">'css/built.css'</span></span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><br><br><p>愿你的坚持终有收获</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebPack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack  开发环境的基本配置</title>
      <link href="/articl/ea57de08.html"/>
      <url>/articl/ea57de08.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/photo-1516093491926-a4c43060540a.jpg" alt=""></p><a id="more"></a><h2 id="1-webpack-初体验"><a href="#1-webpack-初体验" class="headerlink" title="1. webpack 初体验"></a>1. webpack 初体验</h2><h3 id="1-1-初始化配置"><a href="#1-1-初始化配置" class="headerlink" title="1.1  初始化配置"></a>1.1 初始化配置</h3><p>1、初始化 package.json</p><p>输入指令:<br><code>npm init</code></p><p>2、下载并安装 webpack<br>输入指令:</p><figure class="highlight plain"><figcaption><span>install webpack webpack-cli -g</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install webpack webpack-cli -g</span><br><span class="line">cnpm install webpack webpack-cli -D</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-编译打包应用"><a href="#1-2-编译打包应用" class="headerlink" title="1.2 编译打包应用"></a>1.2 编译打包应用</h3><p>1、创建文件</p><p>2、运行指令<br>开发环境指令：<code>webpack src/js/index.js -o build/js/built.js --mode=development</code><br>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成<br>浏览器能识别的语法。<br>生产环境指令：<code>webpack src/js/index.js -o build/js/built.js --mode=production</code><br>功能：在开发配置功能上多一个功能，压缩代码。</p><p>3、结论<br>webpack 能够编译打包 js 和 json 文件。<br>能将 es6 的模块化语法转换成浏览器能识别的语法。<br>能压缩代码。</p><p>4、问题<br>不能编译打包 css、img 等文件。<br>不能将 js 的 es6 基本语法转化为 es5 以下语法。</p><h2 id="2-webpack-开发环境的基本配置"><a href="#2-webpack-开发环境的基本配置" class="headerlink" title="2. webpack  开发环境的基本配置"></a>2. webpack 开发环境的基本配置</h2><h3 id="2-1-创建配置文件"><a href="#2-1-创建配置文件" class="headerlink" title="2.1 创建配置文件"></a>2.1 创建配置文件</h3><p>1、创建文件 webpack.config.js</p><p>2、配置内容如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">// node 内置核心模块，用来处理路径问题。</span></span><br><span class="line"></span><br><span class="line">modules.exports = {</span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">    output: { <span class="comment">// 输出配置</span></span><br><span class="line">        filename: <span class="string">'./built.js'</span>, <span class="comment">// 输出文件名</span></span><br><span class="line">        path: resolve(__dirname, <span class="string">'build/js'</span>) <span class="comment">// 输出文件路径配置</span></span><br><span class="line">    },</span><br><span class="line">    mode: <span class="string">'development'</span> <span class="comment">//开发环境</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>3、运行指令: <code>webpack</code></p><h3 id="2-2-打包样式资源"><a href="#2-2-打包样式资源" class="headerlink" title="2.2 打包样式资源"></a>2.2 打包样式资源</h3><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714175134.png" alt=""></p><p><span style="background-color:#ff0">入口文件<code>ndex.js</code>中，要引入<code>.less</code> 文件</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span></span><br></pre></td></tr></tbody></table></figure><p>2、下载安装 loader 包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i css-loader style-loader less-loader less -D</span><br></pre></td></tr></tbody></table></figure><p>3、修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  webpack.config.js  webpack的配置文件</span></span><br><span class="line"><span class="comment">    作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    所有构建工具都是基于nodejs平台运行的~模块化默认采用commonjs。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="comment">// webpack配置</span></span><br><span class="line">    <span class="comment">// 入口起点</span></span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">// 输出文件名</span></span><br><span class="line">        filename: <span class="string">"built.js"</span>,</span><br><span class="line">        <span class="comment">// 输出路径</span></span><br><span class="line">        <span class="comment">// __dirname nodejs的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        path: resolve(__dirname, <span class="string">"build"</span>),</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// loader的配置</span></span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// 详细loader配置</span></span><br><span class="line">            <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 匹配哪些文件</span></span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">                use: [</span><br><span class="line">                    <span class="comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span></span><br><span class="line">                    <span class="comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">                    <span class="string">"style-loader"</span>,</span><br><span class="line">                    <span class="comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">                    <span class="string">"css-loader"</span>,</span><br><span class="line">                ],</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">"style-loader"</span>,</span><br><span class="line">                    <span class="string">"css-loader"</span>,</span><br><span class="line">                    <span class="comment">// 将less文件编译成css文件</span></span><br><span class="line">                    <span class="comment">// 需要下载 less-loader和less</span></span><br><span class="line">                    <span class="string">"less-loader"</span>,</span><br><span class="line">                ],</span><br><span class="line">            },</span><br><span class="line">        ],</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 详细plugins的配置</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    mode: <span class="string">"development"</span>, <span class="comment">// 开发模式</span></span><br><span class="line">    <span class="comment">// mode: 'production'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>运行指令: <code>webpack</code></li></ol><h3 id="2-3-打包-HTML资源"><a href="#2-3-打包-HTML资源" class="headerlink" title="2.3  打包 HTML资源"></a>2.3 打包 HTML资源</h3><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714180434.png" alt=""></p><p>2、下载安装 plugin 包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install html-webpack-plugin -D</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  loader: 1. 下载   2. 使用（配置loader）</span></span><br><span class="line"><span class="comment">  plugins: 1. 下载  2. 引入  3. 使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    output: {</span><br><span class="line">        filename: <span class="string">"built.js"</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">"build"</span>),</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// loader的配置</span></span><br><span class="line">        ],</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// plugins的配置</span></span><br><span class="line">        <span class="comment">// html-webpack-plugin</span></span><br><span class="line">        <span class="comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">        <span class="comment">// 需求：需要有结构的HTML文件</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            <span class="comment">// 复制 './src/index.html' 文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">            template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">        }),</span><br><span class="line">    ],</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>运行指令: <code>webpack</code></li></ol><h3 id="2-4-打包图片资源"><a href="#2-4-打包图片资源" class="headerlink" title="2.4  打包图片资源"></a>2.4 打包图片资源</h3><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714180929.png" alt=""></p><p>2、下载安装 loader 包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install html-loader url-loader file-loader -D</span><br></pre></td></tr></tbody></table></figure><p>3、修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    output: {</span><br><span class="line">        filename: <span class="string">"built.js"</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">"build"</span>),</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [{</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// 要使用多个loader处理用use</span></span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"less-loader"</span>],</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 问题：默认处理不了html中img图片</span></span><br><span class="line">                <span class="comment">// 处理图片资源</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                <span class="comment">// 使用一个loader</span></span><br><span class="line">                <span class="comment">// 下载 url-loader file-loader</span></span><br><span class="line">                loader: <span class="string">"url-loader"</span>,</span><br><span class="line">                options: {</span><br><span class="line">                    <span class="comment">// 图片大小小于8kb，就会被base64处理</span></span><br><span class="line">                    <span class="comment">// 优点: 减少请求数量（减轻服务器压力）</span></span><br><span class="line">                    <span class="comment">// 缺点：图片体积会更大（文件请求速度更慢）</span></span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span></span><br><span class="line">                    <span class="comment">// 解析时会出问题：[object Module]</span></span><br><span class="line">                    <span class="comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class="line">                    esModule: <span class="literal">false</span>,</span><br><span class="line">                    <span class="comment">// 给图片进行重命名</span></span><br><span class="line">                    <span class="comment">// [hash:10]取图片的hash的前10位</span></span><br><span class="line">                    <span class="comment">// [ext]取文件原来扩展名</span></span><br><span class="line">                    name: <span class="string">"[hash:10].[ext]"</span>,</span><br><span class="line">                },</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span></span><br><span class="line">                loader: <span class="string">"html-loader"</span>,</span><br><span class="line">            },</span><br><span class="line">        ],</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">        }),</span><br><span class="line">    ],</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>运行指令: <code>webpack</code></li></ol><h3 id="2-5-打包其他资源"><a href="#2-5-打包其他资源" class="headerlink" title="2.5  打包其他资源"></a>2.5 打包其他资源</h3><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714180656.png" alt=""></p><p>2、修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'built.js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// 打包其他资源(除了html/js/css资源以外的资源)</span></span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 排除css/js/html资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(css|js|html|less)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>3、运行指令: <code>webpack</code></p><h3 id="2-6-devserver"><a href="#2-6-devserver" class="headerlink" title="2.6 devserver"></a>2.6 devserver</h3><blockquote><p>开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器~~）。</p><p>特点：只会在内存中编译打包，不会有任何输出。</p><p>启动devServer指令为：<code>npx webpack-dev-server</code>。</p></blockquote><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714181105.png" alt=""></p><p>2、下载webpack-dev-server依赖包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i webpack-dev-server -D</span><br></pre></td></tr></tbody></table></figure><p>3、 修改配置文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: {</span><br><span class="line">        filename: <span class="string">'built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="built_in">module</span>: {</span><br><span class="line">        rules: [{</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">// 打包其他资源(除了html/js/css资源以外的资源)</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 排除css/js/html资源</span></span><br><span class="line">                exclude: <span class="regexp">/\.(css|js|html|less)$/</span>,</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: {</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">            template: <span class="string">'./src/index.html'</span></span><br><span class="line">        })</span><br><span class="line">    ],</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器~~）</span></span><br><span class="line">    <span class="comment">// 特点：只会在内存中编译打包，不会有任何输出</span></span><br><span class="line">    <span class="comment">// 启动devServer指令为：npx webpack-dev-server</span></span><br><span class="line">    devServer: {</span><br><span class="line">        <span class="comment">// 项目构建后路径</span></span><br><span class="line">        contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        <span class="comment">// 启动gzip压缩</span></span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        open: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>4、运行指令: <code>npx webpack-dev-server</code></p><h3 id="2-7-开发环境的配置"><a href="#2-7-开发环境的配置" class="headerlink" title="2.7 开发环境的配置"></a>2.7 开发环境的配置</h3><blockquote><p>开发环境配置：能让代码运行<br>运行项目指令：<br>webpack 会将打包结果输出出去<br><code>npx webpack-dev-server</code> 只会在内存中编译打包，没有输出</p></blockquote><p><span style="background-color:#ff0"><strong>下载依赖包的时候，尽量下载到包含所有项目的最上面的文件夹，这样可以不用多次下载。</strong></span></p><p>①下载并安装 webpack</p><p>只装一次 -g 的全局安装 （也可装多次，可以更新版本）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install webpack webpack-cli -g</span><br></pre></td></tr></tbody></table></figure><p>本地安装 -D 这样webpack都是属于开发依赖 不属于生成依赖</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install webpack webpack-cli -D</span><br></pre></td></tr></tbody></table></figure><p>②初始化 package.json</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm init</span><br></pre></td></tr></tbody></table></figure><p>③下载安装 loader 包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i css-loader style-loader less-loader less -D</span><br></pre></td></tr></tbody></table></figure><p>④下载安装 plugin 包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install html-webpack-plugin -D</span><br></pre></td></tr></tbody></table></figure><p>⑤下载安装 loader 包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install html-loader url-loader file-loader -D</span><br></pre></td></tr></tbody></table></figure><p>⑥下载webpack-dev-server依赖包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i webpack-dev-server -D</span><br></pre></td></tr></tbody></table></figure><p>1、创建文件</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714181538.png" alt=""></p><p>2、修改配置文件</p><p><span style="background-color:#ff0">注意文件的路径，为了归类方便，将它们进行归档。<strong>要特别注意</strong></span></p><p>字体文件iconfont.css 文件中的路径</p><p><img src="C:%5CUsers%5Cdell%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200714182650903.png" alt=""></p><p>背景图片的路径</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714182558.png" alt=""></p><p>入口文件中 引入的路径</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714182755.png" alt=""></p><p>html中的图片路径</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714183007.png" alt=""></p><p><span style="background-color:#ff0"><strong>总之要特别注意引入文件的路径</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> { resolve } = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: <span class="string">'./src/js/index.js'</span>,           <span class="comment">// 注意路径的变化</span></span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'js/built.js'</span>,            <span class="comment">// 注意路径的变化</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 处理less资源</span></span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 处理css资源</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)$/</span>,    </span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          <span class="comment">// 关闭es6模块化</span></span><br><span class="line">          esModule: <span class="literal">false</span>,</span><br><span class="line">          outputPath: <span class="string">'imgs'</span>       <span class="comment">//  输出文件路径 是在imgs问价目录下</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 处理html中img资源</span></span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="comment">// 处理其他资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: {</span><br><span class="line">          name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">          outputPath: <span class="string">'media'</span>      <span class="comment">//  输出文件路径 是在media问价目录下</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>  <span class="comment">// 注意路径的变化 </span></span><br><span class="line">    })</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devServer: {</span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    open: <span class="literal">true</span></span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>3、运行指令: <code>npx webpack-dev-server</code>或者<code>webpack</code></p><p>4、生成的目录结构</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200714183149.png" alt=""></p><p><br><br></p><p>愿你的坚持终有收获</p><p><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebPack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作——简单可直接食用</title>
      <link href="/articl/24707660.html"/>
      <url>/articl/24707660.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200713154055.png" alt=""></p><a id="more"></a><h2 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h2><h3 id="1-1本地库初始化"><a href="#1-1本地库初始化" class="headerlink" title="1.1本地库初始化"></a>1.1本地库初始化</h3><p><code>进入文件夹</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">注意：生成的 .git 目录中存放的是本地库相关文件，不要删除</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2设置签名"><a href="#1-2设置签名" class="headerlink" title="1.2设置签名"></a>1.2设置签名</h3><ul><li><p>项目(仓库)级别<code>仅在当前本地库有效</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name tom  #设置用户名tom</span><br><span class="line">git config user.email liu@qq.com #设置用户邮箱</span><br></pre></td></tr></tbody></table></figure></li><li><p>系统用户级别<code>仅在当前登录的操作系统用户有效</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name tom</span><br><span class="line">git config --global user.email liu@qq.com</span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>仅仅加了一个 <code>--global</code></p><p>优先级别：<code>项目级别</code> &gt; <code>系统级别</code></p><p>信息保存位置：<code>~/.gitconfig 文件</code></p></blockquote><h3 id="1-3基本操作"><a href="#1-3基本操作" class="headerlink" title="1.3基本操作"></a>1.3基本操作</h3><h4 id="1-3-1-状态查看"><a href="#1-3-1-状态查看" class="headerlink" title="1.3.1 状态查看"></a>1.3.1 状态查看</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status   #查看工作区、暂存区状态</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-2-添加"><a href="#1-3-2-添加" class="headerlink" title="1.3.2 添加"></a>1.3.2 添加</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add fileName  #指定文件</span><br><span class="line">git add . #所有</span><br><span class="line">说明：将工作区的文件添加到暂存区</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-3-提交"><a href="#1-3-3-提交" class="headerlink" title="1.3.3 提交"></a>1.3.3 提交</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m 'commit message' fileName</span><br><span class="line">说明：将暂存区内容提交到本地库</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-4-查看历史记录"><a href="#1-3-4-查看历史记录" class="headerlink" title="1.3.4 查看历史记录"></a>1.3.4 查看历史记录</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git log </span><br><span class="line">git reflog  #常用 显示当前分支的最近几次提交</span><br><span class="line">git log --graph #图形显示,更直观</span><br><span class="line">git log --pretty=oneline #漂亮一行显示</span><br><span class="line">git log --oneline #简洁显示</span><br><span class="line">说明：HEAD@{移动到当前版本需要多少步}</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-5-前进后退"><a href="#1-3-5-前进后退" class="headerlink" title="1.3.5 前进后退"></a>1.3.5 前进后退</h4><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200713145647.png" alt=""></p><h4 id="1-3-6-reset的三个参数比较"><a href="#1-3-6-reset的三个参数比较" class="headerlink" title="1.3.6 reset的三个参数比较"></a>1.3.6 reset的三个参数比较</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">soft: </span><br><span class="line">  - 仅本地库移动HEAD 指针</span><br><span class="line">mixed:</span><br><span class="line">  - 在本地库移动HEAD指针</span><br><span class="line">  - 重置暂存区</span><br><span class="line">hard:</span><br><span class="line">  - 在本地库移动HEAD指针</span><br><span class="line">  - 重置暂存区</span><br><span class="line">  - 重置工作区</span><br></pre></td></tr></tbody></table></figure><blockquote><p>git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本.</p></blockquote><p>为了更好地理解git reset，我们来回顾一下,Git的版本管理及HEAD的理解</p><blockquote><p>Git的所有提交，会连成一条时间轴线，这就是分支。如果当前分支是master，HEAD指针一般指向当前分支，如下：</p></blockquote><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200713145925.png" alt=""></p><p>假设执行git reset，回退到版本二之后，版本三不见了哦,如下：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200713150001.png" alt=""></p><h4 id="1-3-7-删除文件并找回"><a href="#1-3-7-删除文件并找回" class="headerlink" title="1.3.7　删除文件并找回"></a>1.3.7　删除文件并找回</h4><ul><li><strong>相当于建立一个快照，虽然删除了，但只要添加到暂存区，就能找回</strong></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 指针位置</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-8-文件差异比较"><a href="#1-3-8-文件差异比较" class="headerlink" title="1.3.8 文件差异比较"></a>1.3.8 文件差异比较</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff 文件名</span><br><span class="line">git diff 哈希值 文件名  #和历史中的一个版本比较</span><br><span class="line">git diff  #不带文件名，则比较多个文件</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-9-git-stash"><a href="#1-3-9-git-stash" class="headerlink" title="1.3.9 git stash"></a>1.3.9 git stash</h4><p>stash命令可用于临时保存和恢复修改</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash  把当前的工作隐藏起来 等以后恢复现场后继续工作 </span><br><span class="line">git stash list 显示保存的工作进度列表 </span><br><span class="line">git stash pop stash@{num} 恢复工作进度到工作区 </span><br><span class="line">git stash show ：显示做了哪些改动 </span><br><span class="line">git stash drop stash@{num} ：删除一条保存的工作进度 </span><br><span class="line">git stash clear 删除所有缓存的stash。 复制代码</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-分支管理"><a href="#2-2-分支管理" class="headerlink" title="2.2 分支管理"></a>2.2 分支管理</h3><p><code>hot_fix</code> <code>master</code> <code>feature_x</code> <code>feature_y</code></p><h4 id="2-2-1-什么是分支管理"><a href="#2-2-1-什么是分支管理" class="headerlink" title="2.2.1 什么是分支管理"></a>2.2.1 什么是分支管理</h4><ul><li>在版本控制中，使用推进多个任务</li></ul><h4 id="2-2-2-分支的好处"><a href="#2-2-2-分支的好处" class="headerlink" title="2.2.2 分支的好处"></a>2.2.2 分支的好处</h4><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>某一分支开发失败，不会对其它分支有任何影响</li></ul><h4 id="2-2-3-分支操作"><a href="#2-2-3-分支操作" class="headerlink" title="2.2.3 分支操作"></a>2.2.3 分支操作</h4><ul><li>创建分支</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></tbody></table></figure><ul><li>查看分支</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -v</span><br></pre></td></tr></tbody></table></figure><ul><li>切换分支</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br><span class="line">git checkout -b 分支名   #创建分支并直接切换到该分支</span><br></pre></td></tr></tbody></table></figure><ul><li>合并分支<code>相当于把修改了的文件拉过来</code></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge xxx</span><br><span class="line">注意：合并分支的时候要明确谁谁合并</span><br><span class="line">我在a分支里面修改了。要合并到master，就先切换到master，然后合并b</span><br></pre></td></tr></tbody></table></figure><ul><li>删除分支</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br></pre></td></tr></tbody></table></figure><h4 id="2-2-4-解决冲突"><a href="#2-2-4-解决冲突" class="headerlink" title="2.2.4 解决冲突"></a>2.2.4 解决冲突</h4><ul><li>冲突的表现</li><li>冲突的解决<ul><li>第一步：编辑，删除特殊标记<code>&lt;&lt;&lt;</code> <code>===</code></li><li>第二步：修改到满意位置，保存退出</li><li>第三步：添加到缓存区 <code>git add 文件名</code></li><li>第四步：提交到本地库<code>git commit -m '日志信息'</code> <code>注意：后面一定不能带文件名</code></li></ul></li></ul><h2 id="Git-结合Github"><a href="#Git-结合Github" class="headerlink" title="Git 结合Github"></a>Git 结合Github</h2><p><code>别分手</code> <code>别名 分支名</code></p><h4 id="1-1-创建远程库地址别名"><a href="#1-1-创建远程库地址别名" class="headerlink" title="1.1 创建远程库地址别名"></a>1.1 创建远程库地址别名</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v  #查看远程地址别名</span><br><span class="line">git remote add 别名 远程地址 </span><br><span class="line">例子：git remote add origin https://xx</span><br></pre></td></tr></tbody></table></figure><h4 id="1-2-推送"><a href="#1-2-推送" class="headerlink" title="1.2 推送"></a>1.2 推送</h4><p><code>开发修改完把本地库的文件推送到远程仓库</code> <code>前提是提交到了本地库才可以推送</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push 别名 分支名</span><br><span class="line">git push -u 别名 分支名    #-u指定默认主机</span><br><span class="line">例子：git push origin master</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-克隆"><a href="#1-3-克隆" class="headerlink" title="1.3 克隆"></a>1.3 克隆</h4><p><code>完整的把远程库克隆到本地</code> <code>克隆下来后不要在主分支里面做开发</code> <code>clone进行一次，从无到有的过程，更新用pull</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone  远程地址</span><br><span class="line">例子：git clone https://xx</span><br></pre></td></tr></tbody></table></figure><h4 id="1-4-拉取"><a href="#1-4-拉取" class="headerlink" title="1.4 拉取"></a>1.4 拉取</h4><p><code>本地存在clone下来的文件 就用pull更新</code></p><p><strong>注意：</strong> <span style="background-color:#ff0">如果你提交成功下班后：同事也向该远程仓库提交了新的内容。第二天上班时，你需要拉去线上的仓库的最新版本。</span></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pull = fetch + merge</span><br><span class="line">git fetch 别名 分支名</span><br><span class="line">git merge 别名 分支名</span><br><span class="line">git pull 别名 分支名</span><br></pre></td></tr></tbody></table></figure><p><span style="background-color:#ff0">因此在每天工作的第一件事就是git pull 拉取线上的最新版本，下班要做的就是 git push，将本地代码提交到线上仓库。</span></p><h4 id="1-5-解决冲突"><a href="#1-5-解决冲突" class="headerlink" title="1.5 解决冲突"></a>1.5 解决冲突</h4><p><code>注意：解决冲突后的提交是不能带文件名的</code></p><p><code>如果不是基于远程库最新版做的修改不能推送，必须先pull下来安装冲突办法解决</code></p><h4 id="1-6-rebase"><a href="#1-6-rebase" class="headerlink" title="1.6 rebase"></a>1.6 rebase</h4><p>rebase又称为衍合，是合并的另外一种选择。</p><p>假设有两个分支master和test</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D---E test       /  A---B---C---F--- master 复制代码</span><br></pre></td></tr></tbody></table></figure><p>执行 git merge test得到的结果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D--------E       /          \  A---B---C---F----G---   test, master 复制代码</span><br></pre></td></tr></tbody></table></figure><p>执行git rebase test，得到的结果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A---B---D---E---C‘---F‘---   test, master 复制代码</span><br></pre></td></tr></tbody></table></figure><p><strong>rebase好处是：</strong> 获得更优雅的提交树，可以线性的看到每一次提交，并且没有增加提交节点。所以很多时候，看到有些伙伴都是这个命令拉代码：git pull –rebase</p><h4 id="1-7-beyond-compare"><a href="#1-7-beyond-compare" class="headerlink" title="1.7 beyond compare"></a>1.7 beyond compare</h4><p><code>用软件解决冲突</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.安装 ：</span><br><span class="line">beyond compare </span><br><span class="line">2.配置：</span><br><span class="line">    git config --local merge.tool bc3  #合并名称</span><br><span class="line">    git config --local mergetool.path '/usr/local/bin/bcomp' #软件路径</span><br><span class="line">    git config --local mergetool.keepBackup false  #False不用保存备份</span><br><span class="line">3.应用：</span><br><span class="line">git mergetool</span><br><span class="line">说明：--local指只在当前操作系统有效</span><br></pre></td></tr></tbody></table></figure><h4 id="1-8-跨团队合作"><a href="#1-8-跨团队合作" class="headerlink" title="1.8 跨团队合作"></a>1.8 跨团队合作</h4><p><code>代码review之后合并</code></p><ul><li><p><strong>适用于个人</strong></p><p><strong>邀请成员</strong>:<code>Settings</code> –&gt; <code>Collaborators</code> –&gt;<code>填写用户名</code> –&gt;<code>打开链接接受邀请</code></p></li><li><p><strong>企业</strong> <code>创建一个组织</code> <code>方便管理</code></p></li><li><p><strong>review</strong></p><p><code>组织做review</code> <code>通过Pull request</code></p></li><li><p><strong>给开源社区共享代码</strong></p><p><code>点击别人仓库的fork 到自己的仓库</code> – &gt; <code>然后clone下来 修改后推送到远程库</code> –&gt; <code>点击Pull Request请求</code> –&gt; <code>Create pull request发消息</code></p></li></ul><h4 id="1-9-Tag标签"><a href="#1-9-Tag标签" class="headerlink" title="1.9 Tag标签"></a>1.9 Tag标签</h4><p><code>为了清晰的版本管理，公司一般不会直接使用commit提交</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0 -m '版本介绍'   #创建本地tag信息</span><br><span class="line">git tag -d v1.0    #删除tag</span><br><span class="line">git push origin --tags   #将本地tag信息推送到远程库</span><br><span class="line">git pull origin --tags    #拉取到本地</span><br><span class="line"></span><br><span class="line">git checkout v.10    #切换tag</span><br><span class="line">git clone -b v0.1 地址   #指定tag下载代码</span><br></pre></td></tr></tbody></table></figure><h4 id="1-10-SSH-免密登录"><a href="#1-10-SSH-免密登录" class="headerlink" title="1.10 SSH 免密登录"></a>1.10 SSH 免密登录</h4><ul><li>输入:<code>ssh-keygen -t rsa -C GitHub邮箱地址</code></li><li>进入<code>.ssh</code>目录，复制<code>id_rsa.pub</code>文件内容</li><li>登录GitHub。<code>Settings</code> –&gt; <code>SSH and GPG keys</code> –&gt; <code>New SSH Key</code></li><li>回到git通过ssh地址创建。<code>git remote add 别名 SSH地址</code></li></ul><h2 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h2><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在项目开发过程中使用Git的方式</span><br></pre></td></tr></tbody></table></figure><h4 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h4><h5 id="1-2-1-集中式工作流"><a href="#1-2-1-集中式工作流" class="headerlink" title="1.2.1 集中式工作流"></a>1.2.1 集中式工作流</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">像SVN一样，集中式工作流有一个中央仓库，所有的修改都提交到了Master分支上</span><br></pre></td></tr></tbody></table></figure><h5 id="1-2-2-GitFlow工作流"><a href="#1-2-2-GitFlow工作流" class="headerlink" title="1.2.2 GitFlow工作流 *"></a>1.2.2 GitFlow工作流 <code>*</code></h5><p>主干分支<code>master</code> 开发分支<code>develop</code> 修复分支<code>hotfix</code> 预发布分支<code>release</code> 功能分支<code>feature</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitFlow 有独立的分支，让发布迭代过程更流畅。</span><br></pre></td></tr></tbody></table></figure><h5 id="1-2-3-Forking-工作流"><a href="#1-2-3-Forking-工作流" class="headerlink" title="1.2.3 Forking 工作流"></a>1.2.3 Forking 工作流</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在 GitFlow 基础上， 充分利用了 Git 的 Fork 和 pull request 的功能以达到代码审核的目的。 </span><br><span class="line">安全可靠地管理大团队的开发者</span><br></pre></td></tr></tbody></table></figure><h2 id="Git基本理论（重要）"><a href="#Git基本理论（重要）" class="headerlink" title="Git基本理论（重要）"></a>Git基本理论（重要）</h2><h3 id="1-1-三个区域"><a href="#1-1-三个区域" class="headerlink" title="1.1 三个区域"></a>1.1 三个区域</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200713150522.png" alt=""></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200713150624.png" alt=""></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li></ul><h3 id="1-2-工作流程"><a href="#1-2-工作流程" class="headerlink" title="1.2 工作流程"></a>1.2 工作流程</h3><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200713151058.png" alt=""></p><h3 id="1-3-文件的四种状态"><a href="#1-3-文件的四种状态" class="headerlink" title="1.3 文件的四种状态"></a>1.3 文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h2 id="总结-详细"><a href="#总结-详细" class="headerlink" title="总结(详细)"></a>总结(详细)</h2><h3 id="1-1-新建代码库"><a href="#1-1-新建代码库" class="headerlink" title="1.1 新建代码库"></a>1.1 新建代码库</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-3-增加-删除文件"><a href="#1-3-增加-删除文件" class="headerlink" title="1.3 增加/删除文件"></a>1.3 增加/删除文件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-代码提交"><a href="#1-4-代码提交" class="headerlink" title="1.4 代码提交"></a>1.4 代码提交</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></tbody></table></figure><h3 id="1-5分支"><a href="#1-5分支" class="headerlink" title="1.5分支"></a>1.5分支</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></tbody></table></figure><h3 id="1-6-标签"><a href="#1-6-标签" class="headerlink" title="1.6 标签"></a>1.6 标签</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></tbody></table></figure><h3 id="1-7-远程同步"><a href="#1-7-远程同步" class="headerlink" title="1.7 远程同步"></a>1.7 远程同步</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></tbody></table></figure><h3 id="1-8-撤销"><a href="#1-8-撤销" class="headerlink" title="1.8 撤销"></a>1.8 撤销</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></tbody></table></figure><br><br><p>参考链接：</p><p><code>https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ</code></p><p><code>http://www.cpengx.cn/p/554.html</code></p><p><code>http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</code></p><br><br><p>愿你的坚持总有收获</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础面试题</title>
      <link href="/articl/7ef9ed10.html"/>
      <url>/articl/7ef9ed10.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/photo-1558338043-7f8d437d3188.png" alt=""></p><a id="more"></a><h3 id="1、-介绍JavaScript的基本数据类型"><a href="#1、-介绍JavaScript的基本数据类型" class="headerlink" title="1、 介绍JavaScript的基本数据类型"></a>1、 介绍JavaScript的基本数据类型</h3><p>Number、String 、Boolean 、Null、Undefined<br>Object 是 JavaScript 中所有对象的父对象<br>数据封装类对象：Object、Array、Boolean、Number 和 String<br>其他对象：Function、Arguments、Math、Date、RegExp、Error<br>新类型：Symbol</p><h3 id="2、-说说写JavaScript的基本规范？"><a href="#2、-说说写JavaScript的基本规范？" class="headerlink" title="2、 说说写JavaScript的基本规范？"></a>2、 说说写JavaScript的基本规范？</h3><p>1) 不要在同一行声明多个变量<br>2) 使用 ===或!==来比较true/false或者数值<br>3) switch必须带有default分支<br>4) 函数应该有返回值<br>5) for if else 必须使用大括号<br>6) 语句结束加分号<br>7) 命名要有意义，使用驼峰命名法</p><h3 id="3、-jQuery使用建议"><a href="#3、-jQuery使用建议" class="headerlink" title="3、 jQuery使用建议"></a>3、 jQuery使用建议</h3><p>1) 尽量减少对dom元素的访问和操作<br>2) 尽量避免给dom元素绑定多个相同类型的事件处理函数，可以将多个相同类型事件<br>处理函数合并到一个处理函数，通过数据状态来处理分支<br>3) 尽量避免使用toggle事件</p><h3 id="4、-Ajax使用"><a href="#4、-Ajax使用" class="headerlink" title="4、 Ajax使用"></a>4、 Ajax使用</h3><p>全称 ：Asynchronous Javascript And XML<br>所谓异步，就是向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。<br>创建Ajax的过程：</p><p>1) 创建XMLHttpRequest对象（异步调用对象）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></tbody></table></figure><p>2) 创建新的Http请求（方法、URL、是否异步）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(‘<span class="keyword">get</span>’,’example.php’,false);</span><br></pre></td></tr></tbody></table></figure><p>3) 设置响应HTTP请求状态变化的函数。<br>onreadystatechange事件中readyState属性等于4。响应的HTTP状态为200(OK)或者304(Not Modified)。<br>4) 发送http请求</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(data);</span><br></pre></td></tr></tbody></table></figure><p>5) 获取异步调用返回的数据</p><p>注意：</p><p>1) 页面初次加载时，尽量在web服务器一次性输出所有相关的数据，只在页面加载完成之后，用户进行操作时采用ajax进行交互。<br>2) 同步ajax在IE上会产生页面假死的问题。所以建议采用异步ajax。<br>3) 尽量减少ajax请求次数<br>4) ajax安全问题，对于敏感数据在服务器端处理，避免在客户端处理过滤。对于关键业务逻辑代码也必须放在服务器端处理。</p><h3 id="5、-JavaScript有几种类型的值？你能画一下他们的内存图吗？"><a href="#5、-JavaScript有几种类型的值？你能画一下他们的内存图吗？" class="headerlink" title="5、 JavaScript有几种类型的值？你能画一下他们的内存图吗？"></a>5、 JavaScript有几种类型的值？你能画一下他们的内存图吗？</h3><p>基本数据类型存储在栈中，引用数据类型（对象）存储在堆中，指针放在栈中。<br>两种类型的区别是：存储位置不同；原始数据类型直接存储在栈中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；引用数据类型存储在堆中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能<br>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p><h3 id="6、-栈和堆的区别？"><a href="#6、-栈和堆的区别？" class="headerlink" title="6、 栈和堆的区别？"></a>6、 栈和堆的区别？</h3><p>栈（stack）：由编译器自动分配释放，存放函数的参数值，局部变量等；<br>堆（heap）：一般由程序员分配释放，若程序员不释放，程序结束时可能由操作系统释放。</p><h3 id="7、-Javascript实现继承的几种方式"><a href="#7、-Javascript实现继承的几种方式" class="headerlink" title="7、 Javascript实现继承的几种方式"></a>7、 Javascript实现继承的几种方式</h3><p>JavaScript实现继承的3种方法<br>1）、借用构造函数法（又叫经典继承）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="keyword">this</span>.name);</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>{</span><br><span class="line"></span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name); <span class="comment">//在这里借用了父类的构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2）、对象冒充</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="keyword">this</span>.name);</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.supertype = SuperType; <span class="comment">//在这里使用了对象冒充</span></span><br><span class="line">    <span class="keyword">this</span>.supertype(name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3）、组合继承（最常用）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">        </span><br><span class="line">SuperType.prototype = {</span><br><span class="line">        </span><br><span class="line">    sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="keyword">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>{</span><br><span class="line">    </span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name); <span class="comment">//在这里继承属性</span></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType(); <span class="comment">//这里继承方法</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-、Javascript创建对象的几种方式？"><a href="#8-、Javascript创建对象的几种方式？" class="headerlink" title="8 、Javascript创建对象的几种方式？"></a>8 、Javascript创建对象的几种方式？</h3><p>JavaScript定义类的4种方法<br>1）、工厂方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatPerson</span>(<span class="params">name, age</span>) </span>{</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line"></span><br><span class="line">    obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="keyword">this</span>.name);</span><br><span class="line">    };</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2）、构造函数方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="keyword">this</span>.name);</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3）、原型方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>{</span><br><span class="line">        </span><br><span class="line">}</span><br><span class="line">        </span><br><span class="line">Person.prototype = {</span><br><span class="line">    <span class="keyword">constructor</span> : Person,</span><br><span class="line">    name : "Ning",</span><br><span class="line">    age : "23",</span><br><span class="line">    sayName : function() {</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="keyword">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">大家可以看到这种方法有缺陷，类里属性的值都是在原型里给定的。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）、组合使用构造函数和原型方法（使用最广）</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line">        </span><br><span class="line">Person.prototype = {</span><br><span class="line">    <span class="keyword">constructor</span> : Person,</span><br><span class="line">    sayName : function() {</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="keyword">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>将构造函数方法和原型方法结合使用是目前最常用的定义类的方法。这种方法的好处是实现了属性定义和方法定义的分离。比如我可以创建两个对象<code>person1</code>和<code>person2</code>，它们分别传入各自的<code>name</code>值和<code>age</code>值，但<code>sayName()</code>方法可以同时使用原型里定义的。</p><h3 id="9、Javascript作用链域"><a href="#9、Javascript作用链域" class="headerlink" title="9、Javascript作用链域"></a>9、Javascript作用链域</h3><p>作用域链的原理和原型链很类似，如果这个变量在自己的作用域中没有，那么它会寻找父级的，直到最顶层。<br>注意：JS没有块级作用域，若要形成块级作用域，可通过（function（）｛｝）（）；立即执行的形式实现。</p><h3 id="10、-谈谈this的理解"><a href="#10、-谈谈this的理解" class="headerlink" title="10、 谈谈this的理解"></a>10、 谈谈this的理解</h3><p>1) this总是指向函数的直接调用者（而非间接调用者）<br>2) 如果有new关键字，this指向new出来的那个对象<br>3) 在事件中，this指向目标元素，特殊的是IE的attachEvent中的this总是指向全局对象window。</p><h3 id="11、-eval是做什么的？"><a href="#11、-eval是做什么的？" class="headerlink" title="11、 eval是做什么的？"></a>11、 eval是做什么的？</h3><p>它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。</p><h3 id="12、-什么是window对象-什么是document对象"><a href="#12、-什么是window对象-什么是document对象" class="headerlink" title="12、 什么是window对象? 什么是document对象?"></a>12、 什么是window对象? 什么是document对象?</h3><p>window对象代表浏览器中打开的一个窗口。document对象代表整个html文档。实际上，document对象是window对象的一个属性。</p><h3 id="13、-null，undefined的区别？"><a href="#13、-null，undefined的区别？" class="headerlink" title="13、 null，undefined的区别？"></a>13、 null，undefined的区别？</h3><p>null表示一个对象被定义了，但存放了空指针，转换为数值时为0。<br>undefined表示声明的变量未初始化，转换为数值时为NAN。<br>typeof(null) – object;<br>typeof(undefined) – undefined</p><h3 id="14、-“1”-“2”-“3”-map-parseInt-答案是多少？"><a href="#14、-“1”-“2”-“3”-map-parseInt-答案是多少？" class="headerlink" title="14、 [“1”, “2”, “3”].map(parseInt) 答案是多少？"></a>14、 [“1”, “2”, “3”].map(parseInt) 答案是多少？</h3><p>[1,NaN,NaN]</p><p>解析：<br>Array.prototype.map()<br>array.map(callback[, thisArg])<br>callback函数的执行规则<br>参数：自动传入三个参数<br>currentValue（当前被传递的元素）；<br>index（当前被传递的元素的索引）；<br>array（调用map方法的数组）</p><p>parseInt方法接收两个参数<br>第三个参数[“1”, “2”, “3”]将被忽略。parseInt方法将会通过以下方式被调用<br>parseInt(“1”, 0)<br>parseInt(“2”, 1)<br>parseInt(“3”, 2)</p><p>parseInt的第二个参数radix为0时，ECMAScript5将string作为十进制数字的字符串解析；<br>parseInt的第二个参数radix为1时，解析结果为NaN；<br>parseInt的第二个参数radix在2—36之间时，如果string参数的第一个字符（除空白以外），不属于radix指定进制下的字符，解析结果为NaN。<br>parseInt(“3”, 2)执行时，由于”3”不属于二进制字符，解析结果为NaN。</p><h3 id="15、关于事件，IE与火狐的事件机制有什么区别？如何阻止冒泡？"><a href="#15、关于事件，IE与火狐的事件机制有什么区别？如何阻止冒泡？" class="headerlink" title="15、关于事件，IE与火狐的事件机制有什么区别？如何阻止冒泡？"></a>15、关于事件，IE与火狐的事件机制有什么区别？如何阻止冒泡？</h3><p>IE为事件冒泡，Firefox同时支持事件捕获和事件冒泡。但并非所有浏览器都支持事件捕获。jQuery中使用<code>event.stopPropagation()</code>方法可阻止冒泡;（旧IE的方法 <code>ev.cancelBubble = true;</code>）</p><h3 id="16、-什么是闭包（closure），为什么要用它？"><a href="#16、-什么是闭包（closure），为什么要用它？" class="headerlink" title="16、 什么是闭包（closure），为什么要用它？"></a>16、 什么是闭包（closure），为什么要用它？</h3><p>闭包指的是一个函数可以访问另一个函数作用域中变量。常见的构造方法，是在一个函数内部定义另外一个函数。内部函数可以引用外层的变量；外层变量不会被垃圾回收机制回收。<br>注意，闭包的原理是作用域链，所以闭包访问的上级作用域中的变量是个对象，其值为其运算结束后的最后一个值。<br>优点：避免全局变量污染。缺点：容易造成内存泄漏。<br>例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"Mozilla"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> displayName;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> myFunc = makeFunc();</span><br><span class="line">myFunc();   <span class="comment">//输出Mozilla</span></span><br></pre></td></tr></tbody></table></figure><p>myFunc 变成一个 闭包。闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。在我们的例子中，myFunc 是一个闭包，由 displayName 函数和闭包创建时存在的 “Mozilla” 字符串形成。</p><h3 id="17、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？"><a href="#17、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？" class="headerlink" title="17、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？"></a>17、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</h3><p>除了正常模式运行外，ECMAscript添加了第二种运行模式：“严格模式”。<br>作用：</p><p>1) 消除js不合理，不严谨地方，减少怪异行为<br>2) 消除代码运行的不安全之处，<br>3) 提高编译器的效率，增加运行速度<br>4) 为未来的js新版本做铺垫。</p><h3 id="18、-如何判断一个对象是否属于某个类？"><a href="#18、-如何判断一个对象是否属于某个类？" class="headerlink" title="18、 如何判断一个对象是否属于某个类？"></a>18、 如何判断一个对象是否属于某个类？</h3><p>使用instanceof 即if(a instanceof Person){alert(‘yes’);}</p><h3 id="19、-new操作符具体干了什么呢"><a href="#19、-new操作符具体干了什么呢" class="headerlink" title="19、 new操作符具体干了什么呢?"></a>19、 new操作符具体干了什么呢?</h3><p>1) 创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>2) 属性和方法被加入到 this 引用的对象中。<br>3) 新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p><h3 id="20、-Javascript中，执行时对象查找时，永远不会去查找原型的函数？"><a href="#20、-Javascript中，执行时对象查找时，永远不会去查找原型的函数？" class="headerlink" title="20、 Javascript中，执行时对象查找时，永远不会去查找原型的函数？"></a>20、 Javascript中，执行时对象查找时，永远不会去查找原型的函数？</h3><p>Object.hasOwnProperty(proName)：是用来判断一个对象是否有你给出名称的属性。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。</p><h3 id="21、-对JSON的了解？"><a href="#21、-对JSON的了解？" class="headerlink" title="21、 对JSON的了解？"></a>21、 对JSON的了解？</h3><p>全称：JavaScript Object Notation<br>JSON中对象通过“{}”来标识，一个“{}”代表一个对象，如{“AreaId”:”123”}，对象的值是键值对的形式（key：value）。JSON是JS的一个严格的子集，一种轻量级的数据交换格式，类似于xml。数据格式简单，易于读写，占用带宽小。<br>两个函数：<br>JSON.parse(str)<br>解析JSON字符串 把JSON字符串变成JavaScript值或对象<br>JSON.stringify(obj)<br>将一个JavaScript值(对象或者数组)转换为一个 JSON字符串<br>eval(‘(‘＋json＋’)’)<br>用eval方法注意加括号 而且这种方式更容易被攻击</p><h3 id="22、-JS延迟加载的方式有哪些？"><a href="#22、-JS延迟加载的方式有哪些？" class="headerlink" title="22、 JS延迟加载的方式有哪些？"></a>22、 JS延迟加载的方式有哪些？</h3><p>JS的延迟加载有助与提高页面的加载速度。<br>defer和async、动态创建DOM方式（用得最多）、按需异步载入JS<br>defer：延迟脚本。立即下载，但延迟执行（延迟到整个页面都解析完毕后再运行），按照脚本出现的先后顺序执行。<br>async：异步脚本。下载完立即执行，但不保证按照脚本出现的先后顺序执行。</p><h3 id="23、-同步和异步的区别"><a href="#23、-同步和异步的区别" class="headerlink" title="23、 同步和异步的区别?"></a>23、 同步和异步的区别?</h3><p>同步的概念在操作系统中：不同进程协同完成某项工作而先后次序调整（通过阻塞、唤醒等方式），同步强调的是顺序性，谁先谁后。异步不存在顺序性。<br>同步：浏览器访问服务器，用户看到页面刷新，重新发请求，等请求完，页面刷新，新内容出现，用户看到新内容之后进行下一步操作。<br>异步：浏览器访问服务器请求，用户正常操作，浏览器在后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。</p><h3 id="24、-什么是跨域问题-，如何解决跨域问题"><a href="#24、-什么是跨域问题-，如何解决跨域问题" class="headerlink" title="24、 什么是跨域问题 ，如何解决跨域问题?"></a>24、 什么是跨域问题 ，如何解决跨域问题?</h3><p><strong>什么是跨域？</strong><br>要明白什么是跨域之前，首先要明白什么是<strong>同源策略？</strong></p><p>同源策略就是用来限制从一个源加载的文档或脚本与来自另一个源的资源进行交互。那怎样判断是否是同源呢？</p><p>如果协议，端口（如果指定了）和主机对于两个页面是相同的，则两个页面具有相同的源，也就是同源。也就是说，要同时满足以下3个条件，才能叫同源：</p><p>协议相同</p><p>端口相同</p><p>主机相同</p><p>举个例子就一目了然了：</p><p>我们来看下面的页面是否与 <code>http://store.company.com/dir/index.html</code> 是同源的？</p><p><code>http://store.company.com/dir/index2.html</code>同源</p><p><code>http://store.company.com/dir2/index3.html</code>同源 虽然在不同文件夹下</p><p><code>https://store.company.com/secure.html</code>不同源 不同的协议(https)</p><p><code>http://store.company.com:81/dir/index.html</code>不同源 不同的端口(81)</p><p><code>http://news.company.com/dir/other.html</code>不同源 不同的主机(news)</p><p>跨域的几种解决方案</p><h4 id="1）、document-domain方法"><a href="#1）、document-domain方法" class="headerlink" title="1）、document.domain方法"></a>1）、document.domain方法</h4><p>我们来看一个具体场景：有一个页面 <a href="http://www.example.com/a.html" target="_blank" rel="noopener">http://www.example.com/a.html</a> ，它里面有一个iframe，这个iframe的源是 <a href="http://example.com/b.html" target="_blank" rel="noopener">http://example.com/b.html</a> ，很显然它们是不同源的，所以我们无法在父页面中操控子页面的内容。</p><p>解决方案如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- b.html --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'example.com'</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.html --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'example.com'</span>;</span><br><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>).contentWindow.document;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面就可以操作iframe里的内容了...</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>所以我们只要将两个页面的document.domain设置成一致就可以了，要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域。</p><p>但是，这种方法只能解决主域相同的跨域问题。</p><h4 id="2）、window-name方法"><a href="#2）、window-name方法" class="headerlink" title="2）、window.name方法"></a>2）、window.name方法</h4><p>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</p><p>我们来看一个具体场景，在一个页面 <code>example.com/a.html</code>中，我们想获取 <code>data.com/data.html</code>中的数据，以下是解决方案：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- data.html --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'data'</span>; <span class="comment">//这是就是我们需要通信的数据</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.html --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span><br><span class="line">        iframe.src = <span class="string">'example.com/b.html'</span>; <span class="comment">// 这里让iframe与父页面同源</span></span><br><span class="line">        </span><br><span class="line">        iframe.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> data = iframe.contentWindow.name; <span class="comment">//在这里我们得到了跨域页面中传来的数据</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="3）、JSONP方法"><a href="#3）、JSONP方法" class="headerlink" title="3）、JSONP方法"></a>3）、JSONP方法</h4><p>JONSP(JSON with Padding)是JSON的一种使用模式。基本原理如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a.html --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dealData</span> (<span class="params">data</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    }</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src='http:/</span><span class="regexp">/example.com/</span>data.php?callback=dealData<span class="string">'&gt;&lt;/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $callback = $_GET[<span class="string">'callback'</span>];</span><br><span class="line">    $data = <span class="string">'data'</span>;</span><br><span class="line">    echo $callback.<span class="string">'('</span>.json_encode($data).<span class="string">')'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><p>这时候在<code>a.html</code>中我们得到了一条js的执行语句<code>dealData('data')</code>，从而达到了跨域的目的。</p><p>所以JSONP的原理其实就是利用引入<code>script</code>不限制源的特点，把处理函数名作为参数传入，然后返回执行语句，仔细阅读以上代码就可以明白里面的意思了。</p><p>如果在jQuery中用JSONP的话就更加简单了：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$.getJSON(<span class="string">''</span>http:<span class="comment">//example.com/data.php?callback=?', function (data) {</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">});</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意jQuery会自动生成一个全局函数来替换<code>callback=?</code>中的问号，之后获取到数据后又会自动销毁，实际上就是起一个临时代理函数的作用。<code>$.getJSON</code>方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用JSONP的回调函数。</p><h3 id="25、-页面编码和被请求的资源编码如果不一致如何处理？"><a href="#25、-页面编码和被请求的资源编码如果不一致如何处理？" class="headerlink" title="25、 页面编码和被请求的资源编码如果不一致如何处理？"></a>25、 页面编码和被请求的资源编码如果不一致如何处理？</h3><p>若请求的资源编码，如外引js文件编码与页面编码不同。可根据外引资源编码方式定义为 charset=”utf-8”或”gbk”。<br>比如：<code>http://www.yyy.com/a.html</code> 中嵌入了一个<code>http://www.xxx.com/test.js</code><br>a.html 的编码是gbk或gb2312的。而引入的js编码为utf-8的 ，那就需要在引入的时候<br><code>&lt;script src="http://www.xxx.com/test.js&amp;quot; charset="utf-8"&gt;&lt;/script&gt;</code></p><h3 id="26、-模块化开发怎么做？"><a href="#26、-模块化开发怎么做？" class="headerlink" title="26、 模块化开发怎么做？"></a>26、 模块化开发怎么做？</h3><p>模块化开发指的是在解决某一个复杂问题或者一系列问题时，依照一种分类的思维把问题进行系统性的分解。模块化是一种将复杂系统分解为代码结构更合理，可维护性更高的可管理的模块方式。对于软件行业：系统被分解为一组高内聚，低耦合的模块。<br>（1）定义封装的模块<br>（2）定义新模块对其他模块的依赖<br>（3）可对其他模块的引入支持。在JavaScript中出现了一些非传统模块开发方式的规范。CommonJS的模块规范，AMD（Asynchronous Module Definition），CMD（Common Module Definition）等。AMD是异步模块定义，所有的模块将被异步加载，模块加载不影响后边语句运行。</p><h3 id="27、-AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别？"><a href="#27、-AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别？" class="headerlink" title="27、 AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？"></a>27、 AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</h3><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>区别：</p><p>1) 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。<br>2) CMD 推崇依赖就近，AMD 推崇依赖前置。<br>3) AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line">    a.doSomething()</span><br><span class="line">    <span class="comment">// 此处略去 100 行</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>) <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">    b.doSomething()</span><br><span class="line">})</span><br><span class="line"><span class="comment">// AMD 默认推荐</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>{ <span class="comment">// 依赖必须一开始就写好</span></span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="comment">// 此处略去 100 行</span></span><br><span class="line">    b.doSomething();</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="28、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）"><a href="#28、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）" class="headerlink" title="28、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）"></a>28、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）</h3><p>核心是js的加载模块，通过正则匹配模块以及模块的依赖关系，保证文件加载的先后顺序，根据文件的路径对加载过的文件做了缓存。</p><h3 id="29、-call和apply"><a href="#29、-call和apply" class="headerlink" title="29、 call和apply"></a>29、 call和apply</h3><p>call（）方法和apply（）方法的作用相同，动态改变某个类的某个方法的运行环境。他们的区别在于接收参数的方式不同。在使用call（）方法时，传递给函数的参数必须逐个列举出来。使用apply（）时，传递给函数的是参数数组。</p><h3 id="30、-documen-write和-innerHTML的区别"><a href="#30、-documen-write和-innerHTML的区别" class="headerlink" title="30、 documen.write和 innerHTML的区别"></a>30、 documen.write和 innerHTML的区别</h3><p>document.write()只能重绘整个页面</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">'&lt;p&gt;5 secs later&lt;/p&gt;'</span>);</span><br><span class="line">}, <span class="number">5000</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ <span class="built_in">document</span>.write(<span class="string">"HI"</span>);</span><br></pre></td></tr></tbody></table></figure><p>innerHTML可以重绘页面的一部分</p><h3 id="31、-回流与重绘"><a href="#31、-回流与重绘" class="headerlink" title="31、 回流与重绘"></a>31、 回流与重绘</h3><p>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树。完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘</p><h3 id="32、-DOM操作"><a href="#32、-DOM操作" class="headerlink" title="32、 DOM操作"></a>32、 DOM操作</h3><p>（1）创建新节点<br>createDocumentFragment() //创建一个DOM片段<br>createElement() //创建一个具体的元素<br>createTextNode() //创建一个文本节点<br>（2）添加、移除、替换、插入<br>appendChild()<br>removeChild()<br>replaceChild()<br>insertBefore() //在已有的子节点前插入一个新的子节点<br>（3）查找<br>getElementsByTagName() //通过标签名称<br>getElementsByName() //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)<br>getElementById() //通过元素Id，唯一性</p><h3 id="33、-数组对象有哪些原生方法，列举一下"><a href="#33、-数组对象有哪些原生方法，列举一下" class="headerlink" title="33、 数组对象有哪些原生方法，列举一下"></a>33、 数组对象有哪些原生方法，列举一下</h3><p>pop、push、shift、unshift、splice、reverse、sort、concat、join、slice、toString、indexOf、lastIndexOf、reduce、reduceRight<br>forEach、map、filter、every、some</p><h3 id="34、-那些操作会造成内存泄漏"><a href="#34、-那些操作会造成内存泄漏" class="headerlink" title="34、 那些操作会造成内存泄漏"></a>34、 那些操作会造成内存泄漏</h3><p>全局变量、闭包、DOM清空或删除时，事件未清除、子元素存在引用</p><h3 id="35、-什么是Cookie-隔离？（或者：请求资源的时候不要带cookie怎么做）"><a href="#35、-什么是Cookie-隔离？（或者：请求资源的时候不要带cookie怎么做）" class="headerlink" title="35、 什么是Cookie 隔离？（或者：请求资源的时候不要带cookie怎么做）"></a>35、 什么是Cookie 隔离？（或者：请求资源的时候不要带cookie怎么做）</h3><p>通过使用多个非主要域名来请求静态文件，如果静态文件都放在主域名下，那静态文件请求的时候带有的cookie的数据提交给server是非常浪费的，还不如隔离开。</p><p>因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。同时这种方式不会将cookie传入server，也减少了server对cookie的处理分析环节，提高了server的http请求的解析速度。</p><h3 id="36、-响应事件"><a href="#36、-响应事件" class="headerlink" title="36、 响应事件"></a>36、 响应事件</h3><p>onclick鼠标点击某个对象；onfocus获取焦点；onblur失去焦点；onmousedown鼠标被按下</p><h3 id="37、-flash和js通过什么类如何交互"><a href="#37、-flash和js通过什么类如何交互" class="headerlink" title="37、 flash和js通过什么类如何交互?"></a>37、 flash和js通过什么类如何交互?</h3><p>Flash提供了ExternalInterface接口与JavaScript通信，ExternalInterface有两个方法，call和addCallback，call的作用是让Flash调用js里的方法，addCallback是用来注册flash函数让js调用。</p><h3 id="38、-Flash与Ajax各自的优缺点？"><a href="#38、-Flash与Ajax各自的优缺点？" class="headerlink" title="38、 Flash与Ajax各自的优缺点？"></a>38、 Flash与Ajax各自的优缺点？</h3><p>Flash：适合处理多媒体、矢量图形、访问机器。但对css、处理文本不足，不容易被搜索。<br>Ajax：对css、文本支持很好，但对多媒体、矢量图形、访问机器不足。</p><h3 id="39、-有效的javascript变量定义规则"><a href="#39、-有效的javascript变量定义规则" class="headerlink" title="39、 有效的javascript变量定义规则"></a>39、 有效的javascript变量定义规则</h3><p>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；其他字符可以是字母、下划线、美元符号或数字。</p><h3 id="40、-XML与JSON的区别？"><a href="#40、-XML与JSON的区别？" class="headerlink" title="40、 XML与JSON的区别？"></a>40、 XML与JSON的区别？</h3><p>1) 数据体积方面。JSON相对于XML来讲，数据的体积小，传递的速度更快些。<br>2) 数据交互方面。JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。<br>3) 数据描述方面。JSON对数据的描述性比XML较差。<br>4) 传输速度方面。JSON的速度要远远快于XML。</p><h3 id="41、-HTML与XML的区别？"><a href="#41、-HTML与XML的区别？" class="headerlink" title="41、 HTML与XML的区别？"></a>41、 HTML与XML的区别？</h3><p>（1）XML用来传输和存储数据，HTML用来显示数据；<br>（2）XML使用的标签不用预先定义<br>（3）XML标签必须成对出现<br>（4）XML对大小写敏感<br>（5）XML中空格不会被删减<br>（6）XML中所有特殊符号必须用编码表示<br>（7）XML中的图片必须有文字说明</p><h3 id="42、-渐进增强与优雅降级"><a href="#42、-渐进增强与优雅降级" class="headerlink" title="42、 渐进增强与优雅降级"></a>42、 渐进增强与优雅降级</h3><p>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进，达到更好的用户体验。<br>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><h3 id="43、-Web-Worker和Web-Socket？"><a href="#43、-Web-Worker和Web-Socket？" class="headerlink" title="43、 Web Worker和Web Socket？"></a>43、 Web Worker和Web Socket？</h3><p>web socket：在一个单独的持久连接上提供全双工、双向的通信。使用自定义的协议（ws://、wss://），同源策略对web socket不适用。<br>web worker：运行在后台的JavaScript，不影响页面的性能。<br>创建worker：var worker = new Worker(url);<br>向worker发送数据：worker.postMessage(data);<br>接收worker返回的数据：worker.onmessage<br>终止一个worker的执行：worker.terminate();</p><h3 id="44、JS垃圾回收机制？"><a href="#44、JS垃圾回收机制？" class="headerlink" title="44、JS垃圾回收机制？"></a>44、JS垃圾回收机制？</h3><p>1) 标记清除：<br>这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。<br>这个算法假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象。从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。</p><p>2) 引用计数：<br>这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。<br>该算法有个限制：无法处理循环引用。两个对象被创建，并互相引用，形成了一个循环。它们被调用之后不会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收。</p><h3 id="45、-web应用从服务器主动推送data到客户端的方式？"><a href="#45、-web应用从服务器主动推送data到客户端的方式？" class="headerlink" title="45、 web应用从服务器主动推送data到客户端的方式？"></a>45、 web应用从服务器主动推送data到客户端的方式？</h3><p>JavaScript数据推送：commet（基于http长连接的服务器推送技术）。<br>基于web socket的推送：SSE（server-send Event）</p><h3 id="46、-如何删除一个cookie？"><a href="#46、-如何删除一个cookie？" class="headerlink" title="46、 如何删除一个cookie？"></a>46、 如何删除一个cookie？</h3><p>1） 将cookie的失效时间设置为过去的时间（expires）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">document</span>.cookie = ‘user=’+ <span class="built_in">encodeURIComponent</span>(‘name’) + <span class="string">';</span></span><br><span class="line"><span class="string">expires=’+ new Date(0);</span></span><br></pre></td></tr></tbody></table></figure><p>2） 将系统时间设置为当前时间往前一点时间</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.setDate(date.getDate()<span class="number">-1</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="47、-attribute与property的区别？"><a href="#47、-attribute与property的区别？" class="headerlink" title="47、 attribute与property的区别？"></a>47、 attribute与property的区别？</h3><p>attribute是dom元素在文档中作为html标签拥有的属性<br>property是dom元素在js中作为对象拥有的属性。<br>所以，对于html的标准属性来说，attribute和property是同步的，是会自动更新的。但对于自定义属性，他们不同步。</p><h3 id="48、-Ajax请求的页面历史记录状态问题？"><a href="#48、-Ajax请求的页面历史记录状态问题？" class="headerlink" title="48、 Ajax请求的页面历史记录状态问题？"></a>48、 Ajax请求的页面历史记录状态问题？</h3><p>（1）通过location.hash记录状态，让浏览器记录Ajax请求时页面状态的变化。<br>（2）通过HTML5的history.pushstate，来实现浏览器地址栏的无刷新改变。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript基础面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js系列之简单操作</title>
      <link href="/articl/8c3aa38b.html"/>
      <url>/articl/8c3aa38b.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/173319aacabd9c01.png" alt=""></p><a id="more"></a><h2 id="1、什么是node-js"><a href="#1、什么是node-js" class="headerlink" title="1、什么是node.js"></a>1、什么是node.js</h2><p>简单说一下什么是node.js</p><ul><li>Node.js 是什么<ul><li>JavaScript 运行时环境</li><li>既不是语言，也不是框架，它是一个平台</li></ul></li><li>Node.js 中的 JavaScript<ul><li>没有 BOM、DOM</li><li>EcmaScript 基本的 JavaScript 语言部分</li><li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul><li>文件操作的能力</li><li>http 服务的能力</li></ul></li></ul></li></ul><br><h2 id="2、nodejs-–-简单读写文件"><a href="#2、nodejs-–-简单读写文件" class="headerlink" title="2、nodejs – 简单读写文件"></a>2、nodejs – 简单读写文件</h2><p>浏览器中的 JavaScript 是没有文件操作的能力的<br>但是 Node 中的 JavaScript 具有文件操作的能力<br>fs 是 file-system 的简写，就是文件系统的意思<br>在 Node 中如果想要进行文件操作，就必须引入 fs 这个核心模块<br>在 fs 这个核心模块中，就提供了所有的文件操作相关的 API<br>例如：fs.readFile 就是用来读取文件的</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>第一个参数就是要读取的文件路径<br>第二个参数是一个回调函数<br>成功<br>    data 数据<br>    error null<br>失败<br>    data undefined没有数据<br>    error 错误对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="number">1.</span> 使用 <span class="built_in">require</span> 方法加载 fs 核心模块</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>{</span><br><span class="line">  <span class="comment">// &lt;Buffer 68 65 6c 6c 6f 20 6e 6f 64 65 6a 73 0d 0a&gt;</span></span><br><span class="line">  <span class="comment">// 文件中存储的其实都是二进制数据 0 1</span></span><br><span class="line">  <span class="comment">// 这里为什么看到的不是 0 和 1 呢？原因是二进制转为 16 进制了</span></span><br><span class="line">  <span class="comment">// 但是无论是二进制01还是16进制，人类都不认识</span></span><br><span class="line">  <span class="comment">// 所以我们可以通过 toString 方法把其转为我们能认识的字符</span></span><br><span class="line">  <span class="comment">// console.log(data)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里就可以通过判断 error 来确认是否有错误发生</span></span><br><span class="line">  <span class="keyword">if</span> (error) {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败了'</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>第一个参数：文件路径<br>第二个参数：文件内容<br>第三个参数：回调函数 — error</p><p>成功<br>   文件写入成功<br>   error 是 null<br>失败<br>    文件写入失败<br>   error 就是错误对象</p><p>​</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'./data/你好.txt'</span>, <span class="string">'大家好，我是阿清大大'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line">    <span class="comment">// console.log('文件写入成功')</span></span><br><span class="line">    <span class="comment">// console.log(error)</span></span><br><span class="line">    <span class="keyword">if</span> (error) {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'写入成功了'</span>)</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="3、简单的http服务"><a href="#3、简单的http服务" class="headerlink" title="3、简单的http服务"></a>3、简单的http服务</h2><p>你可以使用 Node 非常轻松的构建一个 Web 服务器。<br>服务器要干嘛？<br>提供服务：对数据的服务<br>发请求<br>接收请求<br>处理请求<br>给个反馈（发送响应）</p><p>在 Node 中专门提供了一个核心模块：http<br>http 这个模块的职责就是帮你创建编写服务器的</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 加载 http 核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 http.createServer() 方法创建一个 Web 服务器</span></span><br><span class="line"><span class="comment">//    返回一个 Server 实例</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    注册 request 请求事件</span></span><br><span class="line"><span class="comment">//    当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'收到客户端的请求了'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 绑定端口号，启动服务器</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>request 请求事件处理函数，需要接收两个参数：<br>Request 请求对象<br>请求对象可以用来获取客户端的一些请求信息，例如请求路径<br>Response 响应对象<br>响应对象可以用来给客户端发送响应消息</p><p>response 对象有一个方法：write 可以用来给客户端发送响应数据<br>write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>{</span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/ /</span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/a /a</span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/foo/b /foo/b</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到客户端的请求了，请求路径是：'</span> + request.url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// response 对象有一个方法：write 可以用来给客户端发送响应数据</span></span><br><span class="line">    <span class="comment">// write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待</span></span><br><span class="line">    response.write(<span class="string">'hello'</span>)</span><br><span class="line">    response.write(<span class="string">' nodejs'</span>)</span><br><span class="line">    <span class="comment">// 告诉客户端，我的话说完了，你可以呈递给用户了</span></span><br><span class="line">    response.end()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>上面的方式比较麻烦，推荐使用更简单的方式，直接 end 的同时发送响应数据<br><code>res.end('hello nodejs')</code></p><p>根据不同的请求路径发送不同的响应结果</p><ol><li>获取请求路径<br>req.url 获取到的是端口号之后的那一部分路径<br>也就是说所有的 url 都是以 / 开头的</li><li>判断路径处理响应</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建 Server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 监听 request 请求事件，设置请求处理函数</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到请求了，请求路径是：'</span> + req.url)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求我的客户端的地址是：'</span>, req.socket.remoteAddress, req.socket.remotePort)</span><br><span class="line">    <span class="comment">//req.socket.remoteAddress, req.socket.remotePort 别人访问时的IP地址和端口号</span></span><br><span class="line">    <span class="comment">//ip 地址用来定位计算机</span></span><br><span class="line"><span class="comment">//端口号用来定位具体的应用程序</span></span><br><span class="line"><span class="comment">//所有需要联网通信的应用程序都会占用一个端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = req.url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span>) {</span><br><span class="line">        res.end(<span class="string">'index page'</span>)</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/login'</span>) {</span><br><span class="line">        res.end(<span class="string">'login page'</span>)</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/products'</span>) {</span><br><span class="line">        <span class="keyword">var</span> products = [{</span><br><span class="line">                name: <span class="string">'苹果'</span>,</span><br><span class="line">                price: <span class="number">10</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                name: <span class="string">'香蕉'</span>,</span><br><span class="line">                price: <span class="number">20</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                name: <span class="string">'榴莲'</span>,</span><br><span class="line">                price: <span class="number">50</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应内容只能是二进制数据或者字符串</span></span><br><span class="line">        <span class="comment">//  数字</span></span><br><span class="line">        <span class="comment">//  对象</span></span><br><span class="line">        <span class="comment">//  数组</span></span><br><span class="line">        <span class="comment">//  布尔值</span></span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(products))</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        res.end(<span class="string">'404 Not Found.'</span>)</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动成功，可以访问了。。。'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>我们就可以通过访问不同的地址 来响应不同的内容。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE3NTUzNS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述">)<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE3NTk1MC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="require-方法有两个作用："><a href="#require-方法有两个作用：" class="headerlink" title="require 方法有两个作用："></a>require 方法有两个作用：</h3><pre><code>1. 加载文件模块并执行里面的代码2. 拿到被加载文件模块导出的接口对象</code></pre><ul><li>在 Node 中没有全局作用域的概念</li><li>在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件</li><li>require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题<ul><li>模块完全是封闭的</li><li>外部无法访问内部</li><li>内部也无法访问外部</li></ul></li><li>模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题</li><li>但是某些情况下，模块与模块是需要进行通信的</li><li>在每个模块中，都提供了一个对象：<code>exports</code></li><li>该对象默认是一个空对象</li><li>你要做的就是把需要被外部访问使用的成员手动的挂载到 <code>exports</code> 接口对象中</li><li>然后谁来 <code>require</code> 这个模块，谁就可以得到模块内部的 <code>exports</code> 接口对象</li></ul><p><strong>注意：</strong><br><strong>相对路径必须加 ./<br>可以省略后缀名<br>相对路径中的 ./ 不能省略，否则报错</strong></p><br>a.js<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bExports = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bExports.foo)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bExports.add(<span class="number">10</span>, <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bExports.age)</span><br><span class="line"></span><br><span class="line">bExports.readFile(<span class="string">'./a.js'</span>)</span><br></pre></td></tr></tbody></table></figure><p>b.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'bbb'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(exports)</span></span><br><span class="line"></span><br><span class="line">exports.foo = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">exports.add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">}</span><br><span class="line">exports.readFile = <span class="function"><span class="keyword">function</span> (<span class="params">path, callback</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'文件路径：'</span>, path)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line">exports.age = age</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> x - y</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行服务a.js结果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE4MTQyNi5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>会输出<code>hello</code> ，因为b.js中挂载的属性<code>foo</code> 的值是<code>hello</code>。同理 <code>add函数</code>和属性<code>age</code>。</p><h3 id="这里关于中文乱码的问题："><a href="#这里关于中文乱码的问题：" class="headerlink" title="这里关于中文乱码的问题："></a>这里关于中文乱码的问题：</h3><p>在服务端默认发送的数据，其实是 utf8 编码的内容<br>但是浏览器不知道你是 utf8 编码的内容<br>浏览器在不知道服务器响应内容的编码的情况下会按照当前操作系统的默认编码去解析<br>中文操作系统默认是 gbk<br>解决方法就是正确的告诉浏览器我给你发送的内容是什么编码的<br>在 http 协议中，Content-Type 就是用来告知对方我给你发送的数据内容是什么类型<br><code>res.setHeader('Content-Type', 'text/plain; charset=utf-8')</code><br><code>res.end('hello 世界')</code></p><p>不同的资源对应的 Content-Type 是不一样，具体照：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a><br>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</p><p><code>text/plain</code>就是普通文本<br>果你发送的是 html 格式的字符串，则也要告诉浏览器我给你发送是 <code>text/html</code> 格式的内容</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 结合 fs 发送文件中的数据</span></span><br><span class="line"><span class="comment">// 2. Content-Type</span></span><br><span class="line"><span class="comment">//    http://tool.oschina.net/commons</span></span><br><span class="line"><span class="comment">//    不同的资源对应的 Content-Type 是不一样的</span></span><br><span class="line"><span class="comment">//    图片不需要指定编码</span></span><br><span class="line"><span class="comment">//    一般只为字符数据才指定编码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>{</span><br><span class="line">  <span class="comment">// / index.html</span></span><br><span class="line">  <span class="keyword">var</span> url = req.url</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">'/'</span>) {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们要发送的还是在文件中的内容</span></span><br><span class="line">    fs.readFile(<span class="string">'./resource/index.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>{</span><br><span class="line">      <span class="keyword">if</span> (err) {</span><br><span class="line">        res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)</span><br><span class="line">        res.end(<span class="string">'文件读取失败，请稍后重试！'</span>)</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// data 默认是二进制数据，可以通过 .toString 转为咱们能识别的字符串</span></span><br><span class="line">        <span class="comment">// res.end() 支持两种数据类型，一种是二进制，一种是字符串</span></span><br><span class="line">        res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)</span><br><span class="line">        res.end(data)</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/xiaoming'</span>) {</span><br><span class="line">    <span class="comment">// url：统一资源定位符</span></span><br><span class="line">    <span class="comment">// 一个 url 最终其实是要对应到一个资源的</span></span><br><span class="line">    fs.readFile(<span class="string">'./resource/ab2.jpg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>{</span><br><span class="line">      <span class="keyword">if</span> (err) {</span><br><span class="line">        res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)</span><br><span class="line">        res.end(<span class="string">'文件读取失败，请稍后重试！'</span>)</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// data 默认是二进制数据，可以通过 .toString 转为咱们能识别的字符串</span></span><br><span class="line">        <span class="comment">// res.end() 支持两种数据类型，一种是二进制，一种是字符串</span></span><br><span class="line">        <span class="comment">// 图片就不需要指定编码了，因为我们常说的编码一般指的是：字符编码</span></span><br><span class="line">        res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'image/jpeg'</span>)</span><br><span class="line">        res.end(data)</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running...'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="简单http服务器总结"><a href="#简单http服务器总结" class="headerlink" title="简单http服务器总结"></a>简单http服务器总结</h3><ul><li>require<ul><li>1、加载文件模块并执行里面的代码</li><li>2、拿到被加载文件模块导出的接口对象</li></ul></li><li>端口号<ul><li>ip 地址定位计算机</li><li>端口号定位具体的应用程序</li></ul></li><li>Content-Type<ul><li>服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉</li><li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li><li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li></ul></li><li>通过网络发送文件<ul><li>发送的并不是文件，本质上来讲发送是文件的内容</li><li>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</li></ul></li></ul><h2 id="4、核心模块"><a href="#4、核心模块" class="headerlink" title="4、核心模块"></a>4、核心模块</h2><ul><li>核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如<ul><li>fs 文件操作模块</li><li>http 网络服务构建模块</li><li>os 操作系统信息模块</li><li>path 路径处理模块</li><li>。。。。</li></ul></li><li>所有核心模块在使用的时候都必须手动的先使用 <code>require</code> 方法来加载，然后才可以使用，例如：<ul><li><code>var fs = require('fs')</code></li></ul></li></ul><br><br>愿你的坚持总有收获<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6箭头函数与普通函数的区别</title>
      <link href="/articl/84b7900e.html"/>
      <url>/articl/84b7900e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1732ee021d2e3247.png" alt=""></p><a id="more"></a><h1 id="ES6箭头函数与普通函数的区别"><a href="#ES6箭头函数与普通函数的区别" class="headerlink" title="ES6箭头函数与普通函数的区别"></a>ES6箭头函数与普通函数的区别</h1><h2 id="ES6箭头函数与普通函数的区别-1"><a href="#ES6箭头函数与普通函数的区别-1" class="headerlink" title="ES6箭头函数与普通函数的区别"></a>ES6箭头函数与普通函数的区别</h2><p>普通函数中的<code>this</code>指向函数被调用的对象，因此对于不同的调用者，<code>this</code>的值是不同的。而箭头函数中并没有自己的<code>this</code>（同时，箭头函数中也没有其他的局部变量，如this，argument，super等），所以箭头函数中的<code>this</code>是固定的，它指向定义该函数时所在的对象。</p><h2 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h2><p>下面我们举一个简单的例子。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a  = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    foo : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">obj.foo(); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> bar = obj;</span><br><span class="line">bar.a = <span class="number">2</span>;</span><br><span class="line">bar.foo(); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> baz = obj.foo;</span><br><span class="line">baz(); <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><p>上述代码中，出现了三种情况：</p><p>1 、直接通过obj调用其中的方法<code>foo</code>，此时，<code>this</code>就会指向调用foo函数的对象，也就是obj;<br>2 、将obj对象赋给一个新的对象bar，此时通过bar调用foo函数，<code>this</code>的值就会指向调用者bar；<br>3 、将obj.foo赋给一个新对象baz，通过baz()调用foo函数，此时的this指向window；</p><p>由此我们可以得出结论：</p><p>1、普通函数的this总是指向它的直接调用者。<br>2、在严格模式下，没找到直接调用者，则函数中的<code>this</code>是<code>undefined</code>。<br>3、在默认模式下（非严格模式），没找到直接调用者，则函数中的<code>this</code>指向<code>window</code>。</p><p>再考虑一下下面的情况：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    foo : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        setTimeout(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="built_in">console</span>.log(<span class="keyword">this</span>.a),<span class="number">3000</span>})</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">obj.foo(); <span class="comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure><p>你可能会认为此时的输出应该为1，但是结果却是<code>undefined</code>。因为此时this的指向是全局的<code>window</code>对象。<br>通过以上例子，可以得出以下总结：</p><p>1、对于方法（即通过对象调用了该函数），普通函数中的<code>this</code>总是指向它的调用者。<br>2、对于一般函数，this指向全局变量（非严格模式下）或者<code>undefined</code>（严格模式下）。在上例中setTimeout中的function未被任何对象调用，因此它的<code>this</code>指向还是<code>window</code>对象。因此，这也可以总结成：javascript 的<code>this</code>可以简单的认为是后期绑定，没有地方绑定的时候，默认绑定<code>window</code>或<code>undefined</code>。</p><p>如果我们希望可以在上例的setTimeout函数中使用<code>this</code>要怎么做呢？在箭头函数出现之前，我们往往会使用以下两种方法：</p><p>1、在setTimeout函数的外部，也就是上层函数<code>foo</code>内部通过将<code>this</code>值赋给一个临时变量来实现。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    foo : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> that  = <span class="keyword">this</span>;</span><br><span class="line">        setTimeout(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="built_in">console</span>.log(that.a),<span class="number">3000</span>})</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">obj.foo(); <span class="comment">//1</span></span><br></pre></td></tr></tbody></table></figure><p>2、通过<code>bind()</code>来绑定<code>this</code>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    foo : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        setTimeout(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="built_in">console</span>.log(<span class="keyword">this</span>.a),<span class="number">3000</span>}.bind(<span class="keyword">this</span>))</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">obj.foo(); <span class="comment">//1</span></span><br></pre></td></tr></tbody></table></figure><p>这种现象在ES6引入箭头函数后得到了改善。</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数是ES6中引入的新特性，使用方法为：</p><p>其中()内是要带入的参数，{}内是要执行的语句。箭头函数是函数式编程的一种体现，函数式编程将更多的关注点放在输入和输出的关系，省去了过程的一些因素，因此箭头函数中没有自己的<code>this</code>，<code>arguments</code>，<code>new target（ES6）</code>和 <code>super(ES6)</code>。箭头函数相当于匿名函数，因此不能使用<code>new</code>来作为构造函数使用。</p><p>箭头函数中的this始终指向其父级作用域中的<code>this</code>。换句话说，箭头函数会捕获其所在的上下文的<code>this</code>值，作为自己的<code>this</code>值。任何方法都改变不了其指向，如<code>call(), bind(), apply()</code>。在箭头函数中调用 <code>this</code>时，仅仅是简单的沿着作用域链向上寻找，找到最近的一个 this 拿来使用，它与调用时的上下文无关。我们用代码来解释一下。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    b: <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// undefined</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …}</span></span><br><span class="line">    },</span><br><span class="line">    c: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 10</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// {a: 10, b: ƒ, c: ƒ}</span></span><br><span class="line">    },</span><br><span class="line">    d:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 10</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    e:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">      setTime</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">  obj.b(); </span><br><span class="line">  obj.c();</span><br><span class="line">  obj.d()();</span><br></pre></td></tr></tbody></table></figure><p>简单分析一下代码，obj.b（）中的<code>this</code>会继承父级上下文中的<code>this</code>值，也就是与obj有相同的<code>this</code>指向，为全局变量<code>window</code>。obj.c()的<code>this</code>指向即为调用者obj，obj.d().()中的<code>this</code>也继承自父级上下文中的<code>this</code>，即d的<code>this</code>指向，也就是obj。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>箭头函数没有自己的<code>this</code>，箭头函数的<code>this</code>不是调用的时候决定的，而是在定义的时候处在的对象就是它的<code>this</code>。<br>箭头函数的<code>this</code>看外层是否有函数，如果有，外层函数的<code>this</code>就是内部箭头函数的<code>this</code>，如果没有，则<code>this</code>，是<code>window</code>。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用API接口集合</title>
      <link href="/articl/34513ff7.html"/>
      <url>/articl/34513ff7.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用API接口集合"><a href="#常用API接口集合" class="headerlink" title="常用API接口集合"></a>常用API接口集合</h1><p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/20200702221807.png" alt=""></p><a id="more"></a><p><a href="https://api.btstu.cn/" target="_blank" rel="noopener">不知道叫啥的api——-知道了，叫博天api</a></p><br><p><a href="http://cdn.asilu.com/#geo" target="_blank" rel="noopener">在线接口测试</a></p><br><p><a href="https://www.bejson.com/" target="_blank" rel="noopener">在线格式化JSNO工具</a></p><br><p><a href="https://www.tianqi.com/dingzhi/" target="_blank" rel="noopener">天气预报代码_天气预报插件_免费天气预报代码(插件)调用——天气网</a></p><br><p><a href="https://www.jinrishici.com/#" target="_blank" rel="noopener">今日诗词 - 一言API</a></p><br><p><a href="https://blog.csdn.net/m0_37682004/article/details/82314055" target="_blank" rel="noopener">博客参考–获取必应每日壁纸(api)</a></p><br><br><blockquote><h3 id="获取网易新闻"><a href="#获取网易新闻" class="headerlink" title="获取网易新闻"></a>获取网易新闻</h3></blockquote><p>请求方式：POST</p><p>请求地址：<a href="https://api.apiopen.top/getWangYiNews" target="_blank" rel="noopener">https://api.apiopen.top/getWangYiNews</a></p><br><blockquote><h3 id="腾讯新闻接口"><a href="#腾讯新闻接口" class="headerlink" title="腾讯新闻接口"></a>腾讯新闻接口</h3></blockquote><p>请求方式：POST</p><p>请求地址：<a href="https://pacaio.match.qq.com/irs/rcd?cid=56&amp;ext=games&amp;token=c786875b8e04da17b24ea5e332745e0f&amp;num=20&amp;expIds=20190106A13PFT%7C20190108A04MLS&amp;page=0" target="_blank" rel="noopener">https://pacaio.match.qq.com/irs/rcd?cid=56&amp;ext=games&amp;token=c786875b8e04da17b24ea5e332745e0f&amp;num=20&amp;expIds=20190106A13PFT%7C20190108A04MLS&amp;page=0</a></p><blockquote><h3 id="获取天气"><a href="#获取天气" class="headerlink" title="获取天气"></a>获取天气</h3></blockquote><p>请求方式：POST</p><p>请求地址：<a href="https://api.asilu.com/weather/?city=${" target="_blank" rel="noopener" 北京"}&callback="weather&quot;">https://api.asilu.com/weather/?city=${“北京”}&amp;callback=weather</a></p><a href="https://api.asilu.com/weather/?city=${" target="_blank" rel="noopener" 北京"}&callback="weather&quot;"><br></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 稽古振今 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片工具网址导航 处理图片免费网站集合</title>
      <link href="/articl/2cab4a69.html"/>
      <url>/articl/2cab4a69.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1731fc32de117ff7.png" alt=""></p><a id="more"></a><h1 id="图片工具网址导航-处理图片免费网站集合-图床-smiley"><a href="#图片工具网址导航-处理图片免费网站集合-图床-smiley" class="headerlink" title="图片工具网址导航 处理图片免费网站集合 图床 :smiley:"></a>图片工具网址导航 处理图片免费网站集合 图床 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span></h1><br><br><h2 id="图床："><a href="#图床：" class="headerlink" title="图床："></a>图床：</h2><p><a href="https://www.superbed.cn/" target="_blank" rel="noopener">聚合图床</a> <a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a> <a href="https://sm.ms/" target="_blank" rel="noopener">SM</a> <a href="https://upload.cc/" target="_blank" rel="noopener">upload.cc</a></p><h2 id="免费商用图库"><a href="#免费商用图库" class="headerlink" title="免费商用图库"></a>免费商用图库</h2><p><a href="https://pixabay.com/" target="_blank" rel="noopener">pixabay</a> <a href="https://unsplash.com/" target="_blank" rel="noopener">unsplash</a> <a href="https://gratisography.com/" target="_blank" rel="noopener">gratisogra</a></p><h2 id="剪切图片"><a href="#剪切图片" class="headerlink" title="剪切图片"></a>剪切图片</h2><p><a href="https://www.smartresize.com/zh-cn" target="_blank" rel="noopener">裁剪图片工具</a></p><h2 id="删除背景"><a href="#删除背景" class="headerlink" title="删除背景"></a>删除背景</h2><p><a href="https://www.remove.bg/" target="_blank" rel="noopener">生成透明图片</a></p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p><a href="https://tinify.cn/" target="_blank" rel="noopener">tinify</a></p><h3 id="免费图片网站"><a href="#免费图片网站" class="headerlink" title="免费图片网站"></a>免费图片网站</h3><p><a href="https://unsplash.com/s/photos/horizontal-version" target="_blank" rel="noopener">适合做壁纸</a></p><p><a href="https://www.ssyer.com/" target="_blank" rel="noopener">搜颜色无版权</a></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 稽古振今 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具网站 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯js之代码雨特效</title>
      <link href="/articl/93c8251e.html"/>
      <url>/articl/93c8251e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/172bb36aadfb373f.png" alt=""></p><a id="more"></a><h1 id="纯js之代码雨特效-laughing"><a href="#纯js之代码雨特效-laughing" class="headerlink" title="纯js之代码雨特效:laughing:"></a>纯js之代码雨特效<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></h1><hr><h5 id="html代码："><a href="#html代码：" class="headerlink" title="html代码："></a>html代码：</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"code_rain_canvas"</span> <span class="attr">width</span>=<span class="string">"1440"</span> <span class="attr">height</span>=<span class="string">"900"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="js-代码："><a href="#js-代码：" class="headerlink" title="js 代码："></a>js 代码：</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">         <span class="comment">//获取画布对象</span></span><br><span class="line">         <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"code_rain_canvas"</span>);</span><br><span class="line">         <span class="comment">//获取画布的上下文</span></span><br><span class="line">         <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">         <span class="keyword">var</span> s = <span class="built_in">window</span>.screen;</span><br><span class="line">         <span class="keyword">var</span> W = canvas.width = s.width;</span><br><span class="line">         <span class="keyword">var</span> H = canvas.height;</span><br><span class="line">         <span class="comment">//获取浏览器屏幕的宽度和高度</span></span><br><span class="line">         <span class="comment">//var W = window.innerWidth;</span></span><br><span class="line">         <span class="comment">//var H = window.innerHeight;</span></span><br><span class="line">         <span class="comment">//设置canvas的宽度和高度</span></span><br><span class="line">         canvas.width = W;</span><br><span class="line">         canvas.height = H;</span><br><span class="line">         <span class="comment">//每个文字的字体大小</span></span><br><span class="line">         <span class="keyword">var</span> fontSize = <span class="number">12</span>;</span><br><span class="line">         <span class="comment">//计算列</span></span><br><span class="line">         <span class="keyword">var</span> colunms = <span class="built_in">Math</span>.floor(W / fontSize);</span><br><span class="line">         <span class="comment">//记录每列文字的y轴坐标</span></span><br><span class="line">         <span class="keyword">var</span> drops = [];</span><br><span class="line">         <span class="comment">//给每一个文字初始化一个起始点的位置</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colunms; i++) {</span><br><span class="line">             drops.push(<span class="number">0</span>);</span><br><span class="line">         }</span><br><span class="line">         <span class="comment">//运动的文字</span></span><br><span class="line">         <span class="keyword">var</span> str = <span class="string">"WELCOME TO WWW.ITRHX.COM"</span>;</span><br><span class="line">         <span class="comment">//4:fillText(str,x,y);原理就是去更改y的坐标位置</span></span><br><span class="line">         <span class="comment">//绘画的函数</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>{</span><br><span class="line">             context.fillStyle = <span class="string">"rgba(238,238,238,.08)"</span>; <span class="comment">//遮盖层</span></span><br><span class="line">             context.fillRect(<span class="number">0</span>, <span class="number">0</span>, W, H);</span><br><span class="line">             <span class="comment">//给字体设置样式</span></span><br><span class="line">             context.font = <span class="string">"600 "</span> + fontSize + <span class="string">"px  Georgia"</span>;</span><br><span class="line">             <span class="comment">//给字体添加颜色</span></span><br><span class="line">             context.fillStyle = [<span class="string">"#33B5E5"</span>, <span class="string">"#0099CC"</span>, <span class="string">"#AA66CC"</span>, <span class="string">"#9933CC"</span>, <span class="string">"#99CC00"</span>, <span class="string">"#669900"</span>, <span class="string">"#FFBB33"</span>, <span class="string">"#FF8800"</span>, <span class="string">"#FF4444"</span>, <span class="string">"#CC0000"</span>][<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>)]; <span class="comment">//randColor();可以rgb,hsl, 标准色，十六进制颜色</span></span><br><span class="line">             <span class="comment">//写入画布中</span></span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colunms; i++) {</span><br><span class="line">                 <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * str.length);</span><br><span class="line">                 <span class="keyword">var</span> x = i * fontSize;</span><br><span class="line">                 <span class="keyword">var</span> y = drops[i] * fontSize;</span><br><span class="line">                 context.fillText(str[index], x, y);</span><br><span class="line">                 <span class="comment">//如果要改变时间，肯定就是改变每次他的起点</span></span><br><span class="line">                 <span class="keyword">if</span> (y &gt;= canvas.height &amp;&amp; <span class="built_in">Math</span>.random() &gt; <span class="number">0.99</span>) {</span><br><span class="line">                     drops[i] = <span class="number">0</span>;</span><br><span class="line">                 }</span><br><span class="line">                 drops[i]++;</span><br><span class="line">             }</span><br><span class="line">         };</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">randColor</span>(<span class="params"></span>) </span>{ <span class="comment">//随机颜色</span></span><br><span class="line">             <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">             <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">             <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">             <span class="keyword">return</span> <span class="string">"rgb("</span> + r + <span class="string">","</span> + g + <span class="string">","</span> + b + <span class="string">")"</span>;</span><br><span class="line">         }</span><br><span class="line">         draw();</span><br><span class="line">         setInterval(draw, <span class="number">35</span>);</span><br><span class="line">     };</span><br></pre></td></tr></tbody></table></figure><h5 id="展示效果："><a href="#展示效果：" class="headerlink" title="展示效果："></a>展示效果：</h5><p><img src="https://img-blog.csdnimg.cn/20200629171930444.gif" alt="在这里插入图片描述"></p><p><br><br></p><p>愿你的坚持终有收获</p><p><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 庖丁解牛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emoji表情</title>
      <link href="/articl/ad5ef170.html"/>
      <url>/articl/ad5ef170.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1722a96792420630.png" alt=""></p><a id="more"></a><h1 id="简单测试一下"><a href="#简单测试一下" class="headerlink" title="简单测试一下"></a>简单测试一下</h1><p>😄😀😃🤔</p><p>🔷🔹</p><p>🔶🔸</p><p>⭕✔</p><p>🚩🏳️‍🌈</p><p>🔴🟠🟡🟢🔵🟣</p><br><br><p>emoji表情汇总1<a href="https://emoji.muan.co/" target="_blank" rel="noopener">https://emoji.muan.co/</a></p><p>emoji表情汇总2<a href="https://www.emojiall.com/zh-hans" target="_blank" rel="noopener">https://www.emojiall.com/zh-hans</a></p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 稽古振今 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颜表情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6之 Object.assign()详解</title>
      <link href="/articl/d4437c34.html"/>
      <url>/articl/d4437c34.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/172a2a72642a945e.png" alt=""></p><a id="more"></a><h1 id="es6之-Object-assign"><a href="#es6之-Object-assign" class="headerlink" title="es6之 Object.assign()"></a>es6之 Object.assign()</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><p><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p><!--more--><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = { <span class="attr">a</span>: <span class="number">1</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = { <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> source2 = { <span class="attr">c</span>: <span class="number">3</span> };</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line"><span class="built_in">console</span>.log(target) <span class="comment">// {a:1, b:2, c:3}</span></span><br></pre></td></tr></tbody></table></figure><p>我们需要注意的是，如果目标对象和源对象有同名属性。或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = { <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> source2 = { <span class="attr">c</span>: <span class="number">3</span> };</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// {a:1, b:2, c:3}</span></span><br></pre></td></tr></tbody></table></figure><p>如果只有一个参数，<code>Object.assign</code>会直接返回该参数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {<span class="attr">a</span>: <span class="number">100</span>};</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(obj) === obj) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>如果该参数不是对象，则会先转成对象，然后返回。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>.assign(<span class="number">2</span>)) <span class="comment">// "object"</span></span><br></pre></td></tr></tbody></table></figure><p>由于<code>undefined</code>和<code>null</code>无法转成对象，所以如果它们作为参数，就会报错。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(<span class="literal">undefined</span>) <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="literal">null</span>) <span class="comment">// 报错</span></span><br></pre></td></tr></tbody></table></figure><p>如果非对象参数出现在源对象的位置（即不是第一个参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果<code>undefined</code>和<code>null</code>不在首参数，就不会报错。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {<span class="attr">a</span>: <span class="number">1</span>};</span><br><span class="line"><span class="built_in">Object</span>.assign(obj, <span class="literal">undefined</span>) === obj <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.assign(obj, <span class="literal">null</span>) === obj <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。举个栗子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> v3 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign({}, v1, v2, v3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// { "0": "a", "1": "b", "2": "c" }</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>v1</code>、<code>v2</code>、<code>v3</code>分别是字符串、布尔值和数值，结果只有字符串合入目标对象（以字符数组的形式），数值和布尔值都会被忽略。<strong>这是因为只有字符串的包装对象，会产生可枚举属性。</strong></p><p>我们还要注意一点：<code>Object.assign</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。举个栗子</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign({<span class="attr">b</span>: <span class="string">'c'</span>},</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty({}, <span class="string">'invisible'</span>, {</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">'hello'</span></span><br><span class="line">  })</span><br><span class="line">)</span><br><span class="line"><span class="comment">// { b: 'c' }</span></span><br></pre></td></tr></tbody></table></figure><p>属性名为 Symbol 值的属性，也会被<code>Object.assign</code>拷贝。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign({ <span class="attr">a</span>: <span class="string">'b'</span> }, { [<span class="built_in">Symbol</span>(<span class="string">'c'</span>)]: <span class="string">'d'</span> })</span><br><span class="line"><span class="comment">// { a: 'b', Symbol(c): 'd' }</span></span><br></pre></td></tr></tbody></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p><strong>浅拷贝</strong></p><p><code>Object.assign</code>方法实行的是浅拷贝，而不是深拷贝。也就是说，<strong>如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = {<span class="attr">a</span>: {<span class="attr">b</span>: <span class="number">1</span>}};</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign({}, obj1);</span><br><span class="line"></span><br><span class="line">obj1.a.b = <span class="number">2</span>;</span><br><span class="line">obj2.a.b <span class="comment">// 2</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，源对象<code>obj1</code>的<code>a</code>属性的值是一个对象，<code>Object.assign</code>拷贝得到的是这个对象的引用。这个对象的任何变化，都会影响到目标对象上面。这一点我们要万分注意。</p><p>对比一个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = {</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign({}, obj1)</span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// {a: 1, b: 2}</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">//  {a: 1, b: 2}</span></span><br><span class="line"></span><br><span class="line">obj2.b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//  {a: 1, b: 2}</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">//  {a: 1, b: 3}</span></span><br></pre></td></tr></tbody></table></figure><p>上面这个例子扩展运算符拷贝的对象是<strong>基础数据类型</strong>，因此对<code>obj2</code>的修改并不会影响<code>obj1</code> .</p><p>也就是说，<strong>如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</strong> 如果是<strong>基础数据类型</strong>，这类变量的拷贝的时候会完整的复制一份。</p></li></ul><ul><li><p><strong>数组的处理</strong></p><p><code>Object.assign</code>会把数组视为对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// [4, 5, 3]</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>Object.assign</code>把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性<code>4</code>覆盖了目标数组的 0 号属性<code>1</code>。</p></li></ul><ul><li><p><strong>同名属性的替换</strong></p><p>对于这种嵌套的对象，一旦遇到同名属性，<code>Object.assign</code>的处理方法是替换，而不是添加。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = { <span class="attr">a</span>: { <span class="attr">name</span>: <span class="string">'aqing'</span>, <span class="attr">age</span>: <span class="number">12</span> } }</span><br><span class="line"><span class="keyword">const</span> source = { <span class="attr">a</span>: { <span class="attr">name</span>: <span class="string">'小明'</span> } }</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source)  </span><br><span class="line"><span class="comment">// { a: { name: '小明' } }</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>target</code>对象的<code>name</code>属性被<code>source</code>对象的<code>name</code>属性整个替换掉了，而不会得到<code>{ a: { name: '小明', age: 12 } }</code>的结果。这并不是我们想要的结果，我们需要特别注意。</p></li></ul><ul><li><p><strong>取值函数的处理</strong></p><p><code>Object.assign</code>只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。举个栗子</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = {</span><br><span class="line">    <span class="keyword">get</span> age() {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">const</span> target = {};</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(target, source))  <span class="comment">//{age: 20}</span></span><br></pre></td></tr></tbody></table></figure><p>上面例子中，<code>source</code>对象的<code>age</code>取值函数，<code>Object.assign</code>不会复制这个取值函数，只会拿到值以后，将这个值复制过去。</p></li></ul><h2 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h2><ul><li><p><strong>为对象添加属性</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">constructor</span>(x, y) {</span><br><span class="line">         <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, {</span><br><span class="line">            name: <span class="string">'aqing'</span>,</span><br><span class="line">            age: <span class="number">12</span></span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">//Person {name: "aqing", age: 12}</span></span><br></pre></td></tr></tbody></table></figure><p>上面方法通过<code>Object.assign</code>方法，将<code>x</code>属性和<code>y</code>属性添加到<code>Point</code>类的对象实例</p></li></ul><ul><li><p><strong>为对象添加方法</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, {</span><br><span class="line">  someMethod(arg1, arg2) {</span><br><span class="line">    ···</span><br><span class="line">  },</span><br><span class="line">  anotherMethod() {</span><br><span class="line">    ···</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>{</span><br><span class="line">  ···</span><br><span class="line">};</span><br><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  ···</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用<code>assign</code>方法添加到<code>SomeClass.prototype</code>之中。</p></li></ul><ul><li><p><strong>合并多个对象</strong></p><p>将多个对象合并到某个对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = { <span class="attr">a</span>: <span class="number">1</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = { <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> source2 = { <span class="attr">c</span>: <span class="number">3</span> };</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// {a:1, b:2, c:3}</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>克隆对象</strong></p><p>举个简单的例子</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign({}, origin);</span><br><span class="line">}</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: {</span><br><span class="line">        name: <span class="string">"aqing"</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">let</span> obj1 = {}</span><br><span class="line">  </span><br><span class="line">obj1 = <span class="built_in">Object</span>.setPrototypeOf(obj1, obj); <span class="comment">//将obj1的原型设置为obj</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//{}</span></span><br><span class="line">  </span><br><span class="line">obj1.c = <span class="number">3</span>; <span class="comment">//为obj1添加属性c</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//{c: 3}</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> obj2 = clone(obj1); <span class="comment">//克隆obj1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">//{c: 3}</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码将<code>obj1</code>对象拷贝到一个<code>obj2</code>，就得到了<code>obj1</code>的克隆。不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如 <code>obj2.a</code>的值为<code>undefined</code>如果想要保持继承链，可以采用下面的代码。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再看上面的例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">}</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: {</span><br><span class="line">        name: <span class="string">"aqing"</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">let</span> obj1 = {}</span><br><span class="line">  </span><br><span class="line">obj1 = <span class="built_in">Object</span>.setPrototypeOf(obj1, obj); <span class="comment">//将obj1的原型设置为obj</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//{}</span></span><br><span class="line">  </span><br><span class="line">obj1.c = <span class="number">3</span>; <span class="comment">//为obj1添加属性c</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//{c: 3}</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> obj2 = clone(obj1); <span class="comment">//克隆obj1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">//{c: 3}</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">//1</span></span><br></pre></td></tr></tbody></table></figure><p>上面的代码中，因为<code>obj2</code>保持了 <code>obj1</code>的原型链，所以<code>obj2.a</code>的值为<code>1</code>。</p></li></ul><p><br><br><br>愿你的坚持终有收获。</p><p><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6之扩展运算符 (...)   简称三个点</title>
      <link href="/articl/9581931.html"/>
      <url>/articl/9581931.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1729b3f6e0a9eed1.png" alt=""></p><a id="more"></a><h1 id="es6之扩展运算符-…-简称三个点"><a href="#es6之扩展运算符-…-简称三个点" class="headerlink" title="es6之扩展运算符 (…)   简称三个点"></a>es6之扩展运算符 (…) 简称三个点</h1><h2 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h2><p>理解对象的扩展运算符其实没有那么难，只要记住一句话就可以轻松掌握它:smiley:</p><blockquote><p><strong>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong></p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bar = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">let</span> baz = { ...bar }; <span class="comment">// { a: 1, b: 2 }</span></span><br></pre></td></tr></tbody></table></figure><p>上面的代码就相当于</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bar = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">let</span> baz = <span class="built_in">Object</span>.assign({}, bar); <span class="comment">// { a: 1, b: 2 }</span></span><br></pre></td></tr></tbody></table></figure><p><strong><code style="color:red">Object.assign</code></strong>方法用于对象的合并，将源对象（<strong><code style="color:red">source</code></strong>）的所有可枚举属性，复制到目标对象（<strong><code style="color:red">target</code></strong>）。</p><p><strong><code style="color:red">Object.assign</code></strong>方法的第一个参数是目标对象，后面的参数都是源对象。<strong>(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。</strong> <strong><code style="color:red">Object.assign</code></strong> 的详细使用请看<a href="https://blog.csdn.net/wzg0817/article/details/106982135" target="_blank" rel="noopener">这里</a></p><p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bar = {<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>};</span><br><span class="line"><span class="keyword">let</span> baz = {...bar, ...{<span class="attr">a</span>:<span class="number">2</span>, <span class="attr">b</span>: <span class="number">4</span>}};  <span class="comment">// {a: 2, b: 4}</span></span><br></pre></td></tr></tbody></table></figure><p>这里有点需要注意的是扩展运算符对对象实例的拷贝属于一种浅拷贝。肯定有人要问什么是浅拷贝？我们知道<code style="color:red">javascript</code>中有两种数据类型，分别是基础数据类型和引用数据类型。基础数据类型是按值访问的，常见的基础数据类型有<code style="color:red">Number</code>、<code style="color:red">Boolean</code>、<code style="color:red">String</code>、<code style="color:red">Null</code>、<code style="color:red">Undefined</code>、<code style="color:red">Symbol</code>、<code style="color:red">BigInt</code>，这类变量的拷贝的时候会完整的复制一份；引用数据类型比如<code style="color:red">Array</code>，在拷贝的时候拷贝的是对象的引用，当原对象发生变化的时候，拷贝对象也跟着变化，比如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>};</span><br><span class="line"><span class="keyword">let</span> obj2 = { ...obj1, <span class="attr">b</span>: <span class="string">'aqing'</span>};</span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// {a: 1, b: 2}</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">//  {a: 1, b: "aqing"}</span></span><br></pre></td></tr></tbody></table></figure><p>上面这个例子扩展运算符拷贝的对象是<strong>基础数据类型</strong>，因此对<code>obj2</code>的修改并不会影响<code>obj1</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: {<span class="attr">name</span>: <span class="string">'a'</span>}};</span><br><span class="line"><span class="keyword">let</span> obj2 = { ...obj1};</span><br><span class="line">obj2.c.name = <span class="string">'aqing'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// {a: 1, b: 2, c: {name: 'aqing'}}</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// {a: 1, b: 2, c: {name: 'aqing'}}</span></span><br></pre></td></tr></tbody></table></figure><p>这里可以看到，对<code>obj2</code>的修改影响到了被拷贝对象<code>obj1</code>，原因上面已经说了，因为<code>obj1</code>中的对象<code>c</code>是一个引用数据类型，拷贝的时候拷贝的是对象的引用。</p><h3 id="解构赋值与扩展运算符"><a href="#解构赋值与扩展运算符" class="headerlink" title="解构赋值与扩展运算符"></a>解构赋值与扩展运算符</h3><p>对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> { x, y, ...z } = { <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> };</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// { a: 3, b: 4 }</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：由于解构赋值要求等号右边是一个对象，所以如果等号右边是<code>undefined</code>或<code>null</code>，就会报错，因为它们无法转为对象。而且解构赋值必须是最后一个参数，否则会报错。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> { ...z } = <span class="literal">null</span>; <span class="comment">// 运行时错误</span></span><br><span class="line"><span class="keyword">let</span> { ...z } = <span class="literal">undefined</span>; <span class="comment">// 运行时错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> { ...x, y, z } = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"><span class="keyword">let</span> { x, ...y, ...z } = someObject; <span class="comment">// 句法错误</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>，扩展运算符的解构赋值，不能复制继承自原型对象的属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = { <span class="attr">a</span>: <span class="number">1</span> };</span><br><span class="line"><span class="keyword">let</span> o2 = { <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line">o2.__proto__ = o1;</span><br><span class="line"><span class="keyword">let</span> { ...o3 } = o2;</span><br><span class="line">o3 <span class="comment">// { b: 2 }</span></span><br><span class="line">o3.a <span class="comment">// undefined</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，对象<code>o3</code>复制了<code>o2</code>，但是只复制了<code>o2</code>自身的属性，没有复制它的原型对象<code>o1</code>的属性。</p><p>如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{...<span class="string">'hello'</span>}</span><br><span class="line"><span class="comment">// {0: "h", 1: "e", 2: "l", 3: "l", 4: "o"}</span></span><br></pre></td></tr></tbody></table></figure><p>对象的扩展运算符等同于使用<code>Object.assign()</code>方法.</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aClone = { ...a };</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> aClone = <span class="built_in">Object</span>.assign({}, a);</span><br></pre></td></tr></tbody></table></figure><p>上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> clone1 = <span class="built_in">Object</span>.assign(</span><br><span class="line">  <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj)),</span><br><span class="line">  obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> clone2 = <span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>比如看上面的例子 拷贝对象原型的属性：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = {</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">let</span> o2 = {</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">};</span><br><span class="line">o2.__proto__ = o1;</span><br><span class="line"><span class="keyword">let</span> o3 = <span class="built_in">Object</span>.assign(</span><br><span class="line">    <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(o2)),</span><br><span class="line">    o2</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(o3) <span class="comment">// { b: 2 }</span></span><br><span class="line"><span class="built_in">console</span>.log(o3.a) <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure><p>扩展运算符可以用于合并两个对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ab = { ...a, ...b };</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign({}, a, b);</span><br></pre></td></tr></tbody></table></figure><h2 id="数组中的扩展运算符"><a href="#数组中的扩展运算符" class="headerlink" title="数组中的扩展运算符"></a>数组中的扩展运算符</h2><p>扩展运算符（<code>spread</code>）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</span><br><span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></tbody></table></figure><p>它也可以替代函数的 <code>apply</code>方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>{</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f.apply(<span class="literal">null</span>, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>{</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f(...args);</span><br></pre></td></tr></tbody></table></figure><p>比如举一个简单的例子：求一个数组中最大的元素</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="扩展运算符在数组中的常见应用"><a href="#扩展运算符在数组中的常见应用" class="headerlink" title="扩展运算符在数组中的常见应用"></a>扩展运算符在数组中的常见应用</h3><ul><li><p>复制数组</p><p>数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1;</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [2, 2]</span></span><br></pre></td></tr></tbody></table></figure><pre><code>上面的例子中，`a2`并不是`a1`的克隆，而是指向同一份数据的另一个指针。对`a2`的修改会影响到`a1`。</code></pre><p>但是 ES5 也有解决的方法 如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1.concat();</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [1, 2]</span></span><br></pre></td></tr></tbody></table></figure><p>​ 上面代码中，<code>a1</code>会返回原数组的克隆，再修改<code>a2</code>就不会对<code>a1</code>产生影响。</p><p>​ 扩展运算符提供了复制数组的简便写法。如下： <code>a2</code>都是<code>a1</code>的克隆。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br></pre></td></tr></tbody></table></figure><p>​ 还是记住那句话：<strong>扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong>，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p><ul><li>可以将数组转换为参数序列</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">4</span>, <span class="number">38</span>];</span><br><span class="line">add(...numbers) <span class="comment">// 42</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>与解构赋值结合</p><p>扩展运算符可以与解构赋值结合起来，用于生成数组</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br></pre></td></tr></tbody></table></figure><p><strong>但是有一点要注意</strong>：<strong><code>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</code></strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [...rest, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> [first, ...rest, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>扩展运算符还可以将字符串转为真正的数组。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">'hello'</span>]</span><br><span class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ]</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong><span style="color:red">对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</span></strong> 。 好好回味一下这句话吧。</p><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对原生AJAX 的简单封装</title>
      <link href="/articl/d3ff9b87.html"/>
      <url>/articl/d3ff9b87.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/234.png" alt=""></p><a id="more"></a><h1 id="对原生AJAX-的简单封装-wink"><a href="#对原生AJAX-的简单封装-wink" class="headerlink" title="对原生AJAX 的简单封装:wink:"></a>对原生AJAX 的简单封装<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span></h1><p>我们先看一下JQuery的AJAX的使用。<br>jQuery.ajax(url,[settings])</p><p>参数：</p><ol><li><strong>url</strong>:一个用来包含发送请求的URL字符串。</li><li><strong>data</strong> [Object,String]类型：发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:[“bar1”, “bar2”]} 转换为 “&amp;foo=bar1&amp;foo=bar2”。</li><li><strong>type</strong> [String]类型：(默认: “GET”) 请求方式 (“POST” 或 “GET”)， 默认为 “GET”。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</li><li><strong>success</strong> 当请求之后调用。传入返回后的数据，以及包含成功代码的字符串。</li><li><strong>error</strong> 在请求出错时调用。传入XMLHttpRequest对象，描述错误类型的字符串以及一个异常对象（如果有的话）</li></ol><p>JQuery AJAX 的简单使用</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax({</span><br><span class="line">    type: <span class="string">"get"</span>,</span><br><span class="line">    url: <span class="string">"ajax_get.php"</span>,</span><br><span class="line">    data: <span class="string">"username=John&amp;userpwd=Boston"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">xrh</span>) </span>{</span><br><span class="line">        alert(xrh.responseText);</span><br><span class="line">    },</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        alert(<span class="string">"请求错误"</span>)</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><hr><br><p>对原生AJAX的封装：<br>  对元素我们需要注意的有以下几点</p><ol><li>对IE5 IE6的兼容</li><li>AJAX在ie中的缓存问题</li><li>url中的中文进行转码 地址栏中不能出现中文</li><li>将传入的对象转化为字符串函数</li><li>判断外界是否传入超时</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装对象转化为字符串函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * "username":"wzg"</span></span><br><span class="line"><span class="comment"> * "userpwd":"123"</span></span><br><span class="line"><span class="comment"> * "t":"235262345112354"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">datastr</span>(<span class="params">data</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    data.t = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) {</span><br><span class="line">        <span class="comment">//encodeURLComponent() 将url中的中文进行转码 地址栏中不能出现中文</span></span><br><span class="line">        <span class="comment">// url中只能出现字母数字下划线</span></span><br><span class="line">        res.push(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(data[key])); <span class="comment">//[username = wzg,userpwd=123]</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">"&amp;"</span>); <span class="comment">//username = wzg&amp;userpwd=123</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">option</span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将对象转化为字符串</span></span><br><span class="line">    <span class="keyword">var</span> str = datastr(option.data);</span><br><span class="line">    <span class="comment">//1.创建一个异步对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr, timer;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) { <span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    } <span class="keyword">else</span> { <span class="comment">// code for IE6, IE5</span></span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 2.设置请求方式</span></span><br><span class="line">    <span class="keyword">if</span> (option.type.toLowerCase() === <span class="string">"get"</span>) {</span><br><span class="line">        xhr.open(option.type, option.url + <span class="string">"?"</span> + str, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        xhr.send();</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        xhr.open(option.type, option.url, <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        xhr.send(str);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.监听状态的变化</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) {</span><br><span class="line">            clearInterval(timer); <span class="comment">//接收到响应 就关闭定时器</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;= <span class="number">300</span> ||</span><br><span class="line">                xhr.status == <span class="number">304</span>) {</span><br><span class="line">                <span class="comment">// 5.处理返回的结果</span></span><br><span class="line">                option.success(xhr);</span><br><span class="line">                <span class="comment">//无论请求成功还是失败 都会调用option.complete();函数</span></span><br><span class="line">                option.option.complete();;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                option.error(xhr);</span><br><span class="line">                <span class="comment">//无论请求成功还是失败 都会调用option.complete();函数</span></span><br><span class="line">                option.complete();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断外界是否传入超时</span></span><br><span class="line">    <span class="keyword">if</span> (option.timeout) {</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            xhr.abort();</span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        }, option.timeout)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><br>对封装的AJAX的简单使用：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">              ajax({</span><br><span class="line">                  type: <span class="string">"get"</span>,</span><br><span class="line">                  url: <span class="string">"1.txt"</span>,</span><br><span class="line">                  timeout: <span class="number">3000</span>,</span><br><span class="line">                  data: {</span><br><span class="line">                      <span class="string">"username"</span>: <span class="string">"wzg"</span>,</span><br><span class="line">                      <span class="string">"userpwd"</span>: <span class="string">"123"</span></span><br><span class="line">                  },</span><br><span class="line">                  success: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>{</span><br><span class="line">                      <span class="comment">// console.log(xhr.responseXML);</span></span><br><span class="line">                      <span class="comment">// let x = xhr.responseXML</span></span><br><span class="line">                      <span class="comment">// console.log(x.querySelector("to").innerHTML);</span></span><br><span class="line">                      <span class="comment">// console.log(x.querySelector("from"));</span></span><br><span class="line">                      <span class="keyword">let</span> x = xhr.responseText;</span><br><span class="line">                      y = <span class="built_in">JSON</span>.parse(x);</span><br><span class="line">                      <span class="built_in">console</span>.log(y.name);</span><br><span class="line">                      <span class="built_in">console</span>.log(y.age);</span><br><span class="line">                  },</span><br><span class="line">                  error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>{</span><br><span class="line">                      alert(<span class="string">"请求失败！！！"</span>);</span><br><span class="line">                  }</span><br><span class="line">              });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生JS+JSON 天气预报小项目 （含源码）</title>
      <link href="/articl/44561218.html"/>
      <url>/articl/44561218.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/172ef3c2ef662b3d.png" alt=""></p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>index.html</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;天气预报&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"css/index.css"</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/index.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;!-- 左边 --&gt;</span><br><span class="line">        &lt;div class=<span class="string">"left-side"</span>&gt;</span><br><span class="line">            &lt;!-- 渐变 --&gt;</span><br><span class="line">            &lt;div class=<span class="string">"gradient"</span>&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=<span class="string">"date-container"</span>&gt;</span><br><span class="line">                &lt;h2 class=<span class="string">"date-dayname"</span> id=<span class="string">"date-dayname"</span>&gt;周六&lt;/h2&gt;</span><br><span class="line">                &lt;span class=<span class="string">"date-day"</span> id=<span class="string">"date-day"</span>&gt;2020-06-06&lt;/span&gt;</span><br><span class="line">                &lt;!-- location 图标 --&gt;</span><br><span class="line">                &lt;span class=<span class="string">"iconfont"</span> id=<span class="string">"location"</span>&gt;&amp;<span class="comment">#xe6e5;开封&lt;/span&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"weather-conteiner"</span>&gt;</span><br><span class="line">                &lt;!-- 天气图标 --&gt;</span><br><span class="line">                &lt;span class=<span class="string">"iconfont"</span> id=<span class="string">"weather-l"</span>&gt;&amp;<span class="comment">#xe61f;&lt;/span&gt;</span></span><br><span class="line">                &lt;div class=<span class="string">"weather-temp"</span> id=<span class="string">"weather-temp"</span>&gt;30℃&lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">"weather-desc"</span> id=<span class="string">"weather-desc"</span>&gt;晴天&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 右边部分 --&gt;</span><br><span class="line">        &lt;div class=<span class="string">"right-side"</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">"today-info-container"</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">"today-info"</span>&gt;</span><br><span class="line">                    &lt;!-- PM2.5 --&gt;</span><br><span class="line">                    &lt;div class=<span class="string">"pm clearfix "</span>&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"title"</span>&gt;PM2.5&lt;/span&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"value"</span> id=<span class="string">"pm"</span>&gt;00&lt;/span&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;!-- 湿度 --&gt;</span><br><span class="line">                    &lt;div class=<span class="string">"humidity clearfix a"</span>&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"title"</span>&gt;湿度&lt;/span&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"value"</span> id=<span class="string">"humidity"</span>&gt;00&lt;/span&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;!-- 风速 --&gt;</span><br><span class="line">                    &lt;div class=<span class="string">"wind clearfix "</span>&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"title"</span>&gt;风速&lt;/span&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"value"</span> id=<span class="string">"wind"</span>&gt;00&lt;/span&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"week-container"</span>&gt;</span><br><span class="line">                &lt;ul class=<span class="string">"week-list"</span>&gt;</span><br><span class="line">                    &lt;li class=<span class="string">"active"</span> id=<span class="string">"day1"</span>&gt;</span><br><span class="line">                        &lt;!-- 天气图标 --&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"iconfont"</span>&gt;&amp;<span class="comment">#xe61f;&lt;/span&gt;</span></span><br><span class="line">                        &lt;span class=<span class="string">"day-name"</span>&gt;周六&lt;/span&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"day-temp"</span>&gt;30℃&lt;/span&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li id=<span class="string">"day2"</span>&gt;</span><br><span class="line">                        &lt;!-- 天气图标 --&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"iconfont"</span>&gt;&amp;<span class="comment">#xe61f;&lt;/span&gt;</span></span><br><span class="line">                        &lt;span class=<span class="string">"day-name"</span>&gt;周日&lt;/span&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"day-temp"</span>&gt;30℃&lt;/span&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li id=<span class="string">"day3"</span>&gt;</span><br><span class="line">                        &lt;!-- 天气图标 --&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"iconfont"</span>&gt;&amp;<span class="comment">#xe61f;&lt;/span&gt;</span></span><br><span class="line">                        &lt;span class=<span class="string">"day-name"</span>&gt;周一&lt;/span&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"day-temp"</span>&gt;30℃&lt;/span&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li id=<span class="string">"day4"</span>&gt;</span><br><span class="line">                        &lt;!-- 天气图标 --&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"iconfont"</span>&gt;&amp;<span class="comment">#xe61f;&lt;/span&gt;</span></span><br><span class="line">                        &lt;span class=<span class="string">"day-name"</span>&gt;周二&lt;/span&gt;</span><br><span class="line">                        &lt;span class=<span class="string">"day-temp"</span>&gt;30℃&lt;/span&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"location-container"</span>&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"city"</span> placeholder=<span class="string">"位置"</span>&gt;</span><br><span class="line">                &lt;button class=<span class="string">"location-button"</span> id=<span class="string">"location-button"</span>&gt;</span><br><span class="line">                    &lt;!-- location图标 --&gt;</span><br><span class="line">                    &lt;span class=<span class="string">"iconfont"</span> &gt;&amp;<span class="comment">#xe6e5;查询&lt;/span&gt;</span></span><br><span class="line">                &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>inded.css</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> {</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span><br><span class="line">    <span class="comment">/* project id 1866935 */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_1866935_jaopflkhzf.eot'</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_1866935_jaopflkhzf.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_1866935_jaopflkhzf.woff2'</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>), <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_1866935_jaopflkhzf.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_1866935_jaopflkhzf.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_1866935_jaopflkhzf.svg#iconfont'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> {</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"iconfont"</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除默认样式 */</span></span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> {</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高度塌陷问题 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span> {</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#424242</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> {</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">435px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">740px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1F252D</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">70px</span> -<span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-side</span> {</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/* background-color: red; */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">25px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">35px</span> -<span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">float</span>: left</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gradient</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/* background-color: red; */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #<span class="number">0</span>acffe <span class="number">0%</span>, #<span class="number">495</span>aff <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">25px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.date-container</span> {</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.date-container</span> <span class="selector-class">.date-dayname</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#location</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weather-conteiner</span> {</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#weather-l</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">70px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weather-temp</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">4em</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weather-desc</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 右边部分 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right-side</span> {</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="comment">/* background-color: red; */</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.today-info</span> {</span><br><span class="line">    <span class="comment">/* background-color: royalblue; */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">25px</span> <span class="number">25px</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">50px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.today-info</span> <span class="selector-tag">div</span> {</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.today-info</span> <span class="selector-class">.a</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">6px</span> <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.today-info</span> <span class="selector-class">.title</span> {</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.today-info</span> <span class="selector-class">.value</span> {</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.week-list</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">50px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.week-list</span> <span class="selector-tag">li</span> {</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="comment">/* background-color: red; */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">200ms</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.week-list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.week-list</span> {</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99999</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.week-list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#222831</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.week-list</span> <span class="selector-class">.iconfont</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">37px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#222831</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.week-list</span> <span class="selector-class">.day-name</span> {</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.week-list</span> <span class="selector-class">.day-temp</span> {</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.location-container</span> {</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* background-color: red; */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">330px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">126px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.location-container</span> <span class="selector-tag">input</span> {</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="comment">/* font-weight: bold; */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">150px</span>);</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#222831</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.location-container</span> <span class="selector-tag">button</span> {</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">320px</span>;</span><br><span class="line">    <span class="comment">/* height: 28px; */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    <span class="comment">/* font-size: 18px; */</span></span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">50px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #<span class="number">0</span>acffe <span class="number">0%</span>, #<span class="number">495</span>aff <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">200ms</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">160px</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.location-container</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.05</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>index.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口返回的数据就是一个函数的调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">weather</span>(<span class="params">data</span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dateDayname = <span class="built_in">document</span>.getElementById(<span class="string">"date-dayname"</span>);</span><br><span class="line">    <span class="keyword">var</span> dateDay = <span class="built_in">document</span>.getElementById(<span class="string">"date-day"</span>);</span><br><span class="line">    <span class="keyword">var</span> location = <span class="built_in">document</span>.getElementById(<span class="string">"location"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> weatherL = <span class="built_in">document</span>.getElementById(<span class="string">"weather-l"</span>)</span><br><span class="line">    <span class="keyword">var</span> weatherTemp = <span class="built_in">document</span>.getElementById(<span class="string">"weather-temp"</span>)</span><br><span class="line">    <span class="keyword">var</span> weatherDesc = <span class="built_in">document</span>.getElementById(<span class="string">"weather-desc"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pm = <span class="built_in">document</span>.getElementById(<span class="string">"pm"</span>)</span><br><span class="line">    <span class="keyword">var</span> humidity = <span class="built_in">document</span>.getElementById(<span class="string">"humidity"</span>)</span><br><span class="line">    <span class="keyword">var</span> wind = <span class="built_in">document</span>.getElementById(<span class="string">"wind"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> day1 = <span class="built_in">document</span>.getElementById(<span class="string">"day1"</span>);</span><br><span class="line">    <span class="keyword">var</span> span1 = day1.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> day2 = <span class="built_in">document</span>.getElementById(<span class="string">"day2"</span>);</span><br><span class="line">    <span class="keyword">var</span> span2 = day2.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> day3 = <span class="built_in">document</span>.getElementById(<span class="string">"day3"</span>);</span><br><span class="line">    <span class="keyword">var</span> span3 = day3.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> day4 = <span class="built_in">document</span>.getElementById(<span class="string">"day4"</span>);</span><br><span class="line">    <span class="keyword">var</span> span4 = day4.getElementsByTagName(<span class="string">"span"</span>);</span><br><span class="line"></span><br><span class="line">    dateDayname.innerHTML = data.weather[<span class="number">0</span>].date.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    dateDay.innerHTML = data.date;</span><br><span class="line">    location.innerHTML = data.city;</span><br><span class="line"></span><br><span class="line">    weatherL.innerHTML = weatherIcon(<span class="number">1</span>);</span><br><span class="line">    weatherTemp.innerHTML = data.weather[<span class="number">0</span>].temp.slice(<span class="number">0</span>, <span class="number">3</span>) + <span class="string">"℃"</span>;</span><br><span class="line">    weatherDesc.innerHTML = data.weather[<span class="number">0</span>].weather;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否有pm25</span></span><br><span class="line">    <span class="keyword">if</span> (data.pm25) {</span><br><span class="line">        pm.innerHTML = data.pm25;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        pm.innerHTML = <span class="string">"暂无"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    humidity.innerHTML = <span class="string">"暂无"</span>;</span><br><span class="line">    wind.innerHTML = data.weather[<span class="number">0</span>].wind;</span><br><span class="line">    <span class="comment">// 封装判断天气的一个函数</span></span><br><span class="line">    <span class="comment">// t 第几天</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">weatherIcon</span>(<span class="params">t</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"duoyun"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe694;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"yin"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe624;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"qing"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe61f;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"xiaoyu"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe622;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"zhongyu"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe685;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"dayu"</span>) != <span class="number">-1</span> || data.weather[<span class="number">0</span>].icon1.search(<span class="string">"baoyu"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe644;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"leizhenyu"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe61e;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"zhenyu"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe643;"</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"zhongxue"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe684;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"zhongxuezhuandaxue"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe686;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"zhenxue"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe683;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"yangsha"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe680;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"xiaoxue"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe681;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"xiaoxuezhuanzhongxue"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe67d;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"mai"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe67e;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"shachenbao"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe67b;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"fuchen"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe67a;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"daxue"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe675;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"daxuezhuanbaoxue"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe676;"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (data.weather[t - <span class="number">1</span>].icon1.search(<span class="string">"baoxue"</span>) != <span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&amp;#xe674;"</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    span1[<span class="number">0</span>].innerHTML = weatherIcon(<span class="number">1</span>);</span><br><span class="line">    span1[<span class="number">1</span>].innerHTML = data.weather[<span class="number">0</span>].date.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    span1[<span class="number">2</span>].innerHTML = data.weather[<span class="number">0</span>].temp;</span><br><span class="line"></span><br><span class="line">    span2[<span class="number">0</span>].innerHTML = weatherIcon(<span class="number">2</span>);</span><br><span class="line">    span2[<span class="number">1</span>].innerHTML = data.weather[<span class="number">1</span>].date.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    span2[<span class="number">2</span>].innerHTML = data.weather[<span class="number">1</span>].temp;</span><br><span class="line"></span><br><span class="line">    span3[<span class="number">0</span>].innerHTML = weatherIcon(<span class="number">3</span>);</span><br><span class="line">    span3[<span class="number">1</span>].innerHTML = data.weather[<span class="number">2</span>].date.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    span3[<span class="number">2</span>].innerHTML = data.weather[<span class="number">2</span>].temp;</span><br><span class="line"></span><br><span class="line">    span4[<span class="number">0</span>].innerHTML = weatherIcon(<span class="number">4</span>);</span><br><span class="line">    span4[<span class="number">1</span>].innerHTML = data.weather[<span class="number">3</span>].date.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    span4[<span class="number">2</span>].innerHTML = data.weather[<span class="number">3</span>].temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"location-button"</span>);</span><br><span class="line">    <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oldScript = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    oldScript.src = <span class="string">`https://api.asilu.com/weather/?city=<span class="subst">${<span class="string">"开封"</span>}</span>&amp;callback=weather`</span>;</span><br><span class="line">    <span class="comment">//插入到页面中去</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(oldScript);</span><br><span class="line"></span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="comment">// 加个简单判断，输入内容是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (city.value) {</span><br><span class="line">            <span class="keyword">var</span> newScript = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">            newScript.src = <span class="string">`https://api.asilu.com/weather/?city=<span class="subst">${city.value}</span>&amp;callback=weather`</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//插入到页面中去</span></span><br><span class="line">            <span class="built_in">document</span>.body.replaceChild(newScript, oldScript);</span><br><span class="line">            oldScript = newScript;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            alert(<span class="string">"请输入城市名称!"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><br><br>愿你的坚持终有回报。<br><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript性能优化之高级定时器</title>
      <link href="/articl/e6ead870.html"/>
      <url>/articl/e6ead870.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/124.jpg" alt=""></p><a id="more"></a><p><strong>定时器对队列的工作方式：</strong>当特定时间过去后将代码插人。注意，给队列添加代码并不意味着对它立刻执行，而只能表示它会尽快执行。<span style="color:red;background-color:#ff0"><strong>设定一个150ms后执行的定时器不代表到了150ms代码就立刻执行，它表示代码会在150ms后被加入到队列中。如果在这个时间点上，队列中没有其他东西，那么这段代码就会被执行</strong></span>，表面上看上去好像代码就在精确指定的时间点上执行了。其他情况下，代码可能明显地等待更长时间才执行。</p><br><p>重复定时器：</p><p>这种重复定时器的规则有两个问题: <strong>(1)、 某些间隔会被跳过; (2) 、多个定时器的代码执行之间的间隔可能会比预期的小。</strong>假设，某个onclick事件处理程序使用setInterval()设置了一个200ms间隔的重复定时器。如果事件处理程序花了300ms多-点的时间完成，同时定时器代码也花了差不多的时间，就会同时出现跳过间隔且连续运行定时器代码的情况。</p><p><img src="https://img-blog.csdnimg.cn/2020060414401171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个例子中的第1个定时器是在205ms处添加到队列中的，但是直到过了300ms处才能够执行。当执行这个定时器代码时，在405ms处又给队列添加了另外一个副本。在下一个间隔，即605ms处，第一个定时器代码仍在运行，同时在队列中已经有了一个定时器代码的实例。结果是，在这个时间点上的定时器代码不会被添加到队列中。结果在5ms处添加的定时器代码结束之后，405ms处添加的定时器代码就立刻执行。</p><p>解决方法： 使用链式调用。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">     <span class="comment">//处理程序</span></span><br><span class="line">     setTimeout(<span class="built_in">arguments</span>.callee, interval);</span><br><span class="line"> }, interval);</span><br></pre></td></tr></tbody></table></figure><p>这个模式链式调用了<strong>setTimeout()</strong>,每次函数执行的时候都会创建一个 新的定时器。第二个<strong>setrimeout ()</strong>调用使用了<strong>arguments.callee</strong>来获取对当前执行的函数的引用，并为其设置另外一个定时器。这样做的好处是，在前一个定时 器代码执行完之前， 不会向队列插 人新的定时器代码，确保不会有任何缺失的间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。这个模式主要用于重复定时器。</p><p>举个栗子：<br>每隔一段时间，div就会向右移动，当左坐标为200时就停止移动。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span><br><span class="line">    left = <span class="built_in">parseInt</span>(div.style.left) + <span class="number">5</span>;</span><br><span class="line">    div.style.left = left + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; <span class="number">200</span>) {</span><br><span class="line">        setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">50</span>);</span><br><span class="line">    }</span><br><span class="line">}, <span class="number">50</span>);</span><br></pre></td></tr></tbody></table></figure><hr><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 性能优化之防篡改对象</title>
      <link href="/articl/9006c895.html"/>
      <url>/articl/9006c895.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/614471271c9441f7875fd85189ccd300.jpg" alt=""></p><a id="more"></a><p>我们在开发中有时候会不经意的修改了别人的代码，可能会造成严重的后果，于是ES5定义了防篡改对象。<span style="color:red"><strong>但是要注意，一旦把对象定义为防篡改对象，就无法撤销了。</strong></span></p><h2 id="不可扩展对象"><a href="#不可扩展对象" class="headerlink" title="不可扩展对象"></a>不可扩展对象</h2><p>默认情况下，所有对象都是可以扩展的。也就是说，任何时候都可以向对象中添加属性和方法。比如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">          name: <span class="string">"阿清"</span></span><br><span class="line">      }</span><br><span class="line">      person.age = <span class="number">14</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(person);<span class="comment">//{name: "阿清", age: 14}</span></span><br><span class="line">      <span class="built_in">console</span>.log(person.age);<span class="comment">//14</span></span><br></pre></td></tr></tbody></table></figure><p>如果我们使用<strong>Object.preventExtensions()</strong> 方法可以改变这一行为。不能再添加属性或者方法。<strong>虽然不能扩展该对象，但是不影响原有的属性，原有的属性仍然可以进行修改或者删除。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    name: <span class="string">"阿清"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(person); <span class="comment">//将person设置为不可扩展对象</span></span><br><span class="line"></span><br><span class="line">person.age = <span class="number">14</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">//{name: "阿清"}</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">person.name = <span class="string">"阿广"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//阿广</span></span><br></pre></td></tr></tbody></table></figure><p>使用 <strong>Object.isExtensible()</strong> 方法可以确定该对象是否为可扩展对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    name: <span class="string">"阿清"</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(person);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><br><h2 id="密封对象"><a href="#密封对象" class="headerlink" title="密封对象"></a>密封对象</h2><p>ECMAScript 5为对象定义的第二个保护级别是密封对象( sealed object)。密封对象不可扩展，而且已有成员的 [ [Configurable] ] 特性将被设置为false。这就意味着不能删除属性和方法，因为不能使用<strong>Object.defineProperty ()</strong>把数据属性修改为访问器属性，或者相反。属性值是可以修改的。<br>要密封对象，使用 <strong>Object.seal( )</strong> 。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    name: <span class="string">"阿清"</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">19</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//无法给密封对象添加属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">//阿清</span></span><br><span class="line"><span class="comment">// 无法修改密封对象中的属性。</span></span><br></pre></td></tr></tbody></table></figure><p>可以使用<strong>Object.isSealed()</strong> 方法确定对象是否被密封。而且由于被密封的对象不可扩展，所以<strong>Object.isExtensible()</strong> 检测也会返回 <strong>false</strong>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    name: <span class="string">"阿清"</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><br><h2 id="冻结对象"><a href="#冻结对象" class="headerlink" title="冻结对象"></a>冻结对象</h2><p>最严格的防篡改级别是冻结对象( frozen object)。冻结的对象既不可扩展，又是密封的，而且对象，数据属性的[ [Writable] ]特性会被设置为<strong>false</strong>。 如果定义[ [Set] ]函数，访问器属性仍然是可写的。ES5定义的Object. freeze()方法可以用来冻结对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    name: <span class="string">"阿清"</span></span><br><span class="line">};</span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br><span class="line">person.age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">//"阿清"</span></span><br><span class="line">person.name = <span class="string">"阿广"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">//"阿清"</span></span><br></pre></td></tr></tbody></table></figure><p>当然，也有一个<strong>Object. isFrozen()</strong>方法用于检测冻结对象。因为冻结对象既是密封的又是不可扩展的，所以用<strong>Object. isExtensible()</strong>和<strong>Object.isSealed ()</strong>检测冻结对象将分别返回<strong>false</strong>和<strong>true</strong>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    name: <span class="string">"阿清"</span></span><br><span class="line">};</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isFrozen(person)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br><span class="line">alert(<span class="built_in">Object</span>.isExtensible(person)); <span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isSealed(person)); <span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">Object</span>.isFrozen(person)); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><hr><p><span style="color:red"><strong>有一点要注意：在对防篡改对象进行非法操作时，在非严格模式是会忽略，但是在严格模式下会抛出错误。</strong></span></p><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 性能优化之函数绑定</title>
      <link href="/articl/b7eb7671.html"/>
      <url>/articl/b7eb7671.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/0a53b3c5738d4b368d5a6c9cc9d693c2.jpg" alt=""></p><a id="more"></a><p><span style="color:red"><strong>函数绑定</strong>：在特定的 this 环境中，以指定参数调用另一个函数。常常与回调函数和事件处理程序一起使用一遍在将函数作为变量传递的同时保留代码执行环境。</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = {</span><br><span class="line">    name: <span class="string">"阿清"</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, handler.sayName, <span class="literal">false</span>) <span class="comment">//undefiend</span></span><br></pre></td></tr></tbody></table></figure><p>结果显示的是undefiend，这是因为没有保存handler .sayName() 的环境，所以 this 指向DOM按钮而非handler（在IE8中 this 指向window）。</p><br><p>解决方法：<br>ES5为所有的函数定义一个原生的 bind() 方法。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = {</span><br><span class="line">    name: <span class="string">"阿清"</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">":"</span> + event.type);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, handler.sayName.bind(handler), <span class="literal">false</span>) <span class="comment">//阿清:click</span></span><br></pre></td></tr></tbody></table></figure><p><span style="color:red"><strong>bind函数接收一个参数：一个环境。在给定的环境中调用函数。</strong></span></p><p>只要是将某个函数指针以值的形式进行传递，同时该函数必须在特定环境中执行，被绑定函数的效用就突显出来了。<strong>它们主要用于事件处理程序以及setTimeout() 和setInterval()。</strong> <strong>然而，被绑定函数与普通函数相比有更多的开销，它们需要更多内存，同时也因为多重函数调用稍微慢一点，所以最好只在必要时使用。</strong></p><hr><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 对call()、apply()、bind()的彻底理解（很好懂）</title>
      <link href="/articl/2ce56133.html"/>
      <url>/articl/2ce56133.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/16b44df571e443ceb289df69a853ff1c.jpg" alt=""></p><a id="more"></a><p>我们想看两个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"阿清"</span>,</span><br><span class="line">          age = <span class="number">18</span>;</span><br><span class="line">      <span class="keyword">var</span> obj = {</span><br><span class="line">          name: <span class="string">"阿广"</span>,</span><br><span class="line">          objAge: <span class="keyword">this</span>.age,</span><br><span class="line">          myFun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"年龄是"</span> + <span class="keyword">this</span>.age);</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">console</span>.log(obj.objAge); <span class="comment">//18</span></span><br><span class="line">      obj.myFun(); <span class="comment">//阿广年龄是undefined</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"小明"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">showname</span>(<span class="params"></span>) </span>{</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">     }</span><br><span class="line">     showname(); <span class="comment">//小明</span></span><br></pre></td></tr></tbody></table></figure><p>由这两个例子可以看出来，第一个<strong>this</strong>指向<strong>obj</strong>，第二个例子<strong>this</strong>指向<strong>window</strong>。</p><br><p><span style="color:red">我们要知道 <strong>call()、apply()、bind()</strong> 都是对this的重定向。改变调用函数体内的 <strong>this</strong> 指向。</span></p><p>如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"阿清"</span>,</span><br><span class="line">    age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    name: <span class="string">"阿广"</span>,</span><br><span class="line">    objAge: <span class="keyword">this</span>.age,</span><br><span class="line">    myFun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"年龄是"</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">    name: <span class="string">"小明"</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">}</span><br><span class="line">obj.myFun.call(a); <span class="comment">//小明年龄是20</span></span><br><span class="line">obj.myFun.apply(a); <span class="comment">//小明年龄是20</span></span><br><span class="line">obj.myFun.bind(a)(); <span class="comment">//小明年龄是20</span></span><br></pre></td></tr></tbody></table></figure><p><strong>this 都指向的 a ，除了bind方法后面多了一个（），其他都一样，因为bind返回是一个新的函数，我们必须调用它，才会执行。</strong></p><br><p><strong>call()、apply()、bind()</strong> 也可以进行传参：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"阿清"</span>,</span><br><span class="line">            age = <span class="number">18</span>;</span><br><span class="line">        <span class="keyword">var</span> obj = {</span><br><span class="line">            name: <span class="string">"阿广"</span>,</span><br><span class="line">            objAge: <span class="keyword">this</span>.age,</span><br><span class="line">            myFun: <span class="function"><span class="keyword">function</span>(<span class="params">from, place</span>) </span>{</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"年龄是"</span> + <span class="keyword">this</span>.age + <span class="string">" ,他的家乡是："</span> + <span class="keyword">from</span> + place + <span class="string">"区"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> a = {</span><br><span class="line">            name: <span class="string">"小明"</span>,</span><br><span class="line">            age: <span class="number">20</span></span><br><span class="line">        }</span><br><span class="line">        obj.myFun.call(a, <span class="string">"开封市"</span>, <span class="string">"祥符"</span>); <span class="comment">//小明年龄是20 ,他的家乡是：开封市祥符区</span></span><br><span class="line">        obj.myFun.apply(a, [<span class="string">"开封市"</span>, <span class="string">"祥符"</span>]); <span class="comment">//小明年龄是20 ,他的家乡是：开封市祥符区</span></span><br><span class="line">        obj.myFun.bind(a, <span class="string">"开封市"</span>, <span class="string">"祥符"</span>)(); <span class="comment">//小明年龄是20 ,他的家乡是：开封市祥符区</span></span><br><span class="line">        obj.myFun.bind(a, [<span class="string">"开封市"</span>, <span class="string">"祥符"</span>])(); <span class="comment">//小明年龄是20 ,他的家乡是：开封市,祥符undefined区</span></span><br></pre></td></tr></tbody></table></figure><p>我们可以看出</p><span style="color:red"><ul><li><strong>call 、bind 、 apply</strong> 这三个函数的第一个参数都是 this 的指向对象，第二个参数就有区别了。</li><li><strong>call</strong>的参数是直接放进去的，第二第三第n个参数全都用逗号分隔，直接放到后面。</li><li><strong>apply</strong>的参数必须放到一个数组里面才能传进去。</li><li><strong>bind</strong> 除了返回是一个函数之外，其他都是<strong>call</strong> 相同。</li><li>参数可以为String类型，函数类型，Object类型等等各种类型。</li></ul></span><hr><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 性能优化之安全类型检测</title>
      <link href="/articl/9f76d0da.html"/>
      <url>/articl/9f76d0da.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/ebe11dec2238427496340fe86c4f5d61.jpg" alt=""></p><a id="more"></a><p>JavaScript内置的类型检测机制并非完全可靠。比如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray = value <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</span><br></pre></td></tr></tbody></table></figure><p>以上代码要返回true,value必须是一个数组，而且还必须与Array构造函数在同个全局作用域中。(别忘了，Array是window的属性。)如果value是在另个frame中定义的数组，那么以上代码就会返回false。</p><p><strong>解决方法：</strong> 众所周知，在任何值上调用Object原生的toString()方法，都会返回一个[obj ect NativeConstructorName] 格式的字符串。每个类在内部都有一个[ [Class]]属性，这个属性中就指定了上述字符串中的构造函数名。</p><p>由于原生数组的构造函数名与全局作用域无关，因此使用toString()就能保证返回一致的值。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测是否是原生数组</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>) </span>{</span><br><span class="line">             <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object Array]"</span>;</span><br><span class="line">         }</span><br><span class="line"><span class="comment">//检测是否是原生函数</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>{</span><br><span class="line">             <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object Function]"</span>;</span><br><span class="line">         }</span><br><span class="line"><span class="comment">//检测是否是原生正则</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">value</span>) </span>{</span><br><span class="line">             <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object RegExp]"</span>;</span><br><span class="line">         }</span><br><span class="line"><span class="comment">//检测是否是原生JSON</span></span><br><span class="line">         <span class="keyword">var</span> isNativeJSON = <span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">JSON</span>) == <span class="string">"[object JSON]"</span>;</span><br></pre></td></tr></tbody></table></figure><p><span style="color:red">有一点我们要注意object . prototpye. toString()本身也可能会被修改。所以我们讨论的技巧是假设0bject. prototpye. toString()是未被修改过的原生版本的情况下。</span></p><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 性能优化之作用域安全的构造函数</title>
      <link href="/articl/50a64b4a.html"/>
      <url>/articl/50a64b4a.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/accc4dfe993948518693431ee9ce56b6.jpg" alt=""></p><a id="more"></a><p>构造函数其实就是一个使用new操作符调用的函数。当使用new调用时，构造函数内用到的this对象会指向新创建的对象实例，如下面的例子所示:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"aqingya"</span>, <span class="number">18</span>, <span class="string">"吴志广"</span>);</span><br></pre></td></tr></tbody></table></figure><p>上面这个例子中，Person构造函数使用this对象给三个属性赋值: name、age和 job。当和new操作符连用时，则会创建一个新的 Person对象，同时会给它 分配这些属性。问题出在当没有使用new操作符来调用该构造函数的情况上。由于该this对象是在运行时绑定的，所以直接调用Person(),this会映射到全局对象window.上，导致错误对象属性的意外增加。例如:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = Person(<span class="string">"aqingya"</span>, <span class="number">18</span>, <span class="string">"吴志广"</span>);</span><br><span class="line">alert(<span class="built_in">window</span>.name); <span class="comment">//"aqingya"</span></span><br><span class="line">alert(<span class="built_in">window</span>.age); <span class="comment">//18</span></span><br><span class="line">alert(<span class="built_in">window</span>.job); <span class="comment">//吴志广</span></span><br></pre></td></tr></tbody></table></figure><p>原本针对Person实例的三个属性被加到window对象上，因为构造函数是作为普通函数调用的，忽略了new操作符。这个问题是由this 对象的晚绑定造成的，在这里this被解析成了window对象。</p><p><strong>解决方法</strong>：就是创建一个<strong>作用域安全的构造函数</strong>。<span style="color:red">在进行更改之前，首先确认this对象的正确类型的实例，如果不是就会创建新的实例并返回。</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>{</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Person) {</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">         <span class="keyword">this</span>.age = age;</span><br><span class="line">         <span class="keyword">this</span>.job = job;</span><br><span class="line">     } <span class="keyword">else</span> {</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age, job);</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line"> <span class="keyword">var</span> person1 = Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"> alert(<span class="built_in">window</span>.name); <span class="comment">//""</span></span><br><span class="line"> alert(person1.name); <span class="comment">//"Nicholas"</span></span><br><span class="line"> <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Shelby"</span>, <span class="number">34</span>, <span class="string">"Ergonomist"</span>);</span><br><span class="line"> alert(person2.name); <span class="comment">//"Shelby"</span></span><br></pre></td></tr></tbody></table></figure><p>Person构造函数添加了一个检查并确保this对象是Person实例的 if 语句，它表示要么使用new操作符，要么在现有的Person实例环境中调用构造函数。任何一种情况下，对象初始化都能正常进行。如果this并非Person的实例，那么会再次使用new操作符调用构造函数并返回结果。</p><br><p><strong>但是这也会出现一个问题</strong>：实现这个模式后，你就锁定了可以调用构造函数的环境。如果你使用构造函数窃取模式的继承且不使用原型链，那么这个继承很可能被破坏。如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Polygon</span>(<span class="params">sides</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Polygon) {</span><br><span class="line">        <span class="keyword">this</span>.sides = sides;</span><br><span class="line">        <span class="keyword">this</span>.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        };</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Polygon(sides);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">width, height</span>) </span>{</span><br><span class="line">    Polygon.call(<span class="keyword">this</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">alert(rect.sides); <span class="comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure><p>在这段代码中，Polygon 构造函数是作用域安全的，然而Rectangle构造函数则不是。新创建一个Rectangle实例之后，这个实例应该通过Polygon. call ()来继承Polygon的sides属性。但是，由于Polygon构造函数是作用域安全的，this 对象并非Polygon的实例，所以会创建并返回一个新的Polygon对象。Rectangle 构造函数中的this对象并没有得到增长，同时Polygon. call ()返回的值也没有用到，所以Rectangle实例中就不会有sides属性。</p><p><strong>解决方法</strong>：构造函数窃取结合使用原型链的方法可以解决该问题。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Polygon</span>(<span class="params">sides</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Polygon) {</span><br><span class="line">        <span class="keyword">this</span>.sides = sides;</span><br><span class="line">        <span class="keyword">this</span>.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        };</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Polygon(sides);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">width, height</span>) </span>{</span><br><span class="line">    Polygon.call(<span class="keyword">this</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Rectangle.prototype = <span class="keyword">new</span> Polygon();</span><br><span class="line"><span class="comment">//让Rectangle的原型成为 Polygon的实例。Rectangle的实例同时也是Polygon的实例。</span></span><br><span class="line"><span class="comment">//所以 Polygon.call()会按照原意执行。为Rectangle添加sides属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">alert(rect.sides); <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 性能优化之惰性加载函数</title>
      <link href="/articl/36002a8e.html"/>
      <url>/articl/36002a8e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/f9878666c86e49efa8e6.jpg" alt=""></p><a id="more"></a><p>在实际开发中，我们编写的大多数JavaScript代码包含大量的 if…else语句或者 try… catch 语句来做功能检测。<br>举一个简单的例子：事件的绑定，我们会首先想到下列的代码</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addHandler= <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">              <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">                  element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">              } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">                  element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">              } <span class="keyword">else</span> {</span><br><span class="line">                  element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">              }</span><br><span class="line">          }</span><br></pre></td></tr></tbody></table></figure><p>分析以上代码，为了兼容不同浏览器，每次执行 <strong>addHandler</strong> 时我们会去做功能检测，逐一去走 <strong>addHandler</strong> 中的if，获取到可以兼容的代码块。无可厚非，我们通过这两三个判断保证了每次都能使用到兼容浏览器的代码，注意到，我用了“每次”这个词。是的，以上代码每次调用 <strong>addHandler</strong> 都要做功能检测，而我们知道，当我们用某个浏览器打开网页时，其实就已经确定了哪个if/try可用了，完全没必要每次调用都检测。因此，我们引入了惰性加载函数的概念。</p><p><span style="color:red"><strong>惰性加载表示函数执行的分支仅会发生一次。有两种实现惰性加载的方式：在函数被调用时再处理函数；在声明函数时就指定适当函数。</strong></span></p><p>我们来优化一下addHandler 函数：</p><p>1、在函数被调用时再处理函数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addHandler= <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">              <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">                  addHandler = <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">                  };</span><br><span class="line">              } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">                  addHandler = <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                      element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">                  }</span><br><span class="line"></span><br><span class="line">              } <span class="keyword">else</span> {</span><br><span class="line">                  addHandler = <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                      element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">                  }</span><br><span class="line"></span><br><span class="line">              }</span><br><span class="line">              <span class="keyword">return</span> addHandler(element, type, handler);</span><br><span class="line">          },</span><br></pre></td></tr></tbody></table></figure><p><span style="color:red">if语句中的每一个分支都会给addHandler 变量赋值，有效覆盖了原有的函数，最后一步就是调用新赋的函数。下一次就会直接调用新赋的函数。</span></p><br><p>2、在声明函数时就指定适当的函数：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> addEvent2 = <span class="function">(<span class="params">(type, element, fun</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">type, element, fun</span>) =&gt;</span> {</span><br><span class="line">            element.addEventListener(type, fun, <span class="literal">false</span>);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">type, element, fun</span>) =&gt;</span> {</span><br><span class="line">            element.attachEvent(<span class="string">'on'</span> + type, fun);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">type, element, fun</span>) =&gt;</span> {</span><br><span class="line">            element[<span class="string">'on'</span> + type] = fun;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})()</span><br></pre></td></tr></tbody></table></figure><p>我们发现第二种方法在此例中并不适用，因为它是一个立即执行函数，带参显然并不合适（各种undefined），那么我们可以用 JavaScript高级程序设计 中的一个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> createXHR = <span class="function">(<span class="params"> (</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">'undefined'</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            ...</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXobject != <span class="string">'undefined'</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            ...</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            ...</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>总结：</p><p><strong>可以总结到，所谓在声明函数时就指定适当函数，即声明函数为匿名、立即执行函数，根据功能检测（if/try判断）结果指定函数体，当然，既然是一个立即执行函数，我们得注意使用场合。</strong></p><p><strong>以上两种方式都只在第一次执行函数时做了性能检测，省去了后续调用时多余的操作，优化了性能。</strong><br><br><br><br><br>愿你的坚持终有收获。<br><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript  XML、E4X、JSON、AJAX</title>
      <link href="/articl/ccd7cb0f.html"/>
      <url>/articl/ccd7cb0f.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/2006e2cdc11c418f90815c5ad723096c.jpg" alt=""></p><a id="more"></a><br><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a><a href="https://www.w3school.com.cn/xml/index.asp" target="_blank" rel="noopener">XML</a></h2><br><h2 id="E4X"><a href="#E4X" class="headerlink" title="E4X"></a><a href="https://www.w3school.com.cn/e4x/index.asp" target="_blank" rel="noopener">E4X</a></h2><br><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a><a href="https://www.w3school.com.cn/js/js_json_intro.asp" target="_blank" rel="noopener">JSON</a></h2><br><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a><a href="https://www.w3school.com.cn/js/js_ajax_intro.asp" target="_blank" rel="noopener">AJAX</a></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> XML </tag>
            
            <tag> E4X </tag>
            
            <tag> JSON </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript  XML 解析器</title>
      <link href="/articl/892b4331.html"/>
      <url>/articl/892b4331.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1d25af0fd7b24165a4419c4d0d95ffae.jpg" alt=""></p><a id="more"></a><p>所有现代浏览器都内建了供读取和操作 XML 的 XML 解析器。</p><p>解析器把 XML 转换为 XML DOM 对象 - 可通过 JavaScript 操作的对象。JavaScript 访问的 XML DOM 对象。</p><h2 id="解析-XML-文档"><a href="#解析-XML-文档" class="headerlink" title="解析 XML 文档"></a>解析 XML 文档</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) { <span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">    xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// code for IE6, IE5</span></span><br><span class="line">    xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>, <span class="string">"books.xml"</span>, <span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">xmlDoc = xmlhttp.responseXML;</span><br></pre></td></tr></tbody></table></figure><h2 id="解析-XML-字符串"><a href="#解析-XML-字符串" class="headerlink" title="解析 XML 字符串"></a>解析 XML 字符串</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">"&lt;bookstore&gt;&lt;book&gt;"</span>;</span><br><span class="line">txt = txt + <span class="string">"&lt;title&gt;Everyday Italian&lt;/title&gt;"</span>;</span><br><span class="line">txt = txt + <span class="string">"&lt;author&gt;Giada De Laurentiis&lt;/author&gt;"</span>;</span><br><span class="line">txt = txt + <span class="string">"&lt;year&gt;2005&lt;/year&gt;"</span>;</span><br><span class="line">txt = txt + <span class="string">"&lt;/book&gt;&lt;/bookstore&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.DOMParser) {</span><br><span class="line">    parser = <span class="keyword">new</span> DOMParser();</span><br><span class="line">    xmlDoc = parser.parseFromString(txt, <span class="string">"text/xml"</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="comment">// Internet Explorer</span></span><br><span class="line">{</span><br><span class="line">    xmlDoc = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLDOM"</span>);</span><br><span class="line">    xmlDoc.async = <span class="string">"false"</span>;</span><br><span class="line">    xmlDoc.loadXML(txt);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body onload=<span class="string">"displayCD()"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"showCD"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="button" onclick="previous()" value="&lt;&lt;"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="button" onclick="next()" value="&gt;&gt;"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        if (window.XMLHttpRequest) {</span></span><br><span class="line"><span class="regexp">            var xmlhttp = new XMLHttpRequest();</span></span><br><span class="line"><span class="regexp">        } else {</span></span><br><span class="line"><span class="regexp">            var xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        xmlhttp.open("GET", "/</span>xml/aqing.xml<span class="string">", false);</span></span><br><span class="line"><span class="string">        xmlhttp.send();</span></span><br><span class="line"><span class="string">        var xmlDoc = xmlhttp.responseXML; //xmlDoc 成为一个 XML DOM 对象，可由 JavaScript 访问。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        x = xmlDoc.getElementsByTagName("</span>CD<span class="string">");</span></span><br><span class="line"><span class="string">        i = 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function displayCD() {</span></span><br><span class="line"><span class="string">            a = (x[i].getElementsByTagName("</span>ARTIST<span class="string">")[0].childNodes[0].nodeValue);</span></span><br><span class="line"><span class="string">            aa = (x[i].getElementsByTagName("</span>COUNTRY<span class="string">")[0].childNodes[0].nodeValue);</span></span><br><span class="line"><span class="string">            aaa = (x[i].getElementsByTagName("</span>COMPANY<span class="string">")[0].childNodes[0].nodeValue);</span></span><br><span class="line"><span class="string">            aaa = (x[i].getElementsByTagName("</span>PRICE<span class="string">")[0].childNodes[0].nodeValue);</span></span><br><span class="line"><span class="string">            aaaa = (x[i].getElementsByTagName("</span>YEAR<span class="string">")[0].childNodes[0].nodeValue);</span></span><br><span class="line"><span class="string">            text = "</span>ARTIST :<span class="string">" + a + "</span>&lt;br&gt;COUNTRY :<span class="string">" + aa + "</span>&lt;br&gt;COMPANY :<span class="string">" + aaa + "</span>&lt;br&gt;PRICE :<span class="string">" + aaaa;</span></span><br><span class="line"><span class="string">            document.getElementById("</span>showCD<span class="string">").innerHTML = text;</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function previous() {</span></span><br><span class="line"><span class="string">            if (i &gt; 0) {</span></span><br><span class="line"><span class="string">                i--;</span></span><br><span class="line"><span class="string">                displayCD();</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function next() {</span></span><br><span class="line"><span class="string">            if (i &lt; x.length - 1) {</span></span><br><span class="line"><span class="string">                i++;</span></span><br><span class="line"><span class="string">                displayCD();</span></span><br><span class="line"><span class="string">            }</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>XML文件：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">&lt;CATALOG&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;Empire Burlesque&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Bob Dylan&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;USA&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;Columbia&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">10.90</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1985&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;Hide your heart&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;Bonnie Tyler&lt;<span class="regexp">/ARTIST&gt;</span></span><br><span class="line"><span class="regexp">&lt;COUNTRY&gt;UK&lt;/</span>COUNTRY&gt;</span><br><span class="line">&lt;COMPANY&gt;CBS Records&lt;<span class="regexp">/COMPANY&gt;</span></span><br><span class="line"><span class="regexp">&lt;PRICE&gt;9.90&lt;/</span>PRICE&gt;</span><br><span class="line">&lt;YEAR&gt;<span class="number">1988</span>&lt;<span class="regexp">/YEAR&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>CD&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;Greatest Hits&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Dolly Parton&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;USA&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;RCA&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">9.90</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1982&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;Still got the blues&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;Gary Moore&lt;<span class="regexp">/ARTIST&gt;</span></span><br><span class="line"><span class="regexp">&lt;COUNTRY&gt;UK&lt;/</span>COUNTRY&gt;</span><br><span class="line">&lt;COMPANY&gt;Virgin records&lt;<span class="regexp">/COMPANY&gt;</span></span><br><span class="line"><span class="regexp">&lt;PRICE&gt;10.20&lt;/</span>PRICE&gt;</span><br><span class="line">&lt;YEAR&gt;<span class="number">1990</span>&lt;<span class="regexp">/YEAR&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>CD&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;Eros&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Eros Ramazzotti&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;EU&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;BMG&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">9.90</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1997&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;One night only&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;Bee Gees&lt;<span class="regexp">/ARTIST&gt;</span></span><br><span class="line"><span class="regexp">&lt;COUNTRY&gt;UK&lt;/</span>COUNTRY&gt;</span><br><span class="line">&lt;COMPANY&gt;Polydor&lt;<span class="regexp">/COMPANY&gt;</span></span><br><span class="line"><span class="regexp">&lt;PRICE&gt;10.90&lt;/</span>PRICE&gt;</span><br><span class="line">&lt;YEAR&gt;<span class="number">1998</span>&lt;<span class="regexp">/YEAR&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>CD&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;Sylvias Mother&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Dr.Hook&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;UK&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;CBS&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">8.10</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1973&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;Maggie May&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;Rod Stewart&lt;<span class="regexp">/ARTIST&gt;</span></span><br><span class="line"><span class="regexp">&lt;COUNTRY&gt;UK&lt;/</span>COUNTRY&gt;</span><br><span class="line">&lt;COMPANY&gt;Pickwick&lt;<span class="regexp">/COMPANY&gt;</span></span><br><span class="line"><span class="regexp">&lt;PRICE&gt;8.50&lt;/</span>PRICE&gt;</span><br><span class="line">&lt;YEAR&gt;<span class="number">1990</span>&lt;<span class="regexp">/YEAR&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>CD&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;Romanza&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Andrea Bocelli&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;EU&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;Polydor&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">10.80</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1996&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;When a man loves a woman&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;Percy Sledge&lt;<span class="regexp">/ARTIST&gt;</span></span><br><span class="line"><span class="regexp">&lt;COUNTRY&gt;USA&lt;/</span>COUNTRY&gt;</span><br><span class="line">&lt;COMPANY&gt;Atlantic&lt;<span class="regexp">/COMPANY&gt;</span></span><br><span class="line"><span class="regexp">&lt;PRICE&gt;8.70&lt;/</span>PRICE&gt;</span><br><span class="line">&lt;YEAR&gt;<span class="number">1987</span>&lt;<span class="regexp">/YEAR&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>CD&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;Black angel&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Savage Rose&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;EU&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;Mega&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">10.90</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1995&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;1999 Grammy Nominees&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;Many&lt;<span class="regexp">/ARTIST&gt;</span></span><br><span class="line"><span class="regexp">&lt;COUNTRY&gt;USA&lt;/</span>COUNTRY&gt;</span><br><span class="line">&lt;COMPANY&gt;Grammy&lt;<span class="regexp">/COMPANY&gt;</span></span><br><span class="line"><span class="regexp">&lt;PRICE&gt;10.20&lt;/</span>PRICE&gt;</span><br><span class="line">&lt;YEAR&gt;<span class="number">1999</span>&lt;<span class="regexp">/YEAR&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>CD&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;For the good times&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Kenny Rogers&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;UK&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;Mucik Master&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">8.70</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1995&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;Big Willie style&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;Will Smith&lt;<span class="regexp">/ARTIST&gt;</span></span><br><span class="line"><span class="regexp">&lt;COUNTRY&gt;USA&lt;/</span>COUNTRY&gt;</span><br><span class="line">&lt;COMPANY&gt;Columbia&lt;<span class="regexp">/COMPANY&gt;</span></span><br><span class="line"><span class="regexp">&lt;PRICE&gt;9.90&lt;/</span>PRICE&gt;</span><br><span class="line">&lt;YEAR&gt;<span class="number">1997</span>&lt;<span class="regexp">/YEAR&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>CD&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;Tupelo Honey&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Van Morrison&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;UK&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;Polydor&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">8.20</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1971&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;The very best of&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;Cat Stevens&lt;<span class="regexp">/ARTIST&gt;</span></span><br><span class="line"><span class="regexp">&lt;COUNTRY&gt;UK&lt;/</span>COUNTRY&gt;</span><br><span class="line">&lt;COMPANY&gt;Island&lt;<span class="regexp">/COMPANY&gt;</span></span><br><span class="line"><span class="regexp">&lt;PRICE&gt;8.90&lt;/</span>PRICE&gt;</span><br><span class="line">&lt;YEAR&gt;<span class="number">1990</span>&lt;<span class="regexp">/YEAR&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>CD&gt;</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">&lt;TITLE&gt;Stop&lt;<span class="regexp">/TITLE&gt;</span></span><br><span class="line"><span class="regexp">&lt;ARTIST&gt;Sam Brown&lt;/</span>ARTIST&gt;</span><br><span class="line">&lt;COUNTRY&gt;UK&lt;<span class="regexp">/COUNTRY&gt;</span></span><br><span class="line"><span class="regexp">&lt;COMPANY&gt;A and M&lt;/</span>COMPANY&gt;</span><br><span class="line">&lt;PRICE&gt;<span class="number">8.90</span>&lt;<span class="regexp">/PRICE&gt;</span></span><br><span class="line"><span class="regexp">&lt;YEAR&gt;1988&lt;/</span>YEAR&gt;</span><br><span class="line">&lt;<span class="regexp">/CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;CD&gt;</span></span><br><span class="line"><span class="regexp">&lt;TITLE&gt;Bridge of Spies&lt;/</span>TITLE&gt;</span><br><span class="line">&lt;ARTIST&gt;T<span class="string">'Pau&lt;/ARTIST&gt;</span></span><br><span class="line"><span class="string">&lt;COUNTRY&gt;UK&lt;/COUNTRY&gt;</span></span><br><span class="line"><span class="string">&lt;COMPANY&gt;Siren&lt;/COMPANY&gt;</span></span><br><span class="line"><span class="string">&lt;PRICE&gt;7.90&lt;/PRICE&gt;</span></span><br><span class="line"><span class="string">&lt;YEAR&gt;1987&lt;/YEAR&gt;</span></span><br><span class="line"><span class="string">&lt;/CD&gt;</span></span><br><span class="line"><span class="string">&lt;CD&gt;</span></span><br><span class="line"><span class="string">&lt;TITLE&gt;Private Dancer&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">&lt;ARTIST&gt;Tina Turner&lt;/ARTIST&gt;</span></span><br><span class="line"><span class="string">&lt;COUNTRY&gt;UK&lt;/COUNTRY&gt;</span></span><br><span class="line"><span class="string">&lt;COMPANY&gt;Capitol&lt;/COMPANY&gt;</span></span><br><span class="line"><span class="string">&lt;PRICE&gt;8.90&lt;/PRICE&gt;</span></span><br><span class="line"><span class="string">&lt;YEAR&gt;1983&lt;/YEAR&gt;</span></span><br><span class="line"><span class="string">&lt;/CD&gt;</span></span><br><span class="line"><span class="string">&lt;CD&gt;</span></span><br><span class="line"><span class="string">&lt;TITLE&gt;Midt om natten&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">&lt;ARTIST&gt;Kim Larsen&lt;/ARTIST&gt;</span></span><br><span class="line"><span class="string">&lt;COUNTRY&gt;EU&lt;/COUNTRY&gt;</span></span><br><span class="line"><span class="string">&lt;COMPANY&gt;Medley&lt;/COMPANY&gt;</span></span><br><span class="line"><span class="string">&lt;PRICE&gt;7.80&lt;/PRICE&gt;</span></span><br><span class="line"><span class="string">&lt;YEAR&gt;1983&lt;/YEAR&gt;</span></span><br><span class="line"><span class="string">&lt;/CD&gt;</span></span><br><span class="line"><span class="string">&lt;CD&gt;</span></span><br><span class="line"><span class="string">&lt;TITLE&gt;Pavarotti Gala Concert&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">&lt;ARTIST&gt;Luciano Pavarotti&lt;/ARTIST&gt;</span></span><br><span class="line"><span class="string">&lt;COUNTRY&gt;UK&lt;/COUNTRY&gt;</span></span><br><span class="line"><span class="string">&lt;COMPANY&gt;DECCA&lt;/COMPANY&gt;</span></span><br><span class="line"><span class="string">&lt;PRICE&gt;9.90&lt;/PRICE&gt;</span></span><br><span class="line"><span class="string">&lt;YEAR&gt;1991&lt;/YEAR&gt;</span></span><br><span class="line"><span class="string">&lt;/CD&gt;</span></span><br><span class="line"><span class="string">&lt;CD&gt;</span></span><br><span class="line"><span class="string">&lt;TITLE&gt;The dock of the bay&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">&lt;ARTIST&gt;Otis Redding&lt;/ARTIST&gt;</span></span><br><span class="line"><span class="string">&lt;COUNTRY&gt;USA&lt;/COUNTRY&gt;</span></span><br><span class="line"><span class="string">&lt;COMPANY&gt;Atlantic&lt;/COMPANY&gt;</span></span><br><span class="line"><span class="string">&lt;PRICE&gt;7.90&lt;/PRICE&gt;</span></span><br><span class="line"><span class="string">&lt;YEAR&gt;1987&lt;/YEAR&gt;</span></span><br><span class="line"><span class="string">&lt;/CD&gt;</span></span><br><span class="line"><span class="string">&lt;CD&gt;</span></span><br><span class="line"><span class="string">&lt;TITLE&gt;Picture book&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">&lt;ARTIST&gt;Simply Red&lt;/ARTIST&gt;</span></span><br><span class="line"><span class="string">&lt;COUNTRY&gt;EU&lt;/COUNTRY&gt;</span></span><br><span class="line"><span class="string">&lt;COMPANY&gt;Elektra&lt;/COMPANY&gt;</span></span><br><span class="line"><span class="string">&lt;PRICE&gt;7.20&lt;/PRICE&gt;</span></span><br><span class="line"><span class="string">&lt;YEAR&gt;1985&lt;/YEAR&gt;</span></span><br><span class="line"><span class="string">&lt;/CD&gt;</span></span><br><span class="line"><span class="string">&lt;CD&gt;</span></span><br><span class="line"><span class="string">&lt;TITLE&gt;Red&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">&lt;ARTIST&gt;The Communards&lt;/ARTIST&gt;</span></span><br><span class="line"><span class="string">&lt;COUNTRY&gt;UK&lt;/COUNTRY&gt;</span></span><br><span class="line"><span class="string">&lt;COMPANY&gt;London&lt;/COMPANY&gt;</span></span><br><span class="line"><span class="string">&lt;PRICE&gt;7.80&lt;/PRICE&gt;</span></span><br><span class="line"><span class="string">&lt;YEAR&gt;1987&lt;/YEAR&gt;</span></span><br><span class="line"><span class="string">&lt;/CD&gt;</span></span><br><span class="line"><span class="string">&lt;CD&gt;</span></span><br><span class="line"><span class="string">&lt;TITLE&gt;Unchain my heart&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">&lt;ARTIST&gt;Joe Cocker&lt;/ARTIST&gt;</span></span><br><span class="line"><span class="string">&lt;COUNTRY&gt;USA&lt;/COUNTRY&gt;</span></span><br><span class="line"><span class="string">&lt;COMPANY&gt;EMI&lt;/COMPANY&gt;</span></span><br><span class="line"><span class="string">&lt;PRICE&gt;8.20&lt;/PRICE&gt;</span></span><br><span class="line"><span class="string">&lt;YEAR&gt;1987&lt;/YEAR&gt;</span></span><br><span class="line"><span class="string">&lt;/CD&gt;</span></span><br><span class="line"><span class="string">&lt;/CATALOG&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 元素的拖放事件</title>
      <link href="/articl/4916dd01.html"/>
      <url>/articl/4916dd01.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/30d4b93392a94ca5aa1f11cf9b6b8bfb.jpg" alt=""></p><a id="more"></a><p>为了让元素可拖动，需要使用 HTML5 <a href="https://www.runoob.com/tags/att-global-draggable.html" target="_blank" rel="noopener">draggable</a> 属性。<br>链接和图片默认是可拖动的，不需要 draggable 属性</p><br><p>在拖放的过程中会触发以下事件：</p><ol><li>在拖动目标上触发事件 (源元素):</li></ol><blockquote><ul><li><a href="https://www.runoob.com/jsref/event-ondragstart.html" target="_blank" rel="noopener">ondragstart</a> - 用户开始拖动元素时触发</li><li><a href="https://www.runoob.com/jsref/event-ondrag.html" target="_blank" rel="noopener">ondrag</a> - 元素正在拖动时触发</li><li><a href="https://www.runoob.com/jsref/event-ondragend.html" target="_blank" rel="noopener">ondragend</a> - 用户完成元素拖动后触发</li></ul></blockquote><ol start="2"><li>释放目标时触发的事件:</li></ol><blockquote><ul><li><a href="https://www.runoob.com/jsref/event-ondragenter.html" target="_blank" rel="noopener">ondragenter</a> - 当被鼠标拖动的对象进入其容器范围内时触发此事件</li><li><a href="https://www.runoob.com/jsref/event-ondragover.html" target="_blank" rel="noopener">ondragover</a> - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件</li><li><a href="https://www.runoob.com/jsref/event-ondragleave.html" target="_blank" rel="noopener">ondragleave</a> - 当被鼠标拖动的对象离开其容器范围内时触发此事件</li><li><a href="https://www.runoob.com/jsref/event-ondrop.html" target="_blank" rel="noopener">ondrop</a> - 在一个拖动过程中，释放鼠标键时触发此事件</li></ul></blockquote><br><p>将span拖放到div中</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        window.onload = function() {</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            EventUtil.addHandler(document, "dragstart", function(event) {</span></span><br><span class="line"><span class="regexp">                event = EventUtil.getEvent(event);</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/dataTransfer.setData()方法设置数据类型和拖动的数据</span></span><br><span class="line"><span class="regexp">                event.dataTransfer.setData("Text", event.target.id);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            });</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            /</span> 默认情况下,数据/元素不能在其他元素中被拖放。</span><br><span class="line">            对于drop我们必须防止元素的默认处理</span><br><span class="line">            EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"dragover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                event = EventUtil.getEvent(event);</span><br><span class="line">                EventUtil.preventDefault(event);</span><br><span class="line"></span><br><span class="line">            });</span><br><span class="line">            <span class="comment">/*对于drop,防止浏览器的默认处理数据(在drop中链接是默认打开)</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">            利用dataTransfer.getData()方法获得拖放数据</span></span><br><span class="line"><span class="comment">            拖拖的数据元素id</span></span><br><span class="line"><span class="comment">            拖拽元素附加到drop元素*/</span></span><br><span class="line">            EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"drop"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                event = EventUtil.getEvent(event);</span><br><span class="line">                EventUtil.preventDefault(event);</span><br><span class="line">                target = EventUtil.getTarget(event);</span><br><span class="line">                <span class="keyword">if</span> (event.target.className == <span class="string">"droptarget"</span>) {</span><br><span class="line">                    <span class="keyword">var</span> data = event.dataTransfer.getData(<span class="string">"Text"</span>);</span><br><span class="line">                    event.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// alert("ss");</span></span><br><span class="line"></span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> EventUtil = {</span><br><span class="line">            addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">                    element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">                    element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解决浏览器兼容性问题</span></span><br><span class="line">            getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回事件目标</span></span><br><span class="line">            getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取消事件的默认行为。</span></span><br><span class="line">            preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.preventDefault) {</span><br><span class="line">                    event.preventDefault();</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    event.returnValue = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移除事件处理程序</span></span><br><span class="line">            removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (element.removeEventListener) {</span><br><span class="line">                    element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) {</span><br><span class="line">                    element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提供相关元素的信息，relatedTarget这个属性只对与mouseover和mouseout事件才包含值。</span></span><br><span class="line">            getRelatedTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.relatedTarget) {</span><br><span class="line">                    <span class="keyword">return</span> event.relatedTarget;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement) {</span><br><span class="line">                    <span class="keyword">return</span> event.toElement;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement) {</span><br><span class="line">                    <span class="keyword">return</span> event.fromElement;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取鼠标按钮</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  0: 表示没有按下按钮。</span></span><br><span class="line"><span class="comment">                1: 表示按下了主鼠标按钮。</span></span><br><span class="line"><span class="comment">                2: 表示按下了次鼠标按钮。</span></span><br><span class="line"><span class="comment">                3: 表示同时按下了主、次鼠标按钮</span></span><br><span class="line"><span class="comment">                4: 表示按下了中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                5: 表示同时按下了主鼠标按钮和中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                6: 表示同时按下了次鼠标按钮和中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                7: 表示同时按下了三个鼠标按钮。*/</span></span><br><span class="line">            getButton: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) {</span><br><span class="line">                    <span class="keyword">return</span> event.button;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">switch</span> (event.button) {</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获得鼠标滚轮的增量值delta</span></span><br><span class="line">            getWheelDelta: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.wheelDelta) {</span><br><span class="line">                    <span class="keyword">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class="number">9.5</span> ?</span><br><span class="line">                        -event.wheelDelta : event.wheelDelta);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> -event.detail * <span class="number">40</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取字符串编码  主要用于文本框 监听事件是keypress</span></span><br><span class="line">            getCharCode: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> event.charCode == <span class="string">"number"</span>) {</span><br><span class="line">                    <span class="keyword">return</span> event.charCode;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> event.keyCode;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取消进一步的事件捕获或者冒泡</span></span><br><span class="line">            stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.stopPropagation) {</span><br><span class="line">                    event.stopPropagation();</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a href="https:/</span><span class="regexp">/www.baidu.com" id="dragtarget"&gt;百度一下&lt;/</span>a&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;span draggable=<span class="string">"true"</span> id=<span class="string">"dragtarget1"</span>&gt;阿清呀&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div style="width:100px;height:100px;background-color: #bfa;" class="droptarget"&gt;&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></tbody></table></figure><hr><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas绘图</title>
      <link href="/articl/25c30afd.html"/>
      <url>/articl/25c30afd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/fe7a8ed332cd44de83ce7ce97d3cf2fe.jpg" alt=""></p><a id="more"></a><br><h2 id="canvas绘图"><a href="#canvas绘图" class="headerlink" title="canvas绘图"></a>canvas绘图</h2><br><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_usage" target="_blank" rel="noopener">canvas教程</a></p><br><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial" target="_blank" rel="noopener">WebGL教程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ---表单脚本总结</title>
      <link href="/articl/9612ae41.html"/>
      <url>/articl/9612ae41.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/98f2abdf50c04d17b17748185207c048.png" alt=""></p><a id="more"></a><h1 id="表单基础知识"><a href="#表单基础知识" class="headerlink" title="表单基础知识"></a>表单基础知识</h1><p>在JavaScript中，表单对应的是HTMLFormElement 类型，它继承了HTMLElement 。</p><ul><li>acceptCharset:服务器能够处理的字符集;等价于HTML中的accept -charset特性。</li><li>action:接受请求的URL;等价于HTML中的action特性。</li><li>elements:表单中所有控件的集合( HTMLCollection )。</li><li>enctype:请求的编码类型;等价于HTML中的enctype特性。</li><li>length:表单中控件的数量。</li><li>method:要发送的HTTP请求类型，通常是”get”或”post”;等价于HTML的method特性。</li><li>name :表单的名称;等价于HTML的name特性。</li><li>reset () :将所有表单域重置为默认值。</li><li>submit () :提交表单。</li><li>target:用于发送请求和接收响应的窗口名称;等价于HTML的target特性。</li></ul><p>document.forms 可以获取页面中的所有表单，返回一个集合，在这个集合中可以通过数值索引或者name值来获取特定的表单。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstForm = <span class="built_in">document</span>.forms[<span class="number">0</span>]; <span class="comment">//取得页面中的第一个表单</span></span><br><span class="line"><span class="keyword">var</span> myForm = <span class="built_in">document</span>.forms[<span class="string">"form2"</span>]; <span class="comment">//取得页面中为"form2"的表单</span></span><br></pre></td></tr></tbody></table></figure><br><br><h2 id="1、提交表单"><a href="#1、提交表单" class="headerlink" title="1、提交表单"></a>1、提交表单</h2><p>用户点击按钮或者图像时</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit Form"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=<span class="string">"submit"</span>&gt;Submit Form&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;input type="image" src="graphic.gif"&gt;  /</span><span class="regexp">/图像也可以作为提交按钮</span></span><br></pre></td></tr></tbody></table></figure><p>在JavaScript中，可以用submit() 方法也可以提交表单。<strong>注意：在调用submit() 方法提交表单的时候，不会触发submit 事件。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"><span class="comment">// 提交表单</span></span><br><span class="line">form.submit();</span><br></pre></td></tr></tbody></table></figure><p>阻止提交按钮：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line"></span><br><span class="line">event = EventUtil.getEvent(event);</span><br><span class="line">EventUtil.preventDefault(event);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><h2 id="2、重置表单"><a href="#2、重置表单" class="headerlink" title="2、重置表单"></a>2、重置表单</h2><p>重置按钮：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"reset"</span> value=<span class="string">"Reset Form"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=<span class="string">"reset"</span>&gt;Reset Form&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在JavaScript中，可以用 reset() 方法也可以重置表单。<strong>注意：在调用 reset() 方法提交表单的时候，会一样触发 reset 事件。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"><span class="comment">// 重置表单</span></span><br><span class="line">form.reset();</span><br></pre></td></tr></tbody></table></figure><p>阻止重置按钮：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line">EventUtil.addHandler(form, <span class="string">"reset"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line"></span><br><span class="line">event = EventUtil.getEvent(event);</span><br><span class="line">EventUtil.preventDefault(event);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><h2 id="3、表单字段"><a href="#3、表单字段" class="headerlink" title="3、表单字段"></a>3、表单字段</h2><p>每个表单都有一个element 属，它是表单中所有表单元素的集合。是一个有序列表。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>);</span><br><span class="line"><span class="comment">//取得表单中的的一个字段</span></span><br><span class="line"><span class="keyword">var</span> field1 = form.elements[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//取得表单中为"textbox1"的字段</span></span><br><span class="line"><span class="keyword">var</span> field2 = form.elements[<span class="string">"textbox1"</span>];</span><br><span class="line"><span class="comment">//取得表单中包含字段的数量</span></span><br><span class="line"><span class="keyword">var</span> fieldCount = form.elements.length;</span><br></pre></td></tr></tbody></table></figure><br><p><strong>1、共有的表单字段属性</strong></p><ul><li>disabled:布尔值，表示当前字段是否被禁用。</li><li>form:指向当前字段所属表单的指针;只读。</li><li>name :当前字段的名称。</li><li>readonly:布尔值，表示当前字段是否只读。</li><li>tabIndex:表示当前字段的切换( tab)序号。</li><li>type:当前字段的类型，如” checkbox”、”radio”,等等。</li><li>value:当前字段将被提交给服务器的值。对文件字段来说，这个属性是只读的，包含着文件<br>在计算机中的路径。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"myForm"</span>);</span><br><span class="line"><span class="keyword">var</span> field = form.elements[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//修改value 属性</span></span><br><span class="line">field.value = <span class="string">"Another value"</span>;</span><br><span class="line"><span class="comment">//检查 form 属性的值</span></span><br><span class="line">alert(field.form === form); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//把焦点设置当前字段</span></span><br><span class="line">field.focus();</span><br><span class="line"><span class="comment">//禁用当前字段</span></span><br><span class="line">field.disabled = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//修改 type 属性（不推荐，但对&lt;input&gt;是可行的）</span></span><br><span class="line">field.type = <span class="string">"checkbox"</span>;</span><br></pre></td></tr></tbody></table></figure><p>防止多次点击提交按钮</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(form, <span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">event = EventUtil.getEvent(event);</span><br><span class="line"><span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line"><span class="comment">//取得提交按钮</span></span><br><span class="line"><span class="keyword">var</span> btn = target.elements[<span class="string">"submit-btn"</span>];</span><br><span class="line"><span class="comment">//禁用它</span></span><br><span class="line">btn.disabled = <span class="literal">true</span>;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>除了&lt;fieldset&gt;之外 ，所有表单都有 type 属性。但是&lt;input&gt;和&lt;button&gt;元素的 type 属性是可以动态修改的，而&lt;select&gt;元素的 type 属性则是只读的。<br><img src="https://img-blog.csdnimg.cn/20200531132456844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><br><p><strong>2、focus() 和 blur()</strong></p><p>focus() 方法用于将浏览器的焦点设置到表单字段上。<br>blur() 方法把焦点移走。</p><p>HTML5中新增一个 autofocus 属性。自动吧焦点设置到相应的字段。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> autofocus&gt;</span><br></pre></td></tr></tbody></table></figure><br><p><strong>3、共有的字段事件</strong></p><p>除了支持鼠标、键盘、更改和HTML事件之外，所有表单字段都支持下列3个事件。</p><ul><li>blur:当前字段失去焦点时触发。</li><li>change:对于&lt;input&gt;和&lt;textarea&gt;元素，在它们失去焦点且value值改变时触发;对于&lt;select&gt;元素，在其选项改变时触发。</li><li>focus:当前字段获得焦点时触发。</li></ul><br><br><h1 id="文本框脚本"><a href="#文本框脚本" class="headerlink" title="文本框脚本"></a>文本框脚本</h1><p>&lt;input&gt; 单行文本框</p><ul><li>size特性：指定文本框中能够显示的字符数。</li><li>value特性：设置文本框的初值。</li><li>maxlength 特性：指定文本框可以接受的最大字符数。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> size=<span class="string">"25"</span> maxlength=<span class="string">"50"</span> value=<span class="string">"aqingya"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><br><p>&lt;textarea&gt; 多行文本框</p><ul><li>rows：指定文本框中的字符行数</li><li>cols：指定文本框中的字符列数</li></ul><br><br><h2 id="1、选择文本"><a href="#1、选择文本" class="headerlink" title="1、选择文本"></a>1、选择文本</h2><p>select() 方法：用于选择文本框中的所有文本。&lt;inpout&gt;和&lt;textarea&gt;都支持 。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"focus"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    target.select();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p><strong>1、选择（select）事件</strong></p><p>选择文本框中的文本就会触发该事件。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">"textbox1"</span>];</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"select"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line"><span class="keyword">var</span> alert(<span class="string">"Text selected"</span> + textbox.value);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>2、取得选择的文本</p><p>通过select 事件我们知道用户什么时候选择了文本，但是不知道选择了什么样的文本。<br>两个属性：selectionStart 和selectionEnd 表示选择文本的范围（文本的开头和结尾）</p><p>兼容IE8及更早的版本中有一个document. selection对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedText</span>(<span class="params">textbox</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> textbox.selectionStart == <span class="string">"number"</span>) {</span><br><span class="line">        <span class="keyword">return</span> textbox.value.substring(textbox.selectionStart,textbox.selectionEnd);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.selection) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p><strong>3、选择部分文本</strong></p><p>setSelectionRange() 方法，这个方法接收两个参数:要选择的第一个字符的索引和要 选择的最后一个字符之后的字符的索引(类似于substring()方法的两个参数)。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">textbox.value = <span class="string">"Hello world!"</span></span><br><span class="line"><span class="comment">//选择所有字符</span></span><br><span class="line">textbox.setSelectionRange(<span class="number">0</span>, textbox.value.length); <span class="comment">//"Hello world!"</span></span><br><span class="line"><span class="comment">//选择前 3 个字符</span></span><br><span class="line">textbox.setSelectionRange(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">//"Hel"</span></span><br><span class="line"><span class="comment">//选择第4到第6个字符</span></span><br><span class="line">textbox.setSelectionRange(<span class="number">4</span>, <span class="number">7</span>); <span class="comment">//"o w"</span></span><br></pre></td></tr></tbody></table></figure><p>兼容IE8<br>createTextRange() 方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">textbox.value = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> range = textbox.createTextRange();</span><br><span class="line"><span class="comment">//选择所有字符</span></span><br><span class="line">range.collapse(<span class="literal">true</span>);</span><br><span class="line">range.moveStart(<span class="string">"character"</span>, <span class="number">0</span>);</span><br><span class="line">range.moveEnd(<span class="string">"character"</span>, textbox.value.length); <span class="comment">//"Hello world!"</span></span><br><span class="line">range.select();</span><br><span class="line"><span class="comment">//选择前 3 个字符</span></span><br><span class="line">range.collapse(<span class="literal">true</span>);</span><br><span class="line">range.moveStart(<span class="string">"character"</span>, <span class="number">0</span>);</span><br><span class="line">range.moveEnd(<span class="string">"character"</span>, <span class="number">3</span>);</span><br><span class="line">range.select(); <span class="comment">//"Hel"</span></span><br><span class="line"><span class="comment">//选择第4到第6个字符</span></span><br><span class="line">range.collapse(<span class="literal">true</span>);</span><br><span class="line">range.moveStart(<span class="string">"character"</span>, <span class="number">4</span>);</span><br><span class="line">range.moveEnd(<span class="string">"character"</span>, <span class="number">3</span>);</span><br><span class="line">range.select(); <span class="comment">//"o w"</span></span><br></pre></td></tr></tbody></table></figure><p>跨浏览器方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectText</span>(<span class="params">textbox, startIndex, stopIndex</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (textbox.setSelectionRange) {</span><br><span class="line">        textbox.setSelectionRange(startIndex, stopIndex);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (textbox.createTextRange) {</span><br><span class="line">        <span class="keyword">var</span> range = textbox.createTextRange();</span><br><span class="line">        range.collapse(<span class="literal">true</span>);</span><br><span class="line">        range.moveStart(<span class="string">"character"</span>, startIndex);</span><br><span class="line">        range.moveEnd(<span class="string">"character"</span>, stopIndex - startIndex);</span><br><span class="line">        range.select();</span><br><span class="line">    }</span><br><span class="line">    textbox.focus();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">textbox.value = <span class="string">"Hello world!"</span></span><br><span class="line"><span class="comment">//选择所有字符</span></span><br><span class="line">selectText(textbox, <span class="number">0</span>, textbox.value.length); <span class="comment">//"Hello world!"</span></span><br><span class="line"><span class="comment">//选择前 3 个字符</span></span><br><span class="line">selectText(textbox, <span class="number">0</span>, <span class="number">3</span>); <span class="comment">//"Hel"</span></span><br><span class="line"><span class="comment">//选择第4到第6个字符</span></span><br><span class="line">selectText(textbox, <span class="number">4</span>, <span class="number">7</span>); <span class="comment">//"o w"</span></span><br></pre></td></tr></tbody></table></figure><br><br><h2 id="2、过滤输入"><a href="#2、过滤输入" class="headerlink" title="2、过滤输入"></a>2、过滤输入</h2><p><strong>1、屏蔽字符</strong></p><p>响应文本输入框中插入字符操作的是keypress 事件。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"keypress"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    <span class="keyword">var</span> charCode = EventUtil.getCharCode(event);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/\d/</span>.test(<span class="built_in">String</span>.fromCharCode(charCode)) &amp;&amp; charCode &gt; <span class="number">9</span> &amp;&amp;</span><br><span class="line">        !event.ctrlKey) {</span><br><span class="line">        <span class="comment">//屏蔽不符合的按键</span></span><br><span class="line">        EventUtil.preventDefault(event);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p><strong>2、操作剪切板</strong></p><p>剪切板事件</p><ul><li>beforecopy:在发生复制操作前触发。</li><li>copy :在发生复制操作时触发。</li><li>beforecut:在发生剪切操作前触发。</li><li>cut :在发生剪切操作时触发。</li><li>be forepaste:在发生粘贴操作前触发。</li><li>paste:在发生粘贴操作时触发。</li></ul><p>向EventUtil中添加方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取粘贴板内容</span></span><br><span class="line">getClipboardText: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    <span class="comment">// 兼容浏览器 ，在IE中clipboardData是window对象。</span></span><br><span class="line">    <span class="keyword">var</span> clipboardData = (event.clipboardData || <span class="built_in">window</span>.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">"text"</span>);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置粘贴板内容</span></span><br><span class="line">setClipboardText: <span class="function"><span class="keyword">function</span>(<span class="params">event, value</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (event.clipboardData) {</span><br><span class="line">        <span class="keyword">return</span> event.clipboardData.setData(<span class="string">"text/plain"</span>, value);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>, value);</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>在需要确保粘贴到文本框中的文本中包含某些字符，或者符合某种格式要求时，能够访问剪贴板是非常有用的。例如，如果一个文本框只接受数值，那么就必须检测粘贴过来的值，以确保有效。在paste事件中，可以确定剪贴板中的值是否有效，如果无效，就可以像下面示例中那样，取消默认的行为。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(textbox, <span class="string">"paste"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> text = EventUtil.getClipboardText(event);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^\d*$/</span>.test(text)) {</span><br><span class="line">        EventUtil.preventDefault(event);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p><strong>到目前EventUtil 如下：</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = {</span><br><span class="line">            addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">                    element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">                    element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解决浏览器兼容性问题</span></span><br><span class="line">            getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回事件目标</span></span><br><span class="line">            getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取消事件的默认行为。</span></span><br><span class="line">            preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.preventDefault) {</span><br><span class="line">                    event.preventDefault();</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    event.returnValue = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移除事件处理程序</span></span><br><span class="line">            removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (element.removeEventListener) {</span><br><span class="line">                    element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) {</span><br><span class="line">                    element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提供相关元素的信息，relatedTarget这个属性只对与mouseover和mouseout事件才包含值。</span></span><br><span class="line">            getRelatedTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.relatedTarget) {</span><br><span class="line">                    <span class="keyword">return</span> event.relatedTarget;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement) {</span><br><span class="line">                    <span class="keyword">return</span> event.toElement;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement) {</span><br><span class="line">                    <span class="keyword">return</span> event.fromElement;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取鼠标按钮</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  0: 表示没有按下按钮。</span></span><br><span class="line"><span class="comment">                1: 表示按下了主鼠标按钮。</span></span><br><span class="line"><span class="comment">                2: 表示按下了次鼠标按钮。</span></span><br><span class="line"><span class="comment">                3: 表示同时按下了主、次鼠标按钮</span></span><br><span class="line"><span class="comment">                4: 表示按下了中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                5: 表示同时按下了主鼠标按钮和中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                6: 表示同时按下了次鼠标按钮和中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                7: 表示同时按下了三个鼠标按钮。*/</span></span><br><span class="line">            getButton: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) {</span><br><span class="line">                    <span class="keyword">return</span> event.button;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">switch</span> (event.button) {</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获得鼠标滚轮的增量值delta</span></span><br><span class="line">            getWheelDelta: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.wheelDelta) {</span><br><span class="line">                    <span class="keyword">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class="number">9.5</span> ?</span><br><span class="line">                        -event.wheelDelta : event.wheelDelta);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> -event.detail * <span class="number">40</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取字符串编码  主要用于文本框 监听事件是keypress</span></span><br><span class="line">            getCharCode: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> event.charCode == <span class="string">"number"</span>) {</span><br><span class="line">                    <span class="keyword">return</span> event.charCode;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> event.keyCode;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取粘贴板内容</span></span><br><span class="line">            getClipboardText: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="comment">// 兼容浏览器 ，在IE中clipboardData是window对象。</span></span><br><span class="line">                <span class="keyword">var</span> clipboardData = (event.clipboardData || <span class="built_in">window</span>.clipboardData);</span><br><span class="line">                <span class="keyword">return</span> clipboardData.getData(<span class="string">"text"</span>);</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置粘贴板内容</span></span><br><span class="line">            setClipboardText: <span class="function"><span class="keyword">function</span>(<span class="params">event, value</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.clipboardData) {</span><br><span class="line">                    <span class="keyword">return</span> event.clipboardData.setData(<span class="string">"text/plain"</span>, value);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>, value);</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取消进一步的事件捕获或者冒泡</span></span><br><span class="line">            stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.stopPropagation) {</span><br><span class="line">                    event.stopPropagation();</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        };</span><br></pre></td></tr></tbody></table></figure><br><h2 id="4、HTML5-约束验证API"><a href="#4、HTML5-约束验证API" class="headerlink" title="4、HTML5 约束验证API"></a>4、HTML5 约束验证API</h2><p><strong>1、必填字段</strong></p><p>required 属性：带有required 属性的字段必须填。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> required&gt;</span><br></pre></td></tr></tbody></table></figure><br><p><strong>2、其他输入类型</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"email"</span> name =<span class="string">"email"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"url"</span> name=<span class="string">"homepage"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><br><p><strong>3、数值范围</strong></p><p>比如想让用户只能输入 0 到 100 的值，而且还是5的倍数。·</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"number"</span> min=<span class="string">"0"</span> max=<span class="string">"100"</span> step=<span class="string">"5"</span> name=<span class="string">"count"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><br><p>4、输入模式</p><p>pattern 属性：这个属性的值的一个正则表达式。用于匹配文本框中的值。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> pattern=<span class="string">"\d+"</span> name=<span class="string">"count"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><br><p><strong>5、检测有效性</strong></p><p>checkValidity() 方法可以检查表单中的某个字段是否有效。所有的表单字段都有这个方法。</p><p><strong>话句话说：必填字段中如果没有值就是无效的，而字段中的值与pattern属性不匹配也是无效的。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>].checkValidity()){</span><br><span class="line"><span class="comment">//字符有效，继续</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="comment">//字符无效</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要检测整个表单是否有效，可以在表单自身调用checkValidity()方法。如果所有表单字段都有效，这个方法返回true;即使有一一个字段无效，这个方法也会返回false。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.forms[<span class="number">0</span>].checkValidity()){</span><br><span class="line"><span class="comment">//表单有效，继续</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="comment">//表单无效</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p><strong>6、禁用验证</strong></p><p>novalidate 属性：设置它，表单就不需要进行验证。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">" "</span> novalidate&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>formnovalidate 属性：某一个按钮不需要验证。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"submit"</span>  name=<span class="string">"阿清"</span> value=<span class="string">"aqing"</span> formnovalidate&gt;</span><br></pre></td></tr></tbody></table></figure><br><br><h1 id="选择框脚本"><a href="#选择框脚本" class="headerlink" title="选择框脚本"></a>选择框脚本</h1><p>选择框是通过&lt;select&gt;和&lt;option&gt;元素创建的。为了方便与这个控件交互，除了所有表单字段共有的属性和方法外，HTMLSelectElement 类型还提供了下列属性和方法。</p><ul><li>add (newoption, relOption): 向控件中插人新&lt;option&gt;元素，其位置在相关项( relOption)之前。</li><li>multiple:布尔值，表示是否允许多项选择;等价于HTML中的multiple特性。</li><li>options:控件中所有&lt;option&gt;元素的HTMLCollection。</li><li>remove ( index) :移除给定位置的选项。</li><li>selectedIndex:基于0的选中项的索引，如果没有选中项，则值为-1。对于支持多选的控件,只保存选中项中第一项的索引。</li><li>size:选择框中可见的行数;等价于HTML中的size特性。</li></ul><br><p>选择框的type属性不是”select-one”,就是”select- multiple”,这取决于HTML代码中有没有multiple特性。选择框的value属性由当前选中项决定，相应规则如下。</p><ul><li>如果没有选中的项，则选择框的value属性保存空字符串。</li><li>如果有一个选中项，而且该项的value特性已经在HTML中指定，则选择框的value属性等于选中项的value特性。即使value特性的值是空字符串，也同样遵循此条规则。</li><li>如果有一个选中项，但该项的value特性在HTML中未指定，则选择框的value属性等于该项的文本。</li><li>如果有多个选中项，则选择框的value属性将依据前两条规则取得第一个选中项的值。</li></ul><p>举个栗子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=<span class="string">"location"</span> id=<span class="string">"selLocation"</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">"Sunnyvale, CA"</span>&gt;Sunnyvale&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option value="Los Angeles, CA"&gt;Los Angeles&lt;/</span>option&gt;</span><br><span class="line">&lt;option value=<span class="string">"Mountain View, CA"</span>&gt;Mountain View&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option value=""&gt;China&lt;/</span>option&gt;</span><br><span class="line">&lt;option&gt;Australia&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br></pre></td></tr></tbody></table></figure><p>如果用户选择了其中第一项，则选择框的值就是” Sunnyvale, CA”。 如果文本为”China “的选项被选中，则选择框的值就是-一个空字符串，因为其value特性是空的。如果选择了最后一项，那么由于&lt;option&gt;中没有指定value特性，则选择框的值就是” Australia”。</p><br><p>在DOM中，每个&lt;option&gt;元素都有一个HTMLOptionElement 对象表示。为便于访问数据，HTMLOptionElement对象添加了下列属性:<strong>（这些属性的目的都是为了方便选项的访问）</strong></p><ul><li>index:当前选项在options集合中的索引。</li><li>label:当前选项的标签;等价于HTML中的label特性。</li><li>selected:布尔值，表示当前选项是否被选中。将这个属性设置为true可以选中当前选项。</li><li>text:选项的文本。</li><li>value:选项的值(等价于HTML中的value特性)。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectbox = <span class="built_in">document</span>.forms[<span class="number">0</span>]. elements[<span class="string">"location"</span>];</span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> text = selectbox.options[<span class="number">0</span>].text; <span class="comment">// 选项中的文本</span></span><br><span class="line"><span class="keyword">var</span> value = selectbox.options[<span class="number">0</span>].value; <span class="comment">//选项的值</span></span><br></pre></td></tr></tbody></table></figure><br><h2 id="1、添加选项"><a href="#1、添加选项" class="headerlink" title="1、添加选项"></a>1、添加选项</h2><p>有两种方法<br>1、使用DOM方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newOption = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span><br><span class="line">newOption.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Option text"</span>));</span><br><span class="line">newOption.setAttribute(<span class="string">"value"</span>, <span class="string">"Option value"</span>);</span><br><span class="line">selectbox.appendChild(newOption);</span><br></pre></td></tr></tbody></table></figure><p>2、添加新选项的方式是使用选择框的add()方法。DOM规定这个方法接受两个参数:要添加的新选项和将位于新选项之后的选项。如果想在列表的最后添加一个选项，应该将第二个参数设置为null。在IE中第二个参数设置为undefined。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newOption = <span class="keyword">new</span> Option(<span class="string">"Option text"</span>, <span class="string">"Option value"</span>);</span><br><span class="line">selectbox.add(newOption, <span class="literal">undefined</span>); <span class="comment">//最佳方案</span></span><br></pre></td></tr></tbody></table></figure><p><strong>推荐使用第二种</strong></p><br><h2 id="2、移除选项"><a href="#2、移除选项" class="headerlink" title="2、移除选项"></a>2、移除选项</h2><p>1、使用DOM方法中的removeChild() 方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.removeChild(selectbox.options[<span class="number">0</span>]); <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></tbody></table></figure><p>2、使用选项框中的remove() 方法<br>一个参数：移除选项的索引</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.remove(<span class="number">0</span>);  <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></tbody></table></figure><p>3、就是将相应选项设置为null。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectbox.options[<span class="number">0</span>] = <span class="literal">null</span>; <span class="comment">//移除第一个选项</span></span><br></pre></td></tr></tbody></table></figure><br><h2 id="3、移动和重排选项"><a href="#3、移动和重排选项" class="headerlink" title="3、移动和重排选项"></a>3、移动和重排选项</h2><p>移动：使用DOM中的appendChild() 方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectbox1 = <span class="built_in">document</span>.getElementById(<span class="string">"selLocations1"</span>);</span><br><span class="line"><span class="keyword">var</span> selectbox2 = <span class="built_in">document</span>.getElementById(<span class="string">"selLocations2"</span>);</span><br><span class="line">selectbox2.appendChild(selectbox1.options[<span class="number">0</span>]);</span><br></pre></td></tr></tbody></table></figure><p><span style="color:red">移动选项与移除选项有一个共同之处，即会重置每-一个选项的index属性。</span></p><br><p>重排：使用DOM方法 insertBefore() 方法。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionToMove = selectbox.options[<span class="number">1</span>];</span><br><span class="line">selectbox.insertBefore(optionToMove, selectbox.options[optionToMove.index<span class="number">-1</span>]);</span><br></pre></td></tr></tbody></table></figure><hr><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM事件总结</title>
      <link href="/articl/a6abfcff.html"/>
      <url>/articl/a6abfcff.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/692bdcd247de45b0a9dbcb8b0749403c.png" alt=""></p><a id="more"></a><h1 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h1><p>事件就是文档或者浏览器窗口中发生的一些特定的交互瞬间。JavaScript与HTML是交互是通过事件来实现的。<br><br></p><h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><p>事件流描述的是从页面接受事件的顺序。</p><br><h2 id="1、事件冒泡"><a href="#1、事件冒泡" class="headerlink" title="1、事件冒泡"></a>1、事件冒泡</h2><p>事件开始时由最具体的元素接收，然后逐渐向上传播到较为不具体的节点（文档）<br><img src="https://img-blog.csdnimg.cn/20200529143146469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br></p><h2 id="2、事件捕获"><a href="#2、事件捕获" class="headerlink" title="2、事件捕获"></a>2、事件捕获</h2><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意是到达预定目标之前捕获它。<br><img src="https://img-blog.csdnimg.cn/20200529143449345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><br></p><h2 id="3、DOM事件流"><a href="#3、DOM事件流" class="headerlink" title="3、DOM事件流"></a>3、DOM事件流</h2><p>“DOM2级事件”规定的时间流包括三个阶段： 事件捕获阶段、处于目标的阶段和事件冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段。<br><img src="https://img-blog.csdnimg.cn/20200529143946721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><br><br></p><h1 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h1><h2 id="1、HTML事件处理程序"><a href="#1、HTML事件处理程序" class="headerlink" title="1、HTML事件处理程序"></a>1、HTML事件处理程序</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> value = <span class="string">"点击"</span> onclick = <span class="string">"alert('阿清呀')"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value = <span class="string">"点击"</span> onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>事件处理程序中的代码在执行时，有权访问全局作用域中的任何代码。</p><p>缺点：</p><ol><li>存在一个时差问题。因为用户可能会在HTML元素一出现在页面上就触发相应的事件，但当时的事件处理程序有可能尚不具备执行条件。</li><li>另一个缺点是，这样扩展事件处理程序的作用域链在不同浏览器中会导致不同结果。不同 Javascript引擎遵循的标识符解析规则略有差异，很可能会在访问非限定对象成员时出错。</li></ol><br><h2 id="2、DOM0-级事件处理程序"><a href="#2、DOM0-级事件处理程序" class="headerlink" title="2、DOM0 级事件处理程序"></a>2、DOM0 级事件处理程序</h2><p>JavaScript指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。<br>优点：简单、具有跨浏览器的优势。<br>缺点：无法为一个元素绑定多个事件。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"Btn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="keyword">this</span>.id); <span class="comment">//"Btn"</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在事件处理程序中可以通过this访问元素的任何属性和方法。以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。<span style="color:red">this指的绑定事件的元素。</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure><p>将相应的属性设置为null，也可以删除以这种方式制定的事件处理程序。</p><br><h2 id="3、DOM2-级事件处理程序"><a href="#3、DOM2-级事件处理程序" class="headerlink" title="3、DOM2 级事件处理程序"></a>3、DOM2 级事件处理程序</h2><p>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作： addEventlistener()和 removeEventlistener()。<br>参数：</p><ol><li>事件的字符串，不要on</li><li>回调函数，当事件触发时该函数会被调用</li><li>这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序，一般都传false。</li></ol><p>使用DOM2 级事件的好处是可以添加多个事件处理程序，事件的处理顺序是按照添它们的顺序触发的。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="keyword">this</span>);   <span class="comment">//[object HTMLButtonElement]</span></span><br><span class="line">}, <span class="literal">false</span>);</span><br></pre></td></tr></tbody></table></figure><p><span style="color:red">DOM2 级事件处理程序中的 this 是指向它绑定的元素。</span></p><p>通过addEventListener() 添加的事件处理程序只能使用 removeEventListener() 来移除，移除时传入的参数与添加处理程序时使用的参数相同，这也意味着通过addEventListener() 添加的匿名函数将无法移除。如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="keyword">this</span>.id);</span><br><span class="line">}, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 这里省略了??代码</span></span><br><span class="line">btn.removeEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ <span class="comment">// 没有用！</span></span><br><span class="line">    alert(<span class="keyword">this</span>.id);</span><br><span class="line">}, <span class="literal">false</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="keyword">this</span>.id);</span><br><span class="line">};</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, handler, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 这里省略了??代码</span></span><br><span class="line">btn.removeEventListener(<span class="string">"click"</span>, handler, <span class="literal">false</span>); <span class="comment">// 有效！</span></span><br></pre></td></tr></tbody></table></figure><br><h2 id="4、IE事件处理程序"><a href="#4、IE事件处理程序" class="headerlink" title="4、IE事件处理程序"></a>4、IE事件处理程序</h2><p>在IE8中实现了与DOM中类似的两个方法： attachEvent()和 detachEvent()。来绑定事件</p><p>参数：</p><ol><li><p>事件的字符串，要on。</p></li><li><p>回调函数。</p><p>这个方法也可以同时为一个事件绑定多个处理函数。不同的是它是后绑定的先执行，执行顺序和addEventListener()相反。</p></li></ol><p><span style="color:red">在IE中使用attachEvent() 与其他两个事件处理程序的主要区别就是作用域，在DOM 0 级和DOM 2 级的情况下，事件处理程序会在所谓的元素作用域中运行。在使用attachEvent() 方法的情况下事件处理程序会在全局作用域中运行。<strong>因此this等于window</strong>，这在编写跨浏览器作用域中非常重要。</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"Btn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">//true</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>使用attachEvent ()添加的事件可以通过detachEvent ()来移除，条件是必须提供相同的参数。与DOM方法一样，这也意味着添加的匿名函数将不能被移除。不过，只要能够将对相同函数的引用传<br>给detachEvent(),就可以移除相应的事件处理程序。</p><br><h2 id="5、跨浏览器事件处理程序"><a href="#5、跨浏览器事件处理程序" class="headerlink" title="5、跨浏览器事件处理程序"></a>5、跨浏览器事件处理程序</h2><p>对其进行封装。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = {</span><br><span class="line">            addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">                    element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">                    element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解决浏览器兼容性问题</span></span><br><span class="line">            getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回事件目标</span></span><br><span class="line">            getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取消事件的默认行为。</span></span><br><span class="line">            preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.preventDefault) {</span><br><span class="line">                    event.preventDefault();</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    event.returnValue = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移除事件处理程序</span></span><br><span class="line">            removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (element.removeEventListener) {</span><br><span class="line">                    element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) {</span><br><span class="line">                    element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提供相关元素的信息，relatedTarget这个属性只对与mouseover和mouseout事件才包含值。</span></span><br><span class="line">            getRelatedTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.relatedTarget) {</span><br><span class="line">                    <span class="keyword">return</span> event.relatedTarget;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement) {</span><br><span class="line">                    <span class="keyword">return</span> event.toElement;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement) {</span><br><span class="line">                    <span class="keyword">return</span> event.fromElement;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取鼠标按钮</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  0: 表示没有按下按钮。</span></span><br><span class="line"><span class="comment">                1: 表示按下了主鼠标按钮。</span></span><br><span class="line"><span class="comment">                2: 表示按下了次鼠标按钮。</span></span><br><span class="line"><span class="comment">                3: 表示同时按下了主、次鼠标按钮</span></span><br><span class="line"><span class="comment">                4: 表示按下了中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                5: 表示同时按下了主鼠标按钮和中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                6: 表示同时按下了次鼠标按钮和中间的鼠标按钮。</span></span><br><span class="line"><span class="comment">                7: 表示同时按下了三个鼠标按钮。*/</span></span><br><span class="line">            getButton: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) {</span><br><span class="line">                    <span class="keyword">return</span> event.button;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">switch</span> (event.button) {</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获得鼠标滚轮的增量值delta</span></span><br><span class="line">            getWheelDelta: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.wheelDelta) {</span><br><span class="line">                    <span class="keyword">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class="number">9.5</span> ?</span><br><span class="line">                        -event.wheelDelta : event.wheelDelta);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> -event.detail * <span class="number">40</span>;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取字符串编码  主要用于文本框 监听事件是keypress</span></span><br><span class="line">            getCharCode: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> event.charCode == <span class="string">"number"</span>) {</span><br><span class="line">                    <span class="keyword">return</span> event.charCode;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> event.keyCode;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取消进一步的事件捕获或者冒泡</span></span><br><span class="line">            stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (event.stopPropagation) {</span><br><span class="line">                    event.stopPropagation();</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        };</span><br></pre></td></tr></tbody></table></figure><br><br><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>在触发DOM上的某个事件时，会产生一个事件对象 event ，这个对象中包含着所有与事件有关的信息。包括导致事件的元素，事件的类型，以及其他事件相关的信息。<br><br></p><h2 id="1、DOM中的事件对象"><a href="#1、DOM中的事件对象" class="headerlink" title="1、DOM中的事件对象"></a>1、DOM中的事件对象</h2><p>兼容DOM的浏览器会将一个event 对象传入到事件处理事件程序中。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"> btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">     alert(event.type); <span class="comment">//"click"</span></span><br><span class="line"> };</span><br><span class="line"> btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">     alert(event.type); <span class="comment">//"click"</span></span><br><span class="line"> }, <span class="literal">false</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>event.type 属性表示的事件类型，始终包含着被触发的事件。</strong></p><p>event包含于创建它的特定事件有关的属性和方法，触发的事件类型不一样，可用的属性和方法也不一样。不过所有事件都会有下列成员：<br><img src="https://img-blog.csdnimg.cn/20200529165308798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200529165532435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在事件处理程序的内部，对象 this 始终等于 currentTarget 的值，而 target 则包含事件的事件的实际目标。两种情况：</p><p>1、如果直接将事件处理程序给定目标元素，则this 、currentTarget、target 三个值相等。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    alert(event.currentTarget === <span class="keyword">this</span>); <span class="comment">//true</span></span><br><span class="line">    alert(event.target === <span class="keyword">this</span>); <span class="comment">//true</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>2、如果将事件处理程序给定目标元素的父节点或者祖先节点那么target 的值就不和this 、currentTarget 的值相等。<span style="color:red">（事件的委派中要注意）</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    alert(event.currentTarget === <span class="built_in">document</span>.body); <span class="comment">//true</span></span><br><span class="line">    alert(<span class="keyword">this</span> === <span class="built_in">document</span>.body); <span class="comment">//true</span></span><br><span class="line">    alert(event.target === <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>)); <span class="comment">//true</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><br>preventDefault() 方法，可以阻止特定事件的默认行为。如链接的默认行为是点击时会跳转到指定的URl。如果阻止它的的默认行为，就会点击时没有反应。cancelable 属性设置为 true的事件，才可以用 proventDefault() 来取消其默认行为。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"myLink"</span>);</span><br><span class="line">link.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    event.preventDefault();</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><br>stopPropagation() 方法 用于立即停止事件在DOM中的传播，取消事件的进一步捕获或者冒泡。例如 在一个按钮的事件处理程序中调用 stopPropagation()，这样冒泡就不会在document.body上响应处理事件。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">alert(<span class="string">"Clicked"</span>);</span><br><span class="line">event.stopPropagation();</span><br><span class="line">};</span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">alert(<span class="string">"Body clicked"</span>);     <span class="comment">//不会触发该事件</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><br><p>eventPhase属性，可以用来确定事件当前正位于事件流的哪个阶段。</p><ul><li>event.eventPhase 等于 1 ：在捕获阶段调用处理事件。</li><li>event.eventPhase 等于 2 ：事件处理程序在目标对象上。</li><li>event.eventPhase 等于 3 ：在冒泡阶段调用处理程序。</li></ul><p><strong>尽管“处于目标”发生在冒泡阶段，但 event.eventPhase 是等于 2 的。<br>当 event.eventPhase 等于 2 的时候，this 、currentTarget、target 三个值相等。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    alert(event.eventPhase); <span class="comment">//2</span></span><br><span class="line">};</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    alert(event.eventPhase); <span class="comment">//1</span></span><br><span class="line">}, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    alert(event.eventPhase); <span class="comment">//3</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><br><p><span style="color:red"><strong>只有在事件处理程序执行期间，event对象才会存在;一旦事件处理程序执行完成，event对象就会被销毁。</strong></span></p><br><h2 id="2、IE中的事件对象"><a href="#2、IE中的事件对象" class="headerlink" title="2、IE中的事件对象"></a>2、IE中的事件对象</h2><p>要访问 IE 中的 event 对象有几种方式，取决于指定事件处理的方法。</p><ol><li>如果使用DOM 0 级方法添加事件处理程序时event对象作为window对象的一个属性存在。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> event = <span class="built_in">window</span>.event;</span><br><span class="line">    alert(event.type); <span class="comment">//"click"</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>如果使用attachEvent() 添加的事件，一个名叫 event 对象作为参数被传入事件函数中。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    alert(event.type); <span class="comment">//"click"</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>如果通过HTML特性指定的事件处理程序，可以通过一个名叫 event 的变量来访问 event 对象。和第二种相同。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"Click Me"</span> onclick=<span class="string">"alert(event.type)"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><br><p>IE的 event 对象同样也包含与创建它的事件相关的属性和方法。其中很多属性和方法都有对应的<br>或者相关的DOM属性和方法。与DOM的event对象一样，这些属性和方法也会因为事件类型的不同<br>而不同，但所有事件对象都会包含下表所列的属性和方法。<br><img src="https://img-blog.csdnimg.cn/20200529185656161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br></p><p>event.srcElement 事件的目标。因为事件处理的作用域是根据指定它的方式来确定的，所以不能认为 this 会始终等于事件的目标，使用event.srcEvent 比较好。（跨浏览器时候要注意）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="built_in">window</span>.event.srcElement === <span class="keyword">this</span>); <span class="comment">//true</span></span><br><span class="line">};</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    alert(event.srcElement === <span class="keyword">this</span>); <span class="comment">//false</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p>returnValue 属性相当于DOM中的preventDefault()方法，它们的作用都是取消给定事件的默认行为。只要将returnValue设置为false,就可以阻止默认行为。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"myLink"</span>);</span><br><span class="line">link.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><br><p>cancelBubble 属性与DOM中的stopPropagation()方法作用相同，都是用来停止事件冒泡的。由于IE不支持事件捕获，所以只能取消事件冒泡;但stopPropagatioin ()可以同时取消事件捕获和冒泡。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="string">"Clicked"</span>);</span><br><span class="line">    <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">};</span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="string">"Body clicked"</span>);         <span class="comment">// 无法响应事件</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><br><br><h1 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h1><ul><li>UI ( User Interface,用户界面)事件，当用户与页面上的元素交互时触发;</li><li>焦点事件，当元素获得或失去焦点时触发;</li><li>鼠标事件，当用户通过鼠标在页面上执行操作时触发;</li><li>滚轮事件，当使用鼠标滚轮(或类似设备)时触发;</li><li>文本事件，当在文档中输人文本时触发;</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发;</li><li>合成事件，当为IME ( Input Method Editor,输入法编辑器)输入字符时触发;</li><li>变动( mutation)事件，当底层DOM结构发生变化时触发。</li></ul><h2 id="1、UI事件"><a href="#1、UI事件" class="headerlink" title="1、UI事件"></a>1、UI事件</h2><p>UI事件指的是那些不一定与用户操作有关的事件。</p><ul><li>load:当页面完全加载后在window上面触发，当所有框架都加载完毕时在框架集上面触发，当图像加载载完毕时在&lt;img&gt;元素上面触发，或者当嵌人的内容加载完毕时在&lt;object&gt;元素上面触发。</li><li>unload:当页面完全卸载后在window.上面触发，当所有框架都卸载后在框架集上面触发，或者当嵌人的内容卸载完毕后在&lt;object&gt;元素上面触发。</li><li>abort:在用户停止下载过程时，如果嵌人的内容没有加载完，则在&lt;object&gt;元素上面触发。</li><li>error :当发生JavaScript错误时在window上面触发，当无法加载图像时在&lt; img&gt;元素上面触发，当无法加载嵌人内容时在&lt;object&gt;元素上面触发，或者当有一或多个框架无法加载时在框架集上面触发。</li><li>select:当用户选择文本框(&lt;input&gt;或&lt;texterea&gt; )中的一或多个字符时触发。</li><li>resize:当窗口或框架的大小变化时在window或框架上面触发。</li><li>scroll:当用户滚动带滚动条的元素中的内容时，在该元素上面触发。&lt;body&gt;元素中包含所加 载页面的滚动条。</li></ul><br><p><strong>1、load事件</strong></p><p>JavaScript中最常用的一个事件就是 load。 当页面完全加载后(包括所有图像、JavaScript 文件、CSS文件等外部资源),就会触发window.上面的load事件。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(load,<span class="string">"window"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">    alert(<span class="string">"aqingya"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>图像也可以触发load事件。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.getElementById(<span class="string">"myImage"</span>);</span><br><span class="line">EventUtil.addHandler(image, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(EventUtil.getTarget(event).src);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>在创建新的&lt;img&gt;元素时，可以为其指定一一个事件处理程序，以便图像加载完毕后给出提示。此时，最重要的是要在指定src属性之前先指定事件，举个栗子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> image = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">    EventUtil.addHandler(image, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">        event = EventUtil.getEvent(event);</span><br><span class="line">        alert(EventUtil.getTarget(event).src);</span><br><span class="line">    });</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">    image.src = <span class="string">"smile.gif"</span>;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，首先为window指定了onload 事件处理程序。<strong>原因在于，我们是想向DOM中添加一个新元素，所以必须确定页面已经加载完毕如果 在页面加载前操作document. body 会导致错误</strong>。然后，创建了一个新的图像元素，并设置了其onload事件处理程序。最后又将这个图像添加到页面中，还设置了它的src属性。<strong>这里有一点需要格外注意:新图像元素不一定要从添加到文档后才开始下载，只要设置了src 属性就会开始下载。</strong></p><p><strong>2、unload 事件</strong></p><p>与 load 事件对应的是 unload 事件，这个事件在文档被完全卸载后触发。只要用户从一个页面切换到另一个页面，就会发生unload事件。而利用这个事件最多的情况是<strong>清除引用，以避免内存泄漏</strong>。</p><p><span style="color:red"><strong>注意：unload事件是在一切都被卸载之后才触发，那么在页面加载后存在的那些对象，此时就不一定存在了。此时，操作DOM节点或者元素的样式就会导致错误。</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"unload"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    alert(<span class="string">"Unloaded"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p><strong>3、resize 事件</strong></p><p>当浏览器窗口调整到一个新高度时，就会触发 resize 事件，这个事件是在window上触发的。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    alert(<span class="string">"Resized"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><strong>resize事件会频繁的触发，所以尽量保持事件中代码的简单。</strong></p><br><p><strong>4、scroll 事件</strong></p><p>虽然 scroll 事件是在 window 对象上发生的，但它实际表示的则是页面中相应元素的变化。在混杂模式下，可以通过&lt;body&gt;元素的scrollLeft和scrol1Top来监控到这- -变化;而在标准模式下，除Safari之外的所有浏览器都会通过&lt;html&gt;元素来反映这一变化.</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"scroll"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) {</span><br><span class="line">        alert(<span class="built_in">document</span>.documentElement.scrollTop);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        alert(<span class="built_in">document</span>.body.scrollTop);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><strong>scroll事件在文档滚动期间会频繁的被触发，所以尽量保持事件中代码的简单。</strong></p><br><br><h2 id="2、-焦点事件"><a href="#2、-焦点事件" class="headerlink" title="2、 焦点事件"></a>2、 焦点事件</h2><p>焦点事件会在页面元素获得或失去焦点时触发。利用这些事件并与document . hasFocus()方法及document . activeEl ement属性配合，有以下6个焦点事件。</p><ul><li>blur:在元素失去焦点时触发。这个事件不会冒泡;所有浏览器都支持它。</li><li>DOMFoCusIn:在元素获得焦点时触发。这个事件与HTML事件focus等价，但它冒泡。只有Opera支持这个事件。DOM3级事件废弃了DOMFocusIn,选择了focusin。</li><li>DOMFocusOut :在元素失去焦点时触发。这个事件是HTML事件blur的通用版本。只有Opera支持这个事件。DOM3级事件废弃了DOMFocusOut,选择了focusout。</li><li>focus :在元素获得焦点时触发。这个事件不会冒泡;所有浏览器都支持它。</li><li>focusin:在元素获得焦点时触发。这个事件与HTML事件focus等价，但它冒泡。支持这个事件的浏览器有IE5.5+、Safari 5.1+、Opera 11.5+和Chrome。</li><li>focusout:在元素失去焦点时触发。这个事件是HTML事件blur的通用版本。支持这个事件的浏览器有IE5.5+、Safari 5.1+、Opera 11.5+和Chrome。</li></ul><br><br><h2 id="3、鼠标与滚轮事件"><a href="#3、鼠标与滚轮事件" class="headerlink" title="3、鼠标与滚轮事件"></a>3、鼠标与滚轮事件</h2><p>DOM 3 级事件中定义了11个鼠标事件</p><ul><li>click:在用户单击主鼠标按钮(一般是左边的按钮) 或者按下回车键时触发。 这一点对确保易访问性很重要，意味着onclick事件处理程序既可以通过键盘也可以通过鼠标执行。</li><li>dblclick:在用户双击主鼠标按钮(一般是左边的按钮) 时触发。从技术上说，这个事 件并不是DOM2级事件规范中规定的，但鉴于它得到了广泛支持，所以DOM3级事件将其纳人了标准。</li><li>mousedown:在用户按下了任意鼠标按钮时触发。不能通过键盘触发这个事件。</li><li>mouseenter :在鼠标光标从元素外部首次移动到元素范围之内时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。DOM2 级事件并没有定义这个事件，但DOM3级事件将它纳入了规范。</li><li>mouseleave:在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。DOM2 级事件并没有定义这个事件，但DOM3级事件将它纳人了规范。</li><li>mousemove:当鼠标指针在元素内部移动时重复地触发。不能通过键盘触发这个事件。</li><li>mouseout:在鼠标指针位于一个元素上方，然后用户将其移人另一个元素时触发。又移人的另一个元素可能位于前一个元素的外部，也可能是这个元素的子元素。不能通过键盘触发这个事件。</li><li>mouseover :在鼠标指针位于一个元素外部，然后用户将其首次移入另一个元素边界之内时触发。不能通过键盘触发这个事件。</li><li>mouseup:在用户释放鼠标按钮时触发。不能通过键盘触发这个事件。</li><li>mouseover：事件会在鼠标指针移动到指定的对象上时发生。</li><li>mouseout ：事件会在鼠标指针移出指定的对象时发生。</li></ul><p><strong>页面上的所有元素都支持鼠标事件。除了mouseenter和mouseleave,所有鼠标事件都会冒泡，也可以被取消，而取消鼠标事件将会影响浏览器的默认行为。取消鼠标事件的默认行为还会影响其他事件，因为鼠标事件与其他事件是密不可分的关系。</strong><br><br></p><p><strong>1、客户区坐标的位置</strong></p><p>clientX和clientY属性 他们的值是保存事件触发时<span><strong>鼠标指针在视口中的水平和垂直坐标。</strong><span></span></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(<span class="string">"Client coordinates: "</span> + event.clientX + <span class="string">","</span> + event.clientY);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529214004256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br></p><p><strong>2、页面坐标位置</strong></p><p>pageX和pageY属性，他们的值是保存事件触发时<span><strong>鼠标指针在页面中的水平和垂直坐标。</strong><span></span></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(<span class="string">"Page coordinates: "</span> + event.pageX + <span class="string">","</span> + event.pageY);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在IE 8之前不支持事件对象上的页面坐标。不会可以使用客户区坐标和滚动信息计算出来。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> pageX = event.pageX,</span><br><span class="line">        pageY = event.pageY;</span><br><span class="line">    <span class="keyword">if</span> (pageX === <span class="literal">undefined</span>) {</span><br><span class="line">        pageX = event.clientX + (<span class="built_in">document</span>.body.scrollLeft ||</span><br><span class="line">            <span class="built_in">document</span>.documentElement.scrollLeft);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (pageY === <span class="literal">undefined</span>) {</span><br><span class="line">        pageY = event.clientY + (<span class="built_in">document</span>.body.scrollTop ||</span><br><span class="line">            <span class="built_in">document</span>.documentElement.scrollTop);</span><br><span class="line">    }</span><br><span class="line">    alert(<span class="string">"Page coordinates: "</span> + pageX + <span class="string">","</span> + pageY);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p><strong>3、屏幕坐标位置</strong></p><p>screenX和screenY属性，他们的值是保存事件触发时<span><strong>鼠标指针在整个屏幕中的水平和垂直坐标。</strong><span><br><img src="https://img-blog.csdnimg.cn/20200529215022954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></span></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(<span class="string">"Screen coordinates: "</span> + event.screenX + <span class="string">","</span> + event.screenY);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p><strong>4、修改键</strong></p><p>DOM为此规定了4个属性，表示这些修改键的状态: shiftkey、 ctrlKey、altKey和metaKey（IE8之前不支持）分别对应shift键、ctrl键、alt键、window键。这些属性中包含的都是布尔值，如果相应的键被按下了，则值为true,否则值为false。 例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> keys = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">if</span> (event.shiftKey) {</span><br><span class="line">        keys.push(<span class="string">"shift"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (event.ctrlKey) {</span><br><span class="line">        keys.push(<span class="string">"ctrl"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (event.altKey) {</span><br><span class="line">        keys.push(<span class="string">"alt"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (event.metaKey) {</span><br><span class="line">        keys.push(<span class="string">"meta"</span>);</span><br><span class="line">    }</span><br><span class="line">    alert(<span class="string">"Keys: "</span> + keys.join(<span class="string">","</span>));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><strong>5、detail</strong></p><p>“DOM2级事件”规范在event对象中还提供了detail属性，对于鼠标事件来说，detail 中包含了一一个数值，表示在给定位置上发生了多少次单击。在同-一个元素上相继地发生一次mousedown 和次mouseup 事件算作一次单击。detail属性从1开始计数，每次单击发生后都会递增。如果鼠标在mousedown和mouseup之间移动了位置，则detail会被重置为0。</p><p><strong>6、鼠标滚轮事件</strong><br>mousewheel 事件，当用户通过鼠标滚轮与页面交互、在垂直方向上滚动页面时（无论向上还是向下），就会触发 mousewheel 事件。</p><p>将mousewheel事件处理程序指定给页面中的任何元素或document对象，即可处理鼠标滚轮的交互操作。例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"mousewheel"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(event.wheelDelta); <span class="comment">//</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>Firefox支持一-个名为DOMMouseScroll的类似事件，也是在鼠标滚轮滚动时触发。滚轮的信息则保存在detail属性中，当向前滚动鼠标滚轮时，这个属性的值是-3的倍数，当向后滚动鼠标滚轮时，这个属性的值是3的倍数。</p><br><h2 id="4、键盘与文本事件"><a href="#4、键盘与文本事件" class="headerlink" title="4、键盘与文本事件"></a>4、键盘与文本事件</h2><ul><li>keydown:当用户按下键盘上的任意键时触发，而且如果按住不放的话，会重复触发此事件。</li><li>keypress:当用户按下键盘上的字符键时触发，而且如果按住不放的话，会重复触发此事件。按下Esc键也会触发这个事件。</li><li>keyup:当用户释放键盘上的键时触发。</li></ul><p>键盘事件的事件对象中也有shiftKey、 ctrlKey、 altKey 和 metaKey属性（IE不支持）。</p><br><p><strong>1、键码</strong></p><p>keyCode属性：对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码。对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。<span style="color:red">注意：数字键和小键盘的数字键 字符码不一样。</span></p><p>key属性：key属性是为了取代keyCode而新增的，它的值是-一个字符串。在按下某个字符键时，key的值就是相应的文本字符(如“k”或“M””);在按下非字符键时，key 的值是相应键的名(如“ Shift”)。而char属性在按下字符键时的行为与key相同，但在按下非字符键时值为null。<br><br></p><p><strong>2、textInput 事件</strong></p><p>textInput：根据规范，当用户在可编辑区域中输人字符时，就会触发这个事件。这个用于替代keypress的textInput事件的行为稍有不同。<strong>区别之一就是任何可以获得焦点的元素都可以触发keypress事件，但只有可编辑区域才能触发textInput事件。区别之二是textInput事件只会在用户按下能够输人实际字符的键时才会被触发,而keypress事件则在按下那些能够影响文本显示的键时也会触发(例如退格键)。</strong></p><p>由于textInput事件主要考虑的是字符，因此它的event对象中还包含一个data属性，这个属性的值就是用户输人的字符(而非字符编码)。换句话说，用户在没有按上档键的情况下按下了S键，data的值就是”s”，而如果在按住上档键时按下该键，data的值就是”S”。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textbox = <span class="built_in">document</span>.getElementById(<span class="string">"myText"</span>);</span><br><span class="line">EventUtil.addHandler(textbox, <span class="string">"textInput"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(event.data);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p>event对象上还有一个属性，叫inputMethod, 表示把文本输人到文本框中的方式。</p><ul><li>0，表示浏览器不确定是怎么输入的。</li><li>1，表示是使用键盘输人的</li><li>2，表示文本是粘贴进来的。</li><li>3，表示文本是拖放进来的。</li><li>4，表示文本是使用IME输入的。</li><li>5，表示文本是通过在表单中选择某一项输入的。</li><li>6，表示文本是通过手写输入的（比如使用手写笔）。</li><li>7，表示文本是通过语音输入的。</li><li>8，表示文本是通过几种方法组合输入的。</li><li>9，表示文本是通过脚本输入的。</li></ul><br><br><h2 id="5、复合事件"><a href="#5、复合事件" class="headerlink" title="5、复合事件"></a>5、复合事件</h2><ul><li>compositionstart: 在IME的文本复合系统打开时触发，表示要开始输人了。</li><li>compositionupdate:在向输人字段中插入新字符时触发。</li><li>compositionend:在IME的文本复合系统关闭时触发，表示返回正常键盘输人状态。</li></ul><p>复合事件与文本事件在很多方面都很相似。在触发复合事件时，目标是接收文本的输人字段。但它比文本事件的事件对象多一个属性 data,其中包含以下几个值中的一个:</p><ul><li>如果在compositionstart事件发生时访问，包含正在编辑的文本(例如，已经选中的需要马上替换的文本);</li><li>如果在composi tionupdate事件发生时访问，包含正插人的新字符;</li><li>如果在compositionend事件发生时访问，包含此次输人会话中插人的所有字符。</li></ul><br><br><h2 id="6、变动事件"><a href="#6、变动事件" class="headerlink" title="6、变动事件"></a>6、变动事件</h2><ul><li>DOM2级的变动( mutation )事件能在DOM中的某一部分 发生变化时给出提示。变动事件是为 XMLHTML DOM设计的，并不特定于某种语言。DOM2级定义了如下变动事件。</li><li>DOMSubtreeModified:在DOM结构中发生任何变化时触发。这个事件在其他任何事件触发后都会触发。</li><li>DOMNodeInserted:在一个节 点作为子节点被插人到另-一 个节点中时触发。</li><li>DOMNodeRemoved:在节点从其父节点中被移除时触发。</li><li>DOMNodeInsertedIntoDocument:在一个节点被直接插入文档或通过子树间接插人文档之后触发。这个事件在DOMNodeInserted之后触发。</li><li>DOMNodeRemovedF romDocument:在-个节 点被直接从文档中移除或通过 子树间接从文档中移除之前触发。这个事件在DOMNodeRemoved之后触发。</li><li>DOMAttrModi fied:在特性被修改之后触发。</li><li>DOMCharacterDataModified:在文本节点的值发生变化时触发。</li></ul><p>检测浏览器是否支持变动事件：(IE8及以前不支持)</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSupported = <span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MutationEvents"</span>, <span class="string">"2.0"</span>);</span><br></pre></td></tr></tbody></table></figure><br><br><h2 id="7、HTM-5事件"><a href="#7、HTM-5事件" class="headerlink" title="7、HTM/5事件"></a>7、HTM/5事件</h2><p><strong>1、contextmenu 事件</strong> <a href="https://www.runoob.com/tags/att-global-contextmenu.html" target="_blank" rel="noopener">contextmenu 事件链接</a></p><p>单击鼠标右键可以调出上下文菜单。</p><br><p><strong>2、beforeunload 事件</strong> <a href="https://www.runoob.com/jsref/event-onbeforeunload.html" target="_blank" rel="noopener">beforeunload 事件链接</a></p><p>在页面卸载前触发</p><br><p><strong>3、DOMContentLoaded 事件</strong></p><p>DOMContentLoaded事件则在形成完整的DOM树之后就会触发，不理会图像、JavaScript 文件、CSS文件或其他资源是否已经下载完毕。与load 事件不同，window的load事件会在页面中的一切都加载完毕时触发。加载的外部资源过多而颇费周折。</p><p>要处理DOMContentLoaded事件，可以为document或window添加相应的事件处理程序(尽管这个事件会冒泡到window,但它的目标实际上是document )。 例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    alert(<span class="string">"Content loaded"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br><p>4、 readystatechange 事件</p><p>E为DOM文档中的某些部分提供了readystatechange事件。这个事件的目的是提供与文档或元素的加载状态有关的信息，但这个事件的行为有时候也很难预料。支持readystatechange事件的每个对象都有一个readyStage属性，可能包含下列5个值中的一个。</p><ul><li>uninitialized(为初始化)：对象正在加载数据；</li><li>loading(正在加载)：对象正在加载数据；</li><li>loaded(加载完毕)：对象加载数据我能撑；</li><li>interactive(交互)：可以操作对象了，但还没有完全加载；</li><li>complete(完成)：对象已经加载完毕。</li></ul><p>这些状态看起来很直观，但并非所有对象都会经理readyState的这几个阶段。换句话说，如果某个阶段不适合某个对象，则该对象完全可能跳过该阶段；并没有规定哪个阶段适用于哪个对象。显然，这意味着readystatechange事件经常会少于4次，而readyState属性的值也不总是连续的。</p><p>对于document而言，值为“interactive”的readyStage也会在与DOMContentLoaded大致相同的时刻触发readystatechange事件。此时，DOM树已经加载完毕，可以安全地操作它了，因此就会进入交互（interactive）阶段。但与此同时，图像及其它外部文件不一定可用。下面来看一段处理readystatechange事件的代码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = {</span><br><span class="line">    addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">            element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"interactive"</span>) {</span><br><span class="line">        alert(<span class="string">"Content loaded"</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这个事件的event对象不会提供任何信息，也没有目标对象。</p><p>在与load事件一起使用时，无法预测两个事件触发的先后顺序。在包含较多或较大的外部资源的页面中，会在load事件触发之前先进入交互阶段；而在包含较少或较小的外部页面资源中，则很难说readystatechange事件会发生在load事件前面。</p><p>让问题变得复杂的是，交互阶段可能会遭遇也可能会晚于完成阶段出现，无法确保顺序。在包含较多外部资源的页面中，交互阶段更有可能遭遇完成阶段出现；而在页面中包含较少外部资源的页面中，交互阶段更有可能早于完成阶段出现；而在页面中包含较少外部资源的情况下，完成阶段先于交互阶段出现的可能性更大。因此，为了尽可能抢到先机，有必要同时检测交互很完成阶段，如下面的例子所示：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventUtil.addHandler(<span class="built_in">document</span>, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"interactive"</span> || <span class="built_in">document</span>.readyState == <span class="string">"complete"</span>);</span><br><span class="line">    alert(<span class="string">"Contet loaded"</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>对于上面的代码来说，当readystatechange事件触发时，会检测document。这样编写代码可以达到与使用DOMContentLoaded十分相似的效果。</p><p>虽然使用readystatechange可以十分近地模拟DOMContentLoaded事件，但它们本质上还是不同的。在不同的页面中，load事件与readystatechange事件并不能保证以相同的顺序触发。Opera还支持这个事件的一个精简版，但由于其行为与IE中事件的不一致性，我们建议不要在Opera中使用该事件。</p><p>另外，script和link元素也会触发readystatechange事件，可以用来确定外部的JavaScript和CSS文件是否已经加载完成。与其它浏览器中一样，除非把动态创建的元素添加到页面中，否则浏览器不会开始下载资源。基于元素触发的readystatechange事件也存在同样的问题，即readyState属性无论等于“loaded”还是“complete”都可以表示资源已经可用。有时候，readyState会停在“loaded”阶段而永远不会“完成”；有时候，又会跳过“loaded”阶段而直接“完成”。于是还需要像对待document一样采用相同的编码方式。例如，下面展示了一段加载外部JavaScript文件的代码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = {</span><br><span class="line">    addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">            element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) {</span><br><span class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) {</span><br><span class="line">            element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">    },</span><br><span class="line">    getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">//创建一个新的&lt;script&gt;元素</span></span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    EventUtil.addHandler(script, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        event = EventUtil.getEvent(event);</span><br><span class="line">        <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">        <span class="keyword">if</span> (target.readyState == <span class="string">"loaded"</span> || target.readyState == <span class="string">"complete"</span>) {</span><br><span class="line">            EventUtil.removeHandler(target, <span class="string">"readystatechange"</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">            alert(<span class="string">"Script Loaded"</span>);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    script.src = <span class="string">"example.js"</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>个例子为新创建的&lt;script&gt;节点指定了一个事件处理程序。事件的目标是该节点本身，因此当触发reaystatechange事件时，要检测目标的readyState属性是不是等于“loaded”或“complete”。如果进入了其中任何一个阶段，则移除事件处理程序（以防止被执行了两次），并显示一个警告框。与此同时，就可以执行已经加载完毕的外部文件的函数了。</p><p>同样的编码方式也使用于通过<link>元素加载CSS文件的情况，如下面的例子所示</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = {</span><br><span class="line">    addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) {</span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) {</span><br><span class="line">            element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) {</span><br><span class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) {</span><br><span class="line">            element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">    },</span><br><span class="line">    getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">//创建一个新的&lt;link&gt;元素</span></span><br><span class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">    link.type = <span class="string">"text/css"</span>;</span><br><span class="line">    link.rel = <span class="string">"stylesheet"</span>;</span><br><span class="line"></span><br><span class="line">    EventUtil.addHandler(link, <span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        event = EventUtil.getEvent(event);</span><br><span class="line">        <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">        <span class="keyword">if</span> (target.readyState == <span class="string">"loaded"</span> || target.readyState == <span class="string">"complete"</span>) {</span><br><span class="line">            EventUtil.removeHandler(target, <span class="string">"readystatechange"</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">            alert(<span class="string">"CSS Loaded"</span>);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    link.href = <span class="string">"example.css"</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(link);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>同样，最重要的是要一并检测readyState的两个状态，并在调用了一次事件处理程序后就将其移除。</p><p>Opera也支持&lt;script&gt;元素上的readysatechange事件，但不支持&lt;link&gt;元素上的readystatechange事件。</p><br><p><strong>5、onpageshow 事件</strong> <a href="https://www.runoob.com/jsref/event-onpageshow.html" target="_blank" rel="noopener">onpageshow 事件链接</a></p><p>onpageshow 事件在用户浏览网页时触发。</p><br><p><strong>6、onpagehide 事件</strong><a href="https://www.runoob.com/jsref/event-onpagehide.html" target="_blank" rel="noopener">onpagehide 事件链接</a></p><p>onpagehide 事件在用户离开网页时触发。</p><br><p><strong>7、onhashchange 事件</strong> <a href="https://www.runoob.com/jsref/event-onhashchange.html" target="_blank" rel="noopener">onhashchange 事件链接</a></p><p>onhashchange 事件在当前 URL 的锚部分(以 ‘#’ 号为开始) 发生改变时触发 。</p><p><strong>必须要把hashchange事件处理程序添加给window对象</strong>，然后URL参数列表只要变化就会调用它。此时的event对象应该额外包含两个属性:oldURL和newURL。这两个属性分别保存着参数列表变化前后的完整URL。</p><h2 id="8、设备事件"><a href="#8、设备事件" class="headerlink" title="8、设备事件"></a>8、设备事件</h2><p><a href="https://www.runoob.com/jquerymobile/jquerymobile-ref-events.html" target="_blank" rel="noopener">Mobile 事件参考手册</a></p><br><br><h1 id="5、内存和性能"><a href="#5、内存和性能" class="headerlink" title="5、内存和性能"></a>5、内存和性能</h1><h2 id="1、事件委派（事件委托）"><a href="#1、事件委派（事件委托）" class="headerlink" title="1、事件委派（事件委托）"></a>1、事件委派（事件委托）</h2><p>对“事件处理程序过多”问题的解决方案就是事件委托。事件委托利用了事件冒泡，只指定一一个事<br>件处理程序，就可以管理某一类型的所有事件。 例如，click 事件会- -直冒泡到document层次。也就<br>是说，我们可以为整个页面指定一个onclick事件处理程序，而不必给每个可单击的元素分别添加事<br>件处理程序。以下面的HTML代码为例。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"myLinks"</span>&gt;</span><br><span class="line">&lt;li id=<span class="string">"goSomewhere"</span>&gt;Go somewhere&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li id="doSomething"&gt;Do something&lt;/</span>li&gt;</span><br><span class="line">&lt;li id=<span class="string">"sayHi"</span>&gt;Say hi&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></tbody></table></figure><p>添加点击事件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> item1 = <span class="built_in">document</span>.getElementById(<span class="string">"goSomewhere"</span>);</span><br><span class="line"><span class="keyword">var</span> item2 = <span class="built_in">document</span>.getElementById(<span class="string">"doSomething"</span>);</span><br><span class="line"><span class="keyword">var</span> item3 = <span class="built_in">document</span>.getElementById(<span class="string">"sayHi"</span>);</span><br><span class="line">EventUtil.addHandler(item1, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    location.href = <span class="string">"http://www.wrox.com"</span>;</span><br><span class="line">});</span><br><span class="line">EventUtil.addHandler(item2, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">"I changed the document's title"</span>;</span><br><span class="line">});</span><br><span class="line">EventUtil.addHandler(item3, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    alert(<span class="string">"hi"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>如果在一一个复杂的Web应用程序中，对所有可单击的元素都采用这种方式，那么结果就会有数不清的代码用于添加事件处理程序。此时，可以利用事件委托技术解决这个问题。使用事件委托，只需在DOM树中尽量最高的层次上添加一一个事件处理程序，如下面的例子所示。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myLinks"</span>);</span><br><span class="line">EventUtil.addHandler(list, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    <span class="keyword">var</span> target = EventUtil.getTarget(event);</span><br><span class="line">    <span class="keyword">switch</span> (target.id) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"doSomething"</span>:</span><br><span class="line">            <span class="built_in">document</span>.title = <span class="string">"I changed the document's title"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"goSomewhere"</span>:</span><br><span class="line">            location.href = <span class="string">"http://www.wrox.com"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"sayHi"</span>:</span><br><span class="line">            alert(<span class="string">"hi"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><span style="color:red"><strong>事件委托的优点：</strong></span></p><ul><li>document对象很快就可以访问，而且可以在页面生命周期的任何时点上为它添加事件处理程序(无需等待DOMContentLoaded或load事件)。 换句话说，只要可单击的元素呈现在页面上，就可以立即具备适当的功能。</li><li>在页面中设置事件处理程序所需的时间更少。只添加一一个事件处理程序所需的DOM引用更少，所花的时间也更少。</li><li>整个页面占用的内存空间更少，能够提升整体性能。</li></ul><p><span style="color:red">最适合进行事件委托的事件有： click 、mousedown 、 mouseup 、 keydown 、keyup 、keypress 。</span></p><br><br><h2 id="2、移除事件处理程序"><a href="#2、移除事件处理程序" class="headerlink" title="2、移除事件处理程序"></a>2、移除事件处理程序</h2><p>每当将事件处理程序指定给元素时，运行中的浏览器代码与支持页面交互的JavaScript代码之间就会建立一一个连接。这种连接越多，页面执行起来就越慢。如前所述，可以采用事件委托技术，限制建立的连接数量。另外，在不需要的时候移除事件处理程序，也是解决这个问题的一种方案。内存中留有那些过时不用的“空事件处理程序”( dangling event handler ),也是造成Web应用程序内存与性能问题的主要原因。</p><p>在两种情况下，可能会造成上述问题。第一种情况就是从文档中移除带有事件处理程序的元素时。这可能是通过纯粹的DOM操作，例如使用removeChild ()和replaceChild()方法， 但更多地是发生在使用innerHTML替换页面中某一 部分的时候。如果带有事件处理程序的元素被innerHTML删除了，那么原来添加到元素中的事件处理程序极有可能无法被当作垃圾回收。来看下面的例子。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"myDiv"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"Click Me"</span> id=<span class="string">"myBtn"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var btn = document.getElementById("</span>myBtn<span class="string">");</span></span><br><span class="line"><span class="string">    btn.onclick = function() {</span></span><br><span class="line"><span class="string">        //?执行某些操作</span></span><br><span class="line"><span class="string">        document.getElementById("</span>myDiv<span class="string">").innerHTML = "</span>Processing...<span class="string">"; //??了！</span></span><br><span class="line"><span class="string">    };</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里，有一个按钮被包含在&lt;div&gt;元素中。为避免双击，单击这个按钮时就将按钮移除并替换成一条消息;这是网站设计中非常流行的一种做法。但问题在于，当按钮被从页面中移除时，它还带着一个事件处理程序呢。在&lt;div&gt; 元素上设置innerHTML可以把按钮移走，但事件处理程序仍然与按钮保持着引用关系。有的浏览器(尤其是IE)在这种情况下不会作出恰当地处理，它们很有可能会将对元素和对事件处理程序的引用都保存在内存中。如果你知道某个元素即将被移除，那么最好手工移除事件处理程序，如下面的例子所示。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"myDiv"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"Click Me"</span> id=<span class="string">"myBtn"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var btn = document.getElementById("</span>myBtn<span class="string">");</span></span><br><span class="line"><span class="string">    btn.onclick = function() {</span></span><br><span class="line"><span class="string">        //?执行某些操作</span></span><br><span class="line"><span class="string">        btn.onclick = null; // ????????</span></span><br><span class="line"><span class="string">        document.getElementById("</span>myDiv<span class="string">").innerHTML = "</span>Processing...<span class="string">";</span></span><br><span class="line"><span class="string">    };</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>一般来说，最好的做法是在页面卸载之前，先通过onunload事件处理程序移除所有事件处理程序。<br>在此，事件委托技术再次表现出它的优势一需要跟踪的事件处理程序越少，移除它们就越容易。对这种类似撤销的操作，我们可以把它想象成:只要是通过onload事件处理程序添加的东西，最后都要通过onunload事件处理程序将它们移除。</p><br>总结性能优化： <span style="color:red"><ul><li>限制一个页面中事件处理程序的数量，数量太多会导致占用大量内存，而且也会让用户感觉页面反应不够灵敏。</li><li>建立在事件冒泡机制之上的事件委托技术，可以有效地减少事件处理程序的数量。</li><li>建议在浏览器卸载页面之前移除页面中的所有事件处理程序。</li></ul></span><hr><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM</title>
      <link href="/articl/a3b68a60.html"/>
      <url>/articl/a3b68a60.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1fe6a85282e044ac881734d023f75e0c.jpg" alt=""></p><a id="more"></a><h2 id="DOM简介："><a href="#DOM简介：" class="headerlink" title="DOM简介："></a>DOM简介：</h2><p><strong>通过 HTML DOM，JavaScript 能够访问和改变 HTML 文档的所有元素。</strong></p><hr><!--more--><p><strong>HTML DOM（文档对象模型）</strong><br>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p><strong>HTML DOM</strong> 模型被结构化为<strong>对象树</strong>：</p><p><strong>对象的 HTML DOM 树</strong><br><img src="https://img-blog.csdnimg.cn/20200522094310145.gif" alt="在这里插入图片描述"></p><p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p><ul><li>JavaScript 能改变页面中的所有 HTML 元素</li><li>JavaScript 能改变页面中的所有 HTML 属性</li><li>JavaScript 能改变页面中的所有 CSS 样式</li><li>JavaScript 能删除已有的 HTML 元素和属性</li><li>JavaScript 能添加新的 HTML 元素和属性</li><li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li><li>JavaScript 能在页面中创建新的 HTML 事件</li></ul><hr><p><strong>什么是 DOM？</strong><br>DOM 是一项 W3C (World Wide Web Consortium) 标准。</p><p>DOM 定义了访问文档的标准：</p><p>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。”<br>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li>Core DOM - 所有文档类型的标准模型</li><li>XML DOM - XML 文档的标准模型</li><li>HTML DOM - HTML 文档的标准模型</li></ul><hr><p><strong>什么是 HTML DOM？</strong><br>HTML DOM 是 HTML 的标准对象模型和编程接口。它定义了：</p><p>作为对象的 HTML 元素</p><ul><li>所有 HTML 元素的属性</li><li>访问所有 HTML 元素的方法</li><li>所有 HTML 元素的事件</li></ul><p><span style="color:red">换言之：HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。</span></p><hr><p>HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。<br>Document对象是我们可以从脚本中对HTML页面中的所有元素进行访问</p><p>节点：Node——构成HTML文档最基本的单元。<br>常用节点分为4类：</p><ul><li>文档节点：整个HTML文档</li><li>元素节点：HTML文档中的HTML标签</li><li>属性节点：元素的属性</li><li>文本节点：HTML标签中的文本内容</li></ul><p><img src="https://img-blog.csdnimg.cn/20200522141013494.png" alt="在这里插入图片描述"><br>文档的加载：<br>    浏览器在加载一个页面的时候，是按照自上向下的顺序加载的<br>    读取到一行就运行一行，如果将script标签写到页面的上边，<br>    在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载<br>    会导致无法获取到DOM对象</p><p>Onload事件在整个 页面加载完成之后才触发<br>    为window绑定一个onload事件<br>    该事件对应的响应函数，将会在页面加载完成之后执行，<br>    这样可以确保我们的代码执行时所有的DOM对象已经加载完成。</p><hr><p><strong>获取元素节点</strong></p><p>通过document对象调用</p><p>1.getElementById()<br>  通过id属性来获取一个元素节点的对象</p><p>2.getElementsByTagName()<br>  可以根据标签名来获取一组元素节点对象<br>  这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象<br>  即使查询到的元素只有一个，也会封装到数组中返回。</p><p>3.getElementsByName()<br>  通过name属性来获取一组元素节点对象。<br>  这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象。<br>  即使查询到的元素只有一个，也会封装到数组中返回。</p><p><strong>InnerHTML 通过这个属性可以获取到元素内部的html代码<br>  Bj.innerHTML<br>  对于自结束标签没有意义，会返回为空。<br>  如果需要读取元素节点属性，<br>  直接使用 元素.属性名<br>  例子： 元素.id 元素.name 元素.value<br>  <span style="color:red">注意：class属性不能采用这种方式，（主要用于表单中）<br>  读取class属性需要使用 元素. className</span><br>innerText<br>  该属性可以获取元素内部中的文本内容。<br>  他和innerHTML类似，不同的是他会自动将html标签去除。</strong></p><hr><p><strong>获取元素节点的子节点</strong><br>通过具体的元素节点调用<br>1.getElementByTagName()<br>  是一个方法，方法返回当前的指定标签名后代节点</p><p>2.childNodes<br>  是一个属性 表示当前节点的所有子节点<br>  childNodes属性会获取包括文本节点在内的所有节点<br>  <strong>根据DOM标签与标签间的空白也会当成文本节点</strong><br><span style="color:red">注意：IE8及以下的浏览器中不会将空白文本当成子节点，<br>children属性可以获取当前元素的所有子元素。标签与标签间的空白不会当成文本节点。</span></p><p>3.firstChild<br>   属性，表示当前节点的第一个子节点。<br>  可以获取当前元素的第一个子节点（<strong>包含空白文本节点和注释</strong>）。</p><p>  <strong><span style="color:red">firstElementChild:指向第一个元素；（不包括文本节点和注释）</span></strong></p><p>4.lastChile<br>   属性，表示当前节点的最后一个子节点<br>  可以获取当前元素的最后一个子节点（<strong>包含空白文本节点和注释</strong>）。</p><p>  <strong><span style="color:red">lastElementChild:指向最后一个子元素；（不包括文本节点和注释）</span></strong></p><br><p>遍历元素<br>  <strong><span style="color:red">childElementCount:返回子元素的个数（不包括文本节点和注释）</span></strong></p><hr><p><strong>获取父节点和兄弟节点</strong></p><p>通过具体的节点调用<br>1.parentNode<br>   属性，表示当前节点的父节点</p><p>2.previousSibling<br>   属性，表示当前节点的前一个兄弟节点</p><p>  <span style="color:red">previousSibling 属性返回元素节点之前的兄弟节点（包括文本节点、注释节点）；</span><br>  <span style="color:red">previousElementSibling 属性只返回元素节点之前的兄弟元素节点（不包括文本节点、注释节点）；</span></p><p>3.nextSibling<br>   属性，表示当前节点的后一个兄弟节点</p><p>  <span style="color:red">nextSibling 属性返回元素节点之后的兄弟节点（包括文本节点、注释节点）；</span><br>  <span style="color:red">nextElementSibling 属性只返回元素节点之后的兄弟元素节点（不包括文本节点、注释节点）。</span></p><hr><p>1、在document中有一个属性body，它保存的是body的引用<br>  Var body = document.body;</p><p>2、Doucument.doucumentElement保存的是html根标签<br>  Var html = document.documentElenmet;</p><p>3、Document.all 代表页面中的所有元素<br>  var all = document.all;<br>  （var all = document.getElementsByTagName(“*”)）效果一样。<br>  它返回一个数组</p><p>4、根据元素的class属性查询一组元素节点对象<br>  GetElementsByClassNmae() 可以根据class属性值获取一组元素节点对象（类数组）<br>  但是该方法 不支持IE8及以下浏览器。</p><p>5、documen.querySelector()<br>   需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<br>   虽然IE8中没有getElementByTagName() 但是可以使用querySelector，他可以支持IE8.<br>   使用该方法总会返回<strong>一个唯一的一个元素</strong>，如果满足条件的元素有多个，那么它会返回第一个。</p><p>6、documen.querySelectorAll()<br>  该方法和querySelector()用法类似，不同的是他会将符合条件的元素<strong>封装到一个数组中</strong>。<br>  即使符合条件的元素只有一个，他也会返回数组。</p><hr><p><strong>DOM增删改查：</strong></p><p>1.Document.createElement()<br>  可以用于创建一个元素节点对象，<br>  它需要一个标签名作为参数，将会根据标签名创建元素节点对象<br>  并将创建好的对象作为返回值返回。<br>  它可以个innerHTML结合使用。<br><img src="https://img-blog.csdnimg.cn/20200522143355678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.document.createTextNode()<br>  可以用来创建一个文本节点对象<br>  需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回。</p><p>3.appendChild()<br>  向一个父节点中添加一个新的子节点<br>  用法：父节点.appendChild(子节点)；</p><p>4.insertBefore()<br>  可以在指定的子节点前插入新的子节点<br>  语法：<br>  父节点.insertBefore(新节点，旧节点);</p><p>5.replaceChild()<br>  可以使用指定的子节点替换已有的子节点<br>  语法：<br>  父节点.replaceChile(新节点，旧节点)</p><p>6.removeChild()<br>  可以删除一个子节点<br>  语法：父节点.removeChild(子节点)；<br>  但是：<br>  <span style="color:red">常用：子节点.parentNode.removeChild(子节点)</span></p><h2 id="Document-对象"><a href="#Document-对象" class="headerlink" title="Document 对象"></a>Document 对象</h2><p>每个载入浏览器的 HTML 文档都会成为 Document 对象。</p><p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p><p>提示：Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问。</p><hr><p><strong>一、文档子节点</strong></p><p>1、在document中有一个属性body，它保存的是body的引用（<strong>比通过childNodes列表访问的更快，更直接）</strong><br>  Var body = document.body;</p><p>2、Doucument.doucumentElement保存的是html根标签<br>  Var html = document.documentElenmet;</p><p>3、Document.all 代表页面中的所有元素<br>  var all = document.all;<br>  （var all = document.getElementsByTagName(“*”)）效果一样。<br>  它返回一个数组</p><p>4、根据元素的class属性查询一组元素节点对象<br>  GetElementsByClassNmae() 可以根据class属性值获取一组元素节点对象（类数组）<br>  但是该方法 不支持IE8及以下浏览器。</p><p>5、documen.querySelector()<br>   需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<br>   虽然IE8中没有getElementByTagName() 但是可以使用querySelector，他可以支持IE8.<br>   使用该方法总会返回<strong>一个唯一的一个元素</strong>，如果满足条件的元素有多个，那么它会返回第一个。</p><p>6、documen.querySelectorAll()<br>  该方法和querySelector()用法类似，不同的是他会将符合条件的元素<strong>封装到一个数组中</strong>。<br>  即使符合条件的元素只有一个，他也会返回数组。</p><hr><p><strong>二、文档信息</strong></p><p>1.document.title<br>  可以取得当前界面的标题，也可以修改当前界面的标题并反映给浏览器的标题栏中。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.title)  <span class="comment">//查看标题</span></span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">"aqing"</span>     <span class="comment">//修改标题</span></span><br></pre></td></tr></tbody></table></figure><p>2.属性 URL、domain、referrer 都和网页请求有关。<br>  URL属性包含完整的URL<br>  domain属性中只包含了页面的域名。<br>  referrer属性中保存着连接到当前页面的哪个页面的URL，在没有来源页面的情况下，referrer属性中可能会包含空字符串</p><hr><p><strong>三、查找元素</strong></p><p>1.getElementById()<br>  通过id属性来获取一个元素节点的对象</p><p>2.getElementsByTagName()<br>  可以根据标签名来获取一组元素节点对象<br>  这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象<br>  即使查询到的元素只有一个，也会封装到数组中返回。</p><p>3.getElementsByName()<br>  通过name属性来获取一组元素节点对象。<br>  这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象。<br>  即使查询到的元素只有一个，也会封装到数组中返回。</p><hr><p><strong>四、特殊集合</strong></p><p>1、document.anchors<br>  包含文档中所有带name特性的 a 元素</p><p>2、document.forms<br>  包含文档中所有的</p><form>元素，与documen.getElementByTagName（“form”）结果相同。<p></p><p>3、document.images<br>  包含文档中所有的<img>元素，与documen.getElementByTagName（“img”）结果相同。</p><p>4、document.links<br>  包含文档中所带href特性的 a 元素</p><p><strong>集合中的项也会随着当前文档内容的更新而更新</strong></p><hr><p><strong>五、DOM一致性检测</strong></p><p>hasFeature()<br>  这个方法有两个参数：要检测的DOM功能的名称及版本号。如果浏览器支持给定的名称和版本的功能，则该方法会返回 true 。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"XML"</span>, <span class="string">"1.0"</span>));</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>六、文档写入</strong></p><p><strong>1、write()方法</strong><br>定义和用法<br>  write() 方法可向文档写入 HTML 表达式或 JavaScript 代码。</p><p>可列出多个参数(exp1,exp2,exp3,…) ，它们将按顺序被追加到文档中。</p><p>语法<br>  document.write(exp1,exp2,exp3,….)</p><p>说明<br>  虽然根据 DOM 标准，该方法只接受单个字符串作为参数。不过根据经验，write() 可接受任何多个参数。</p><p>我们通常按照两种的方式使用 write() 方法：一是在使用该方在文档中输出 HTML，另一种是在调用该方法的的窗口之外的窗口、框架中产生新文档。在第二种情况中，请务必使用 close() 方法来关闭文档。</p><p><strong>2、writeln() 方法</strong></p><p>定义和用法<br>  writeln() 方法与 write() 方法作用相同，外加可在每个表达式后写一个换行符。</p><p>3、open()方法</p><p>定义和用法<br>  open() 方法可打开一个新文档，并擦除当前文档的内容。</p><p>语法<br>  document.open(mimetype,replace)<br>|参数| 描述 |<br>|–|–|<br>| mimetype |可选。规定正在写的文档的类型。默认值是 “text/html”。 |<br>|replace|可选。当此参数设置后，可引起新文档从父文档继承历史条目。|</p><p>说明<br>  该方法将擦除当前 HTML 文档的内容，开始一个新的文档，新文档用 write() 方法或 writeln() 方法编写。</p><p>提示和注释<br>  重要事项：调用 open() 方法打开一个新文档并且用 write() 方法设置文档内容后，必须记住用 close 方法关闭文档，并迫使其内容显示出来。</p><p>注释：属于被覆盖的文档的一部分的脚本或事件句柄不能调用该方法，因为脚本或事件句柄自身也会被覆盖。</p><p>4、close() 方法</p><p>定义和用法<br>  close() 方法可关闭一个由 document.open 方法打开的输出流，并显示选定的数据。</p><p>语法<br>  document.close()<br>说明<br>  该方法将关闭 open() 方法打开的文档流，并强制地显示出所有缓存的输出内容。如果您使用 write() 方法动态地输出一个文档，必须记住当你这么做的时候要调用 close() 方法，以确保所有文档内容都能显示。</p><p>  一旦调用了 close()，就不应该再次调用 write()，因为这会隐式地调用 open() 来擦除当前文档并开始一个新的文档。</p><h2 id="动态脚本"><a href="#动态脚本" class="headerlink" title="动态脚本"></a>动态脚本</h2><p>创建动态脚本有两种方式。</p><p>1、引入外部文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"aqing.js"</span> &gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、直接插入JavaScript代码</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    script.src = url;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">loadScript(<span class="string">"aqing.js"</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a><strong>动态样式</strong></h2><p>能够把CSS样式包含到HTML页面中的元素有两个。其中，&lt;link&gt;元素用于包含来自外部的文件，而&lt;style&gt;元素用于指定嵌入样式。与动态脚本类似。所谓动态样式是指在页面刚加载时不存在的样式；动态样式是页面加载完成后动态添加到页面中的。</p><p>1、插入外部文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"style.css"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>2、直接插入JavaScript代码</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyleString</span>(<span class="params">css</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>)</span><br><span class="line">    style.type = <span class="string">"text/css"</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">    } <span class="keyword">catch</span> (ex) {</span><br><span class="line">        style.styleSheet.cssText = css;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(style);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">loadStyleString(<span class="string">"body{background-color:red}"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="选择符API"><a href="#选择符API" class="headerlink" title="选择符API"></a>选择符API</h2><p>1、querySlector()方法</p><p>querySlector()方法接受一个CSS选择器，<span style="color:red">返回与该模式匹配的第一个元素</span>。通过Document类型调用querySlector()方法时，会在文档元素的范围内查找匹配的元素。而通过Element类型调用querySlector()方法时，只会在该元素的范围内查找匹配的元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得body元素</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得ID为“mydiv”的元素</span></span><br><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.querySelector(<span class="string">"#mydiv"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得类为 "selected"的第一个元素</span></span><br><span class="line"><span class="keyword">var</span> selected = <span class="built_in">document</span>.querySelector(<span class="string">".selected"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得button元素的第一个图像</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.body.querySelector(<span class="string">"img.button"</span>);</span><br></pre></td></tr></tbody></table></figure><p>2、querySelectorAll()方法</p><p>querySelectAll()方法接受的参数与querySelect()方法一样都是一个CSS选择符，但querySelectAll()方法返回的是一个NodeList的实例，不仅仅是一个元素，而是所有匹配到的都会在NodeList中。只要querySelectAll()方法的CSS选择符有效，该方法都会返回一个NodeList对象，不管匹配到多少元素，就算是空的，也会返回一个Nodelist。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得所有类为 "selected"的元素</span></span><br><span class="line"><span class="keyword">var</span> selected = <span class="built_in">document</span>.querySelectorAll(<span class="string">".selected"</span>);</span><br></pre></td></tr></tbody></table></figure><p>3、matchesSelector()方法</p><p>Element类型新增的一个方法matchesSelector()，接受一个CSS选择符为参数，如果调用元素与该选择符匹配，返回true；否则返回false。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.body.matchesSelctor(<span class="string">"body.page1"</span>)){</span><br><span class="line">     <span class="comment">//true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="与类相关的扩充"><a href="#与类相关的扩充" class="headerlink" title="与类相关的扩充"></a>与类相关的扩充</h2><p><strong>classList属性</strong><br>为所有元素添加classList属性。它自己有一个表示自己包含多少元素的属性，取得每个元素可以使用item()方法，也可以使用方括号语法。此外还有如下方法：</p><p><strong>add(value)：将给定的字符串值添加到列表中，如果值已经存在，就不添加了。<br>contains(value)：表示列表中是否存在给定的值，如果存在就返回true，否则返回flase。<br>remove(value)：从列表中删除给定的字符串。<br>toggle(value)：如果列表中已经存在给定的值，则删除它；如果列表中没有给定的值，则添加它。</strong></p><p><strong>支持chrome和Firfox 3.6和IE10以上。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向div元素中添加div类</span></span><br><span class="line">div.classList.add(<span class="string">"div"</span>)</span><br><span class="line">    <span class="comment">//检查div类</span></span><br><span class="line">div.classList.contains(<span class="string">"div"</span>)</span><br><span class="line">    <span class="comment">//删除div类</span></span><br><span class="line">div.classList.remove(<span class="string">"div"</span>)</span><br><span class="line">    <span class="comment">// 切换div类</span></span><br><span class="line">div.classList.toggle(<span class="string">"div"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代类名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; div.classList.length; i++) {</span><br><span class="line">    <span class="built_in">console</span>.log(div.classList[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h2><p>document.activeElement属性，这个属性始终会引用DOM中当前获得焦点的元素。元素获取焦点的方式有页面加载，用户输入（通常是按Tab键）,和代码汇总调用focus()方法。</p><p>默认情况下，文档刚刚加载完成时，document.activeElement中保存的是document.body元素的引用。文档加载期间，document.activeElement的值为null。</p><p>另外就是新增了document.hasFocus()方法，这个方法用于确定文档是否获得了焦点。</p><hr><h2 id="HTMLDocument的变化"><a href="#HTMLDocument的变化" class="headerlink" title="HTMLDocument的变化"></a>HTMLDocument的变化</h2><p><strong>1、readyState属性</strong></p><p>它有两个可能的值</p><ul><li><p>loading，正在加载文档</p></li><li><p>complete，已经加载完文档</p><p>使用document.readyState的最恰当方式，就是通过它来实现一个指示文档已经加载完成的指示器。用法如下：</p></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.readyState ==<span class="string">"complete"</span>){</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>2、兼容模式</strong></p><p>这个属性是为了告诉开发人员浏览器采用的哪种渲染模式。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) {</span><br><span class="line">    alert(<span class="string">"Standards mode"</span>); <span class="comment">//标准模式</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    alert(<span class="string">"Quirks mode"</span>) <span class="comment">//混杂模式</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>3、head属性</strong><br>引用文档的&lt;head&gt;元素，可以结合使用这个属性和另一种后备方法。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//如果有head属性就使用，否则仍然使用document.getElementsByTatName("head")[0];</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="字符集属性"><a href="#字符集属性" class="headerlink" title="字符集属性"></a>字符集属性</h2><p>charset属性表示文档中实际使用的字符集，也可以直接设置。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.charset</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h2><p><strong>1、innerHTML属性</strong></p><p>在读模式下，innerHTML属性返回与调用元素的所有子节点（包括元素，注释和文本节点）和对应的HTML标记。在写模式下，innerHTML会根据指定的值创建新的DOM树，然后用这个DOM树完全替换调用元素原先的所有子节点。</p><p>不是所有的元素都支持innerHTML属性。不支持innerHTML的元素有：&lt;col&gt;、&lt;colgroup&gt;、&lt;frameset&gt;、&lt;head&gt;、&lt;html&gt;、&lt;style&gt;、&lt;tbody&gt;、&lt;thead&gt;、&lt;tfoot&gt;、&lt;tr&gt;，在IE8及更早的版本中，&lt;title&gt;元素也没有innerHTML属性。</p><p><strong>2、outerHTML属性</strong></p><p>在读模式下，outerHTML属性返回调用它的元素所有子节点的HTML标签，在写模式下，outerHTML根据指定的值创建新的DOM树，然后用这个DOM树完全替换调用元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div.outerHTML = <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>;</span><br><span class="line"><span class="comment">//上面的效果和下面的一样</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">p.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>));</span><br><span class="line">div.parentNode.replaceChild(p, div);</span><br></pre></td></tr></tbody></table></figure><p><strong>3、insertAdjacentHTMl()方法</strong></p><p>它接收两个参数：<strong>插入的位置</strong>和<strong>要插入的HTML文本</strong>。第一个参数必须是下列值之一：</p><p>“beforebegin”，在当前元素之下插入一个紧邻的同辈元素；<br>“afterbegin”，在当前元素之下插入一个新的子元素或在第一个子元素之前在插入新的子元素；<br>“beforeend”，在当前元素之下插入一个新的子元素或在最后一个子元素之后在插入新的子元素；<br>“afterend”，在当前元素之后插入一个紧邻的同辈元素；</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.insertAdjacentHTML(<span class="string">"beforeBegin"</span>, <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>)</span><br><span class="line">div.insertAdjacentHTML(<span class="string">"afterEnd"</span>, <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>)</span><br><span class="line">div.insertAdjacentHTML(<span class="string">"afterBegin"</span>, <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>)</span><br><span class="line">div.insertAdjacentHTML(<span class="string">"beforeEnd"</span>, <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>4、innerText属性</strong></p><p>通过innerText 属性可以操作元素中包含所有文本内容，包括子文档树中的文本。通过innerText 读取值时，他会按照由浅入深的顺序，将子文档树中的所有文本拼接起来。再通过innerText 写入值时，结果会删除所有子节点，插入包含响应文本值的文本节点。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.innerText = div.innerText;</span><br></pre></td></tr></tbody></table></figure><p>执行这行代码后，就用原来的文本内容替换了容器中的所有内容（包含子节点，因而也就去掉了HTML标签）。</p><p><strong>5、outerText 属性</strong></p><p>除了作用范围变大到了包含调用它的节点之外，outerText与innerHTML 基本只上没有多大的区别。<br>在读取文本值时，结果完全一样。但在写模式下，outerText 就完全不同了：outerText 不只是替换调用它的元素子节点，而是会替换整个元素（包括子节点）。<br><strong>由于这个属性会导致调用它的元素不存在，因此并不常用。</strong></p><hr><h2 id="scrollIntoView-方法"><a href="#scrollIntoView-方法" class="headerlink" title="scrollIntoView()方法"></a>scrollIntoView()方法</h2><p>滚动页面，可以在所有HTML元素上调用，通过滚动浏览器窗口或某个容器元素，调用元素就可以出现在视口中。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.scrollIntoView();</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="contains-方法"><a href="#contains-方法" class="headerlink" title="contains()方法"></a>contains()方法</h2><p>调用contains()方法的应该是祖先节点，也就是搜索开始的节点，这个方法接收一个参数，即要检测的后代节点。如果被检测到的节点是后代节点，该方法返回true，否则返回false</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement.contains(<span class="built_in">document</span>.body));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>测试&lt;body&gt;元素是不是&lt;html&gt;元素的后代。</p><hr><h2 id="访问元素的样式"><a href="#访问元素的样式" class="headerlink" title="访问元素的样式"></a>访问元素的样式</h2><p><strong>通过JS修改元素的样式：</strong><br>  语法：元素.style.样式名=样式值 (样式值必须是字符串样式)<br>  注意：如果css的样式汇总含有 - ，<br>  这种名称在JS中是不合法的,比如background-color<br>  需要将这种样式的命名修改为驼峰命名法去掉 - ，<br>  然后将 - 后的字母大写。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box.style.backgroundColor = <span class="string">"yellow"</span></span><br><span class="line">box.style.width = <span class="string">"100px"</span></span><br></pre></td></tr></tbody></table></figure><p>我们通过style属性设置的样式都是内联样式，<br>而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示。</p><p>但是如果在样式中写了！Important，则此时样式会有最高的优先级，<br>即使通过js也不能覆盖该样式，此时将会导致js修改样式失效<br>所以尽量不要为样式添加！Important</p><p>通过JS读取内联的样式：<br>  语法：元素.style.样式名<br>  通过style属性设置和读取的都是内联样式，如果没有内联样式则会返回空置。</p><p><strong>通过style来设置元素的样式，记得要加上 单位 px</strong></p><hr><p><strong>style对象的属性和方法</strong></p><p>style对象定义了一些对象和方法，这些属性和方法在提供元素的style特性值的同时，也可以修改样式。</p><ul><li>cssText：能够访问到style特性中的CSS代码。</li><li>length：应用给元素的CSS属性的数量。</li><li>getPropertyValue(propertyName)：返回给定属性的字符串值</li><li>item(index)：返回给定位置的CSS属性的名称。</li><li>removeProperty(propertyName)：从样式表中删除给定的属性。</li><li>setProperty(propertyName,value,priority)：将给定的属性设置为相应的值，并加上优先权标志（“important”或者一个空的字符串）。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写cssText</span></span><br><span class="line">         text.style.cssText = <span class="string">"width:200px;height:100px"</span>;</span><br><span class="line">         <span class="built_in">console</span>.log(text.style.cssText)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取元素样式的属性名和属性值</span></span><br><span class="line"><span class="keyword">var</span> pop, value, i, len;</span><br><span class="line">         <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; text.style.length; i++) {</span><br><span class="line">             pop = text.style[i];  <span class="comment">//或者pop = text.style.item(i);</span></span><br><span class="line">             value = text.style.getPropertyValue(pop);</span><br><span class="line">             <span class="built_in">console</span>.log(pop + <span class="string">":"</span> + value);</span><br><span class="line">         }</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>获取计算的样式</strong></p><p><a href="https://aqingya.cn/2020/04/23/ten/" target="_blank" rel="noopener">js中如何获取元素的当前显示样式</a></p><p><span><strong>无论在哪个浏览器中，所有计算的样式都是只读的</strong>。</span></p><hr><h2 id="元素的大小"><a href="#元素的大小" class="headerlink" title="元素的大小"></a>元素的大小</h2><p><strong>1、偏移量</strong></p><p>offsetWidth<br>offsetHeight</p><ul><li>获取元素的整个的宽度和高度，包括内容区和内边距和边框。</li></ul><p>offsetParent</p><ul><li>可以用来获取当前元素的定位父元素<ul><li>获取到里当前元素最近的开启了定位的祖先元素。</li><li>如果所有的祖先元素都没有开启定位则会返回boby</li></ul></li></ul><p>offsetLeft</p><ul><li>当前元素相对于其定位父元素的水平偏移量。（外边框的距离也算）</li></ul><p>offsetTop</p><ul><li>当前元素相对于其定位父元素的垂直偏移量。（外边框的距离也算）</li></ul><p><span>这些属性都是不带px的，返回的都是一个数字，可以直接进行计算</span></p><p><img src="https://img-blog.csdnimg.cn/20200525141807596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>要想知道某个元素在页面上的偏移量，将这个元素的offsetLeft和offsetTop与其offsetParent的相同属性相加，如此循环直至根元素，就可以得到一个基本准确的值。以下两个函数就可以用于分别取得元素的左和上偏移量。</p><p><strong>获取元素的左偏移量</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素的左偏移量</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>) </span>{</span><br><span class="line">             <span class="keyword">var</span> actualLeft = element.offsetLeft;</span><br><span class="line">             <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">while</span> (current !== <span class="literal">null</span>) {</span><br><span class="line">                 actualLeft += current.offsetLeft;</span><br><span class="line">                 current = current.offsetParent;</span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> actualLeft;</span><br><span class="line">         }</span><br><span class="line"></span><br><span class="line">         <span class="built_in">console</span>.log(getElementLeft(text));</span><br></pre></td></tr></tbody></table></figure><p>获取元素的上偏移量</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素的上偏移量</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>) </span>{</span><br><span class="line">             <span class="keyword">var</span> actualTop = element.offsetTop;</span><br><span class="line">             <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">while</span> (current !== <span class="literal">null</span>) {</span><br><span class="line">                 actualTop += current.offsetTop;</span><br><span class="line">                 current = current.offsetParent;</span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> actualTop;</span><br><span class="line">         }</span><br><span class="line"></span><br><span class="line">         <span class="built_in">console</span>.log(getElementTop(text));</span><br></pre></td></tr></tbody></table></figure><p><strong>所有的偏移量都是只读的。而且每次访问都需要重新计算一次。因此应该尽量避免重复访问这些属性；如果需要重复使用其中某些属性的值，可以将他们设置为局部变量，以提高性能。</strong></p><hr><h2 id="2、客户区大小"><a href="#2、客户区大小" class="headerlink" title="2、客户区大小"></a>2、客户区大小</h2><p>元素的客户区大小(clientdimension),指的是元素内容及其内边距所占据的空间大小。有关客户区大小的属性有两个: clientWidth和clientHeight。其中，clientWidth属性是元素内容区宽度加上左右内边距宽度; clientHeight属性是元素内容区高度加上，上下内边距高度。图12-2 形象地说明了这些属性表示的大小。</p><p>clientWidth<br>clientHeight</p><ul><li>这两个属性可以获取元素的可见高度</li><li>这些属性都是不带px的，返回的都是一个数字，可以直接进行计算</li><li>获取元素的高度和宽度，包括内容区和内边距区</li><li>这些属性都是只读的，不能修改</li><li><strong>与偏移量相似，客户区大小也是只读的，也是每次访问都要重新计算。</strong><br><img src="https://img-blog.csdnimg.cn/20200525143306829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><hr><h2 id="3、滚动大小"><a href="#3、滚动大小" class="headerlink" title="3、滚动大小"></a>3、滚动大小</h2><p>最后要介绍的是滚动大小( scroll dimension ),指的是包含滚动内容的元素的大小。有些元素(例如</p>元素)，即使没有执行任何代码也能自动地添加滚动条;但另外-些元素，则需要通过CSS的overflow属性进行设置才能滚动。以下是4个与滚动大小相关的属性。<p></p><ul><li>scrollHeight:在没有滚动条的情况下，元素内容的总高度。</li><li>scrollwidth:在没有滚动条的情况下，元素内容的总宽度。</li><li>scrollLeft:被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置。</li><li>scrollTop:被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200525144831243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)在确定文档的总高度时(包括基于视口的最小高度时),必须取得scrollwidth/clientwidth和scrollHeight/clientHeight中的最大值，才能保证在跨浏览器的环境下得到精确的结果。下面就是这样一个例子。</p><p><strong>注意，对于运行在混杂模式下的IE,则需要用document . body代替document . documentElement。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docHeight = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollHeight, <span class="built_in">document</span>.documentElement.clientHeight);</span><br><span class="line"><span class="keyword">var</span> docWidth = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollWidth, <span class="built_in">document</span>.documentElement.clientWidth);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(docHeight);</span><br><span class="line"><span class="built_in">console</span>.log(docWidth);</span><br></pre></td></tr></tbody></table></figure><br>通过scrollLeft和scrollTop属性既可以确定元素当前滚动的状态，也可以设置元素的滚动位置。在元素尚未被滚动时，这两个属性的值都等于0。如果元素被垂直滚动了，那么scrollTop的值会大于0，且表示元素上方不可见内容的像素高度。如果元素被水平滚动了，那么scrollLeft的值会大于0，且表示元素左侧不可见内容的像素宽度。这两个属性都是可以设置的，因此将元素的scrollLeft和scrollTop设置为0,就可以重置元素的滚动位置。下面这个函数会检测元素是否位于顶部，如果不是就将其回滚到顶部。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToTop</span>(<span class="params">element</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (element.scrollTop != <span class="number">0</span>) {</span><br><span class="line">        element.scrollTop = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p><span><strong>关于滚动了一个练习</strong></span>。<a href="https://aqingya.cn/2020/04/23/eleven/" target="_blank" rel="noopener">连接地址</a></p><hr><h2 id="4、确定元素的大小"><a href="#4、确定元素的大小" class="headerlink" title="4、确定元素的大小"></a>4、确定元素的大小</h2><p>getBoundingClientRect() ，这个方法会返回一个矩形对象,包含4个属性：left、top、right、bottom。<br><strong>这些属性给出了元素在页面中相对于视口的位置</strong>。但是每个浏览器实现都不一样。</p><p>写一个跨浏览器的函数：</p><p>注意：</p><ol><li>由于使用了arguments.callee 所以这个方法不能再严格模式下使用。</li><li>但在某些情况下，这个函数返回的值可能会有所不同，例如使用表格布局或使用滚动元素情况下。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBoundingClientRect</span>(<span class="params">element</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">    <span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line">    <span class="keyword">if</span> (element.getBoundingClientRect) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.offset != <span class="string">"number"</span>) {</span><br><span class="line">            <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">            temp.style.cssText = <span class="string">"position:absolute;left:0;top:0;"</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(temp);</span><br><span class="line">            <span class="built_in">arguments</span>.callee.offset = -temp.getBoundingClientRect().top - scrollTop;</span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(temp);</span><br><span class="line">            temp = <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> rect = element.getBoundingClientRect();</span><br><span class="line">        <span class="keyword">var</span> offset = <span class="built_in">arguments</span>.callee.offset;</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            left: rect.left + offset,</span><br><span class="line">            right: rect.right + offset,</span><br><span class="line">            top: rect.top + offset,</span><br><span class="line">            bottom: rect.bottom + offset</span><br><span class="line">        };</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">var</span> actualLeft = getElementLeft(element);</span><br><span class="line">        <span class="keyword">var</span> actualTop = getElementTop(element);</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            left: actualLeft - scrollLeft,</span><br><span class="line">            right: actualLeft + element.offsetWidth - scrollLeft,</span><br><span class="line">            top: actualTop - scrollTop,</span><br><span class="line">            bottom: actualTop + element.offsetHeight - scrollTop</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>“DOM2级遍历和范围”模块定义了两个用于辅助完成顺序遍历DOM结构的类型: <strong>NodeIterator和TreeWalker</strong>。这两个类型能够基于给定的起点对DOM结构执行<strong>深度优先</strong>( depth-first )的遍历操作。</p><p>DOM遍历是深度优先的DOM结构遍历，也就是说，移动的方向至少有两个(取决于使用的遍历类型)。遍历以给定节点为根，不可能向上超出DOM树的根节点。<br><img src="https://img-blog.csdnimg.cn/20200525175136185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>任何节点都可以作为遍历的根节点。如果假设</p>元素为根节点，那么遍历的第一步 就是访问&lt;p&gt;元素，然后再访问同为&lt;body&gt;元素后代的两个文本节点。不过，这次遍历永远不会到达&lt;html&gt;&lt;head&gt;元素，也不会到达不属于&lt;body&gt;元素子树的任何节点。而以document为根节点的遍历则可以访问文档中的全部节点。<p></p><p>下图展示了对以document为根节点的DOM树进行深度优先遍历的先后顺序。<strong>NodeIterator 和TreeWalker都以这种方式遍历。</strong><br><img src="https://img-blog.csdnimg.cn/20200525175559137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1、NodeIterator"><a href="#1、NodeIterator" class="headerlink" title="1、NodeIterator"></a>1、NodeIterator</h2><p>使用document.createNodeIterator() 方法来创建它的实例。这个方法接收下列4个参数：</p><blockquote><ul><li>root：想要作为搜索起点的数中的节点。</li><li>whatToShow：表示想要访问哪些节点的数字代码。</li><li>filter：是一个NodeFilter对象，或者一个表示应该接受还是某种特定节点的函数。(类似节点过滤器的函数)</li><li>entityReferenceExpansion：布尔值表示是否扩展实体引用。这个参数在HTML页面中没有用，因为其中的实体引用不能扩展。</li></ul></blockquote><p>whatToShow参数是一个位掩码， 通过应用- -或多 个过滤器( filter )来确定要访问哪些节点。这个参数的值以常量形式在NodeFilter类型中定义，如下所示。</p><blockquote><ul><li>NodeFilter . SHOW_ ALL:显示所有类型的节点。</li><li>NodeFilter . SHOW_ ELEMENT:显示元素节点。</li><li>NodeFilter . SHOW_ ATTRIBUTE:显示特性节点。由于DOM结构原因，实际上不能使用这个值。</li><li>NodeFilter . SHOW_ TEXT:显示文本节点。</li><li>NodeFilter . SHOW_ CDATA_ SECTION: 显示CDATA节点。对HTML页面没有用。</li><li>NodeFilter . SHOw_ ENTITY_ REFERENCE:显示实体引用节点。对HTML页面没有用。</li><li>NodeFil ter . SHOW_ ENTITYE:显示实体节点。对HTML页面没有用。</li><li>NodeFil ter . SHOW_ PROCESSING_ INSTRUCTION:显示处理指令节点。对HTML页面没有用。</li><li>NodeFilter . SHOW_ COMMENT:显示注释节点。</li><li>NodeFilter . SHOW_ DOCUMENT: 显示文档节点。</li><li>NodeFilter . SHOW_ DOCUMENT_TYPE: 显示文档类型节点。</li><li>NodeFil ter . SHOW_ DOCUMENT_ FRAGMENT:显示文档片段节点。对HTML页面没有用。</li><li>NodeFilter . SHOW_ NOTATION:显示符号节点。对HTML页面没有用。</li></ul></blockquote><p>除了NodeFilter.SHOW_ ALL之外，可以使用按位或操作符来组合多个选项，</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> whatToShow = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT;</span><br></pre></td></tr></tbody></table></figure><br>可以通过createNodeIterator()方法的filter参数来指定自定义的NodeFilter对象，或者指定一个功能类似节点过滤器( node filter )的函数。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span>?</span><br><span class="line">    NodeFilter.FILTER_ACCEPT:</span><br><span class="line">    NodeFilter.FILTER_SKIP;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>NodeIterator类型的两个主要方法是<strong>nextNode ()</strong>和p<strong>reviousNode()</strong>。顾名思义，在深度优先的DOM子树遍历中，nextNode ()方法用于向前前进一步，而previousNode ()用于向后后退一步。<strong>在刚刚创建的NodeIterator对象中，有一个内部指针指向根节点，因此第一次调用nextNode()会返回根节点。当遍历到DOM子树的最后一个节点时，nextNode() 返回null</strong>。previousNode()方法的工作机制类似。当遍历到DOM子树的最后一个节点，且previousNode()返回根节点之后，再次调用它就会返回null。</p><hr><p>小例子：遍历指定节点中 &lt;li&gt;的元素，</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylist = <span class="built_in">document</span>.getElementById(<span class="string">"mylist"</span>);  <span class="comment">//获取我们遍历起点的节点。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span>?</span><br><span class="line">    NodeFilter.FILTER_ACCEPT:</span><br><span class="line">    NodeFilter.FILTER_SKIP;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = <span class="built_in">document</span>.createNodeIterator(mylist, NodeFilter.SHOW_ELEMENT, filter, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> node = iterator.nextNode;</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(node.tagName)  <span class="comment">//输出标签名</span></span><br><span class="line">    node = iterator.nextNode();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h2 id="TrreWalker"><a href="#TrreWalker" class="headerlink" title="TrreWalker"></a>TrreWalker</h2><p>TreeWalker是NodeIterator的一个更高级 的版本。除了包括 nextNode ()和previousNode ()在内的相同的功能之外，这个类型还提供了下列用于在不同方向上遍历DOM结构的方法。</p><blockquote><ul><li>parentNode():遍历到当前节点的父节点;</li><li>firstChild():遍历到当前节点的第一个子节点;</li><li>lastChild():遍历到当前节点的最后一个子节点;</li><li>nextSibling():遍历到当前节点的下一个同辈节点;</li><li>previoussibling():遍历到当前节点的上一个同辈节点。</li></ul></blockquote><p>创建Treewalker对象要使用document. createTreewalker()方法，这个方法接受的4个参数与document . createNodeIterator ()方法相同:作为遍历起点的根节点、要显示的节点类型、过滤器和一个表示是否扩展实体引用的布尔值。由于这两个创建方法很相似，所以很容易用Treewalker 来代替NodeIterator,如下面的例子所示。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylist = <span class="built_in">document</span>.getElementById(<span class="string">"mylist"</span>);</span><br><span class="line">            <span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span> ?</span><br><span class="line">                    NodeFilter.FILTER_ACCEPT :</span><br><span class="line">                    NodeFilter.FILTER_SKIP;</span><br><span class="line">                <span class="comment">// NodeFilter.FILTER_REJECT;</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">var</span> walker = <span class="built_in">document</span>.createTreeWalker(mylist, NodeFilter.SHOW_ELEMENT, filter, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">var</span> node = walker.nextNode;</span><br><span class="line">            <span class="keyword">while</span> (node !== <span class="literal">null</span>) {</span><br><span class="line">                <span class="built_in">console</span>.log(node.tagName)  <span class="comment">//输出标签名</span></span><br><span class="line">                node = walker.nextNode();</span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure><p>在这里，filter可以返回的值有所不同。除了NodeFilter .FILTER_ACCEPT 和NodeFilter.FILTER_ SKIP之外，还可以使用NodeFilter . FILTER_REJECT。 在使用NodeIterator对象时，NodeFilter . FILTER_ SKIP与NodeFilter . FILTER_ REJECT 的作用相同:跳过指定的节点。但在使用TreeWalker对象时，NodeFilter . FILTER <em>SKIP会跳过相应节点继续前进到子树中的下一个节点，而NodeFilter . FILTER</em> REJECT 则会跳过相应节点及该节点的整个子树。例如，将前面例子中的NodeFilter . FILTER_ SKIP 修改成NodeFilter. FILTER_ <em>REJECT, 结果就是不会访问任何节点。这是因为第一个返回的节点是&lt;div&gt;,它的标签名不是”li”，于是就会返回NodeFilter . FILTER</em> REJECT ，这意味着遍历会跳过整个子树。在这个例子中，&lt;div&gt;元素是遍历的根节点，于是结果就会停止遍历。</p><p>当然，Treewalker真正强大的地方在于能够在DOM结构中沿任何方向移动。使用Treewalker遍历DOM树，即使不定义过滤器，也可以取得所有&lt;li&gt;元素，如下面的代码所示。<span style="color:red"><strong>（前提我们知道它的结构树）</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylist = <span class="built_in">document</span>.getElementById(<span class="string">"mylist"</span>);</span><br><span class="line"><span class="keyword">var</span> walker = <span class="built_in">document</span>.createTreeWalker(mylist, NodeFilter.SHOW_ELEMENT, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">walker.firstChild(); <span class="comment">//转到 &lt;p&gt;</span></span><br><span class="line">walker.nextSibling() <span class="comment">//转到&lt;ul&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node = walker.firstChild();</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(node.tagName)    </span><br><span class="line">    node = walker.nextSibling();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>它的HTML结构</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"mylist"</span>&gt;</span><br><span class="line">    &lt;p&gt;sdfsdf&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li id="li"&gt;阿&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;清&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;呀&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></tbody></table></figure><hr><p>TreeWalker类型 还有一个属性，名叫 currentNode ，表示任何遍历方法在上一次遍历中返回的节点。通过设置这个属性也可以修改遍历继续进行起点，如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = walker.nextNode;</span><br><span class="line"><span class="built_in">console</span>.log(node === walker.currentNode); <span class="comment">//ture</span></span><br><span class="line">walker.currentNode = <span class="built_in">document</span>.body; <span class="comment">//修改起点</span></span><br></pre></td></tr></tbody></table></figure><br><p>下面的例子会返回body中所有的 li 节点</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylist = <span class="built_in">document</span>.getElementById(<span class="string">"mylist"</span>);</span><br><span class="line"><span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span> ?</span><br><span class="line">        NodeFilter.FILTER_ACCEPT :</span><br><span class="line">        NodeFilter.FILTER_SKIP;</span><br><span class="line">    <span class="comment">// NodeFilter.FILTER_REJECT;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> walker = <span class="built_in">document</span>.createTreeWalker(mylist, NodeFilter.SHOW_ELEMENT, filter, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> node = walker.nextNode;</span><br><span class="line"><span class="built_in">console</span>.log(node === walker.currentNode); <span class="comment">//ture</span></span><br><span class="line">walker.currentNode = <span class="built_in">document</span>.body; <span class="comment">//修改起点</span></span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(node.tagName)</span><br><span class="line">    node = walker.nextNode();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br></form><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM2 - 遍历</title>
      <link href="/articl/48f952ac.html"/>
      <url>/articl/48f952ac.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/d0604444e1eb42ae8d55b1ceae1995ec.jpg" alt=""></p><a id="more"></a><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>“DOM2级遍历和范围”模块定义了两个用于辅助完成顺序遍历DOM结构的类型: <strong>NodeIterator和TreeWalker</strong>。这两个类型能够基于给定的起点对DOM结构执行<strong>深度优先</strong>( depth-first )的遍历操作。</p><p>DOM遍历是深度优先的DOM结构遍历，也就是说，移动的方向至少有两个(取决于使用的遍历类型)。遍历以给定节点为根，不可能向上超出DOM树的根节点。<br><img src="https://img-blog.csdnimg.cn/20200525175136185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>任何节点都可以作为遍历的根节点。如果假设</p>元素为根节点，那么遍历的第一步 就是访问&lt;p&gt;元素，然后再访问同为&lt;body&gt;元素后代的两个文本节点。不过，这次遍历永远不会到达&lt;html&gt;&lt;head&gt;元素，也不会到达不属于&lt;body&gt;元素子树的任何节点。而以document为根节点的遍历则可以访问文档中的全部节点。<p></p><p>下图展示了对以document为根节点的DOM树进行深度优先遍历的先后顺序。<strong>NodeIterator 和TreeWalker都以这种方式遍历。</strong><br><img src="https://img-blog.csdnimg.cn/20200525175559137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1、NodeIterator"><a href="#1、NodeIterator" class="headerlink" title="1、NodeIterator"></a>1、NodeIterator</h2><p>使用document.createNodeIterator() 方法来创建它的实例。这个方法接收下列4个参数：</p><blockquote><ul><li>root：想要作为搜索起点的数中的节点。</li><li>whatToShow：表示想要访问哪些节点的数字代码。</li><li>filter：是一个NodeFilter对象，或者一个表示应该接受还是某种特定节点的函数。(类似节点过滤器的函数)</li><li>entityReferenceExpansion：布尔值表示是否扩展实体引用。这个参数在HTML页面中没有用，因为其中的实体引用不能扩展。</li></ul></blockquote><p>whatToShow参数是一个位掩码， 通过应用- -或多 个过滤器( filter )来确定要访问哪些节点。这个参数的值以常量形式在NodeFilter类型中定义，如下所示。</p><blockquote><ul><li>NodeFilter . SHOW_ ALL:显示所有类型的节点。</li><li>NodeFilter . SHOW_ ELEMENT:显示元素节点。</li><li>NodeFilter . SHOW_ ATTRIBUTE:显示特性节点。由于DOM结构原因，实际上不能使用这个值。</li><li>NodeFilter . SHOW_ TEXT:显示文本节点。</li><li>NodeFilter . SHOW_ CDATA_ SECTION: 显示CDATA节点。对HTML页面没有用。</li><li>NodeFilter . SHOw_ ENTITY_ REFERENCE:显示实体引用节点。对HTML页面没有用。</li><li>NodeFil ter . SHOW_ ENTITYE:显示实体节点。对HTML页面没有用。</li><li>NodeFil ter . SHOW_ PROCESSING_ INSTRUCTION:显示处理指令节点。对HTML页面没有用。</li><li>NodeFilter . SHOW_ COMMENT:显示注释节点。</li><li>NodeFilter . SHOW_ DOCUMENT: 显示文档节点。</li><li>NodeFilter . SHOW_ DOCUMENT_TYPE: 显示文档类型节点。</li><li>NodeFil ter . SHOW_ DOCUMENT_ FRAGMENT:显示文档片段节点。对HTML页面没有用。</li><li>NodeFilter . SHOW_ NOTATION:显示符号节点。对HTML页面没有用。</li></ul></blockquote><p>除了NodeFilter.SHOW_ ALL之外，可以使用按位或操作符来组合多个选项，</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> whatToShow = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT;</span><br></pre></td></tr></tbody></table></figure><br>可以通过createNodeIterator()方法的filter参数来指定自定义的NodeFilter对象，或者指定一个功能类似节点过滤器( node filter )的函数。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span>?</span><br><span class="line">    NodeFilter.FILTER_ACCEPT:</span><br><span class="line">    NodeFilter.FILTER_SKIP;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>NodeIterator类型的两个主要方法是<strong>nextNode ()</strong>和p<strong>reviousNode()</strong>。顾名思义，在深度优先的DOM子树遍历中，nextNode ()方法用于向前前进一步，而previousNode ()用于向后后退一步。<strong>在刚刚创建的NodeIterator对象中，有一个内部指针指向根节点，因此第一次调用nextNode()会返回根节点。当遍历到DOM子树的最后一个节点时，nextNode() 返回null</strong>。previousNode()方法的工作机制类似。当遍历到DOM子树的最后一个节点，且previousNode()返回根节点之后，再次调用它就会返回null。</p><hr><p>小例子：遍历指定节点中 &lt;li&gt;的元素，</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylist = <span class="built_in">document</span>.getElementById(<span class="string">"mylist"</span>);  <span class="comment">//获取我们遍历起点的节点。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span>?</span><br><span class="line">    NodeFilter.FILTER_ACCEPT:</span><br><span class="line">    NodeFilter.FILTER_SKIP;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = <span class="built_in">document</span>.createNodeIterator(mylist, NodeFilter.SHOW_ELEMENT, filter, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> node = iterator.nextNode;</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(node.tagName)  <span class="comment">//输出标签名</span></span><br><span class="line">    node = iterator.nextNode();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h2 id="TrreWalker"><a href="#TrreWalker" class="headerlink" title="TrreWalker"></a>TrreWalker</h2><p>TreeWalker是NodeIterator的一个更高级 的版本。除了包括 nextNode ()和previousNode ()在内的相同的功能之外，这个类型还提供了下列用于在不同方向上遍历DOM结构的方法。</p><blockquote><ul><li>parentNode():遍历到当前节点的父节点;</li><li>firstChild():遍历到当前节点的第一个子节点;</li><li>lastChild():遍历到当前节点的最后一个子节点;</li><li>nextSibling():遍历到当前节点的下一个同辈节点;</li><li>previoussibling():遍历到当前节点的上一个同辈节点。</li></ul></blockquote><p>创建Treewalker对象要使用document. createTreewalker()方法，这个方法接受的4个参数与document . createNodeIterator ()方法相同:作为遍历起点的根节点、要显示的节点类型、过滤器和一个表示是否扩展实体引用的布尔值。由于这两个创建方法很相似，所以很容易用Treewalker 来代替NodeIterator,如下面的例子所示。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylist = <span class="built_in">document</span>.getElementById(<span class="string">"mylist"</span>);</span><br><span class="line">            <span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span> ?</span><br><span class="line">                    NodeFilter.FILTER_ACCEPT :</span><br><span class="line">                    NodeFilter.FILTER_SKIP;</span><br><span class="line">                <span class="comment">// NodeFilter.FILTER_REJECT;</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">var</span> walker = <span class="built_in">document</span>.createTreeWalker(mylist, NodeFilter.SHOW_ELEMENT, filter, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">var</span> node = walker.nextNode;</span><br><span class="line">            <span class="keyword">while</span> (node !== <span class="literal">null</span>) {</span><br><span class="line">                <span class="built_in">console</span>.log(node.tagName)  <span class="comment">//输出标签名</span></span><br><span class="line">                node = walker.nextNode();</span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure><p>在这里，filter可以返回的值有所不同。除了NodeFilter .FILTER_ACCEPT 和NodeFilter.FILTER_ SKIP之外，还可以使用NodeFilter . FILTER_REJECT。 在使用NodeIterator对象时，NodeFilter . FILTER_ SKIP与NodeFilter . FILTER_ REJECT 的作用相同:跳过指定的节点。但在使用TreeWalker对象时，NodeFilter . FILTER <em>SKIP会跳过相应节点继续前进到子树中的下一个节点，而NodeFilter . FILTER</em> REJECT 则会跳过相应节点及该节点的整个子树。例如，将前面例子中的NodeFilter . FILTER_ SKIP 修改成NodeFilter. FILTER_ <em>REJECT, 结果就是不会访问任何节点。这是因为第一个返回的节点是&lt;div&gt;,它的标签名不是”li”，于是就会返回NodeFilter . FILTER</em> REJECT ，这意味着遍历会跳过整个子树。在这个例子中，&lt;div&gt;元素是遍历的根节点，于是结果就会停止遍历。</p><p>当然，Treewalker真正强大的地方在于能够在DOM结构中沿任何方向移动。使用Treewalker遍历DOM树，即使不定义过滤器，也可以取得所有&lt;li&gt;元素，如下面的代码所示。<span style="color:red"><strong>（前提我们知道它的结构树）</strong></span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylist = <span class="built_in">document</span>.getElementById(<span class="string">"mylist"</span>);</span><br><span class="line"><span class="keyword">var</span> walker = <span class="built_in">document</span>.createTreeWalker(mylist, NodeFilter.SHOW_ELEMENT, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">walker.firstChild(); <span class="comment">//转到 &lt;p&gt;</span></span><br><span class="line">walker.nextSibling() <span class="comment">//转到&lt;ul&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node = walker.firstChild();</span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(node.tagName)    </span><br><span class="line">    node = walker.nextSibling();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>它的HTML结构</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"mylist"</span>&gt;</span><br><span class="line">    &lt;p&gt;sdfsdf&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li id="li"&gt;阿&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;清&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;呀&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></tbody></table></figure><hr><p>TreeWalker类型 还有一个属性，名叫 currentNode ，表示任何遍历方法在上一次遍历中返回的节点。通过设置这个属性也可以修改遍历继续进行起点，如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = walker.nextNode;</span><br><span class="line"><span class="built_in">console</span>.log(node === walker.currentNode); <span class="comment">//ture</span></span><br><span class="line">walker.currentNode = <span class="built_in">document</span>.body; <span class="comment">//修改起点</span></span><br></pre></td></tr></tbody></table></figure><br><p>下面的例子会返回body中所有的 li 节点</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylist = <span class="built_in">document</span>.getElementById(<span class="string">"mylist"</span>);</span><br><span class="line"><span class="keyword">var</span> filter = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> node.tagName.toLowerCase() == <span class="string">"li"</span> ?</span><br><span class="line">        NodeFilter.FILTER_ACCEPT :</span><br><span class="line">        NodeFilter.FILTER_SKIP;</span><br><span class="line">    <span class="comment">// NodeFilter.FILTER_REJECT;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> walker = <span class="built_in">document</span>.createTreeWalker(mylist, NodeFilter.SHOW_ELEMENT, filter, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> node = walker.nextNode;</span><br><span class="line"><span class="built_in">console</span>.log(node === walker.currentNode); <span class="comment">//ture</span></span><br><span class="line">walker.currentNode = <span class="built_in">document</span>.body; <span class="comment">//修改起点</span></span><br><span class="line"><span class="keyword">while</span> (node !== <span class="literal">null</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(node.tagName)</span><br><span class="line">    node = walker.nextNode();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM ---样式</title>
      <link href="/articl/fdf7c59f.html"/>
      <url>/articl/fdf7c59f.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/858fb5d64a3c40e0a94c9eb544211161.jpg" alt=""></p><a id="more"></a><h2 id="访问元素的样式"><a href="#访问元素的样式" class="headerlink" title="访问元素的样式"></a>访问元素的样式</h2><p><strong>通过JS修改元素的样式：</strong><br>  语法：元素.style.样式名=样式值 (样式值必须是字符串样式)<br>  注意：如果css的样式汇总含有 - ，<br>  这种名称在JS中是不合法的,比如background-color<br>  需要将这种样式的命名修改为驼峰命名法去掉 - ，<br>  然后将 - 后的字母大写。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box.style.backgroundColor = <span class="string">"yellow"</span></span><br><span class="line">box.style.width = <span class="string">"100px"</span></span><br></pre></td></tr></tbody></table></figure><p>我们通过style属性设置的样式都是内联样式，<br>而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示。</p><p>但是如果在样式中写了！Important，则此时样式会有最高的优先级，<br>即使通过js也不能覆盖该样式，此时将会导致js修改样式失效<br>所以尽量不要为样式添加！Important</p><p>通过JS读取内联的样式：<br>  语法：元素.style.样式名<br>  通过style属性设置和读取的都是内联样式，如果没有内联样式则会返回空置。</p><p><strong>通过style来设置元素的样式，记得要加上 单位 px</strong></p><hr><p><strong>style对象的属性和方法</strong></p><p>style对象定义了一些对象和方法，这些属性和方法在提供元素的style特性值的同时，也可以修改样式。</p><ul><li>cssText：能够访问到style特性中的CSS代码。</li><li>length：应用给元素的CSS属性的数量。</li><li>getPropertyValue(propertyName)：返回给定属性的字符串值</li><li>item(index)：返回给定位置的CSS属性的名称。</li><li>removeProperty(propertyName)：从样式表中删除给定的属性。</li><li>setProperty(propertyName,value,priority)：将给定的属性设置为相应的值，并加上优先权标志（“important”或者一个空的字符串）。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写cssText</span></span><br><span class="line">         text.style.cssText = <span class="string">"width:200px;height:100px"</span>;</span><br><span class="line">         <span class="built_in">console</span>.log(text.style.cssText)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取元素样式的属性名和属性值</span></span><br><span class="line"><span class="keyword">var</span> pop, value, i, len;</span><br><span class="line">         <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; text.style.length; i++) {</span><br><span class="line">             pop = text.style[i];  <span class="comment">//或者pop = text.style.item(i);</span></span><br><span class="line">             value = text.style.getPropertyValue(pop);</span><br><span class="line">             <span class="built_in">console</span>.log(pop + <span class="string">":"</span> + value);</span><br><span class="line">         }</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>获取计算的样式</strong></p><p><a href="https://aqingya.cn/2020/04/23/ten/" target="_blank" rel="noopener">js中如何获取元素的当前显示样式</a></p><p><span><strong>无论在哪个浏览器中，所有计算的样式都是只读的</strong>。</span></p><hr><h2 id="元素的大小"><a href="#元素的大小" class="headerlink" title="元素的大小"></a>元素的大小</h2><p><strong>1、偏移量</strong></p><p>offsetWidth<br>offsetHeight</p><ul><li>获取元素的整个的宽度和高度，包括内容区和内边距和边框。</li></ul><p>offsetParent</p><ul><li>可以用来获取当前元素的定位父元素<ul><li>获取到里当前元素最近的开启了定位的祖先元素。</li><li>如果所有的祖先元素都没有开启定位则会返回boby</li></ul></li></ul><p>offsetLeft</p><ul><li>当前元素相对于其定位父元素的水平偏移量。（外边框的距离也算）</li></ul><p>offsetTop</p><ul><li>当前元素相对于其定位父元素的垂直偏移量。（外边框的距离也算）</li></ul><p><span>这些属性都是不带px的，返回的都是一个数字，可以直接进行计算</span></p><p><img src="https://img-blog.csdnimg.cn/20200525141807596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>要想知道某个元素在页面上的偏移量，将这个元素的offsetLeft和offsetTop与其offsetParent的相同属性相加，如此循环直至根元素，就可以得到一个基本准确的值。以下两个函数就可以用于分别取得元素的左和上偏移量。</p><p><strong>获取元素的左偏移量</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素的左偏移量</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>) </span>{</span><br><span class="line">             <span class="keyword">var</span> actualLeft = element.offsetLeft;</span><br><span class="line">             <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">while</span> (current !== <span class="literal">null</span>) {</span><br><span class="line">                 actualLeft += current.offsetLeft;</span><br><span class="line">                 current = current.offsetParent;</span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> actualLeft;</span><br><span class="line">         }</span><br><span class="line"></span><br><span class="line">         <span class="built_in">console</span>.log(getElementLeft(text));</span><br></pre></td></tr></tbody></table></figure><p>获取元素的上偏移量</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素的上偏移量</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>) </span>{</span><br><span class="line">             <span class="keyword">var</span> actualTop = element.offsetTop;</span><br><span class="line">             <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">while</span> (current !== <span class="literal">null</span>) {</span><br><span class="line">                 actualTop += current.offsetTop;</span><br><span class="line">                 current = current.offsetParent;</span><br><span class="line">             }</span><br><span class="line"></span><br><span class="line">             <span class="keyword">return</span> actualTop;</span><br><span class="line">         }</span><br><span class="line"></span><br><span class="line">         <span class="built_in">console</span>.log(getElementTop(text));</span><br></pre></td></tr></tbody></table></figure><p><strong>所有的偏移量都是只读的。而且每次访问都需要重新计算一次。因此应该尽量避免重复访问这些属性；如果需要重复使用其中某些属性的值，可以将他们设置为局部变量，以提高性能。</strong></p><hr><h2 id="2、客户区大小"><a href="#2、客户区大小" class="headerlink" title="2、客户区大小"></a>2、客户区大小</h2><p>元素的客户区大小(clientdimension),指的是元素内容及其内边距所占据的空间大小。有关客户区大小的属性有两个: clientWidth和clientHeight。其中，clientWidth属性是元素内容区宽度加上左右内边距宽度; clientHeight属性是元素内容区高度加上，上下内边距高度。图12-2 形象地说明了这些属性表示的大小。</p><p>clientWidth<br>clientHeight</p><ul><li>这两个属性可以获取元素的可见高度</li><li>这些属性都是不带px的，返回的都是一个数字，可以直接进行计算</li><li>获取元素的高度和宽度，包括内容区和内边距区</li><li>这些属性都是只读的，不能修改</li><li><strong>与偏移量相似，客户区大小也是只读的，也是每次访问都要重新计算。</strong><br><img src="https://img-blog.csdnimg.cn/20200525143306829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><hr><h2 id="3、滚动大小"><a href="#3、滚动大小" class="headerlink" title="3、滚动大小"></a>3、滚动大小</h2><p>最后要介绍的是滚动大小( scroll dimension ),指的是包含滚动内容的元素的大小。有些元素(例如</p>元素)，即使没有执行任何代码也能自动地添加滚动条;但另外-些元素，则需要通过CSS的overflow属性进行设置才能滚动。以下是4个与滚动大小相关的属性。<p></p><ul><li>scrollHeight:在没有滚动条的情况下，元素内容的总高度。</li><li>scrollwidth:在没有滚动条的情况下，元素内容的总宽度。</li><li>scrollLeft:被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置。</li><li>scrollTop:被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200525144831243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)在确定文档的总高度时(包括基于视口的最小高度时),必须取得scrollwidth/clientwidth和scrollHeight/clientHeight中的最大值，才能保证在跨浏览器的环境下得到精确的结果。下面就是这样一个例子。</p><p><strong>注意，对于运行在混杂模式下的IE,则需要用document . body代替document . documentElement。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docHeight = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollHeight, <span class="built_in">document</span>.documentElement.clientHeight);</span><br><span class="line"><span class="keyword">var</span> docWidth = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollWidth, <span class="built_in">document</span>.documentElement.clientWidth);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(docHeight);</span><br><span class="line"><span class="built_in">console</span>.log(docWidth);</span><br></pre></td></tr></tbody></table></figure><br>通过scrollLeft和scrollTop属性既可以确定元素当前滚动的状态，也可以设置元素的滚动位置。在元素尚未被滚动时，这两个属性的值都等于0。如果元素被垂直滚动了，那么scrollTop的值会大于0，且表示元素上方不可见内容的像素高度。如果元素被水平滚动了，那么scrollLeft的值会大于0，且表示元素左侧不可见内容的像素宽度。这两个属性都是可以设置的，因此将元素的scrollLeft和scrollTop设置为0,就可以重置元素的滚动位置。下面这个函数会检测元素是否位于顶部，如果不是就将其回滚到顶部。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToTop</span>(<span class="params">element</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (element.scrollTop != <span class="number">0</span>) {</span><br><span class="line">        element.scrollTop = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p><span><strong>关于滚动了一个练习</strong></span>。<a href="https://aqingya.cn/2020/04/23/eleven/" target="_blank" rel="noopener">连接地址</a></p><hr><h2 id="4、确定元素的大小"><a href="#4、确定元素的大小" class="headerlink" title="4、确定元素的大小"></a>4、确定元素的大小</h2><p>getBoundingClientRect() ，这个方法会返回一个矩形对象,包含4个属性：left、top、right、bottom。<br><strong>这些属性给出了元素在页面中相对于视口的位置</strong>。但是每个浏览器实现都不一样。</p><p>写一个跨浏览器的函数：</p><p>注意：</p><ol><li>由于使用了arguments.callee 所以这个方法不能再严格模式下使用。</li><li>但在某些情况下，这个函数返回的值可能会有所不同，例如使用表格布局或使用滚动元素情况下。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBoundingClientRect</span>(<span class="params">element</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">    <span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line">    <span class="keyword">if</span> (element.getBoundingClientRect) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.offset != <span class="string">"number"</span>) {</span><br><span class="line">            <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">            temp.style.cssText = <span class="string">"position:absolute;left:0;top:0;"</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(temp);</span><br><span class="line">            <span class="built_in">arguments</span>.callee.offset = -temp.getBoundingClientRect().top - scrollTop;</span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(temp);</span><br><span class="line">            temp = <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> rect = element.getBoundingClientRect();</span><br><span class="line">        <span class="keyword">var</span> offset = <span class="built_in">arguments</span>.callee.offset;</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            left: rect.left + offset,</span><br><span class="line">            right: rect.right + offset,</span><br><span class="line">            top: rect.top + offset,</span><br><span class="line">            bottom: rect.bottom + offset</span><br><span class="line">        };</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">var</span> actualLeft = getElementLeft(element);</span><br><span class="line">        <span class="keyword">var</span> actualTop = getElementTop(element);</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            left: actualLeft - scrollLeft,</span><br><span class="line">            right: actualLeft + element.offsetWidth - scrollLeft,</span><br><span class="line">            top: actualTop - scrollTop,</span><br><span class="line">            bottom: actualTop + element.offsetHeight - scrollTop</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript --- DOM  document 扩展</title>
      <link href="/articl/d89abd3a.html"/>
      <url>/articl/d89abd3a.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/fd7621d555e24b87acff439298964d1b.jpg" alt=""></p><a id="more"></a><h2 id="选择符API"><a href="#选择符API" class="headerlink" title="选择符API"></a>选择符API</h2><p>1、querySlector()方法</p><p>querySlector()方法接受一个CSS选择器，<span style="color:red">返回与该模式匹配的第一个元素</span>。通过Document类型调用querySlector()方法时，会在文档元素的范围内查找匹配的元素。而通过Element类型调用querySlector()方法时，只会在该元素的范围内查找匹配的元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得body元素</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得ID为“mydiv”的元素</span></span><br><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.querySelector(<span class="string">"#mydiv"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得类为 "selected"的第一个元素</span></span><br><span class="line"><span class="keyword">var</span> selected = <span class="built_in">document</span>.querySelector(<span class="string">".selected"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得button元素的第一个图像</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.body.querySelector(<span class="string">"img.button"</span>);</span><br></pre></td></tr></tbody></table></figure><p>2、querySelectorAll()方法</p><p>querySelectAll()方法接受的参数与querySelect()方法一样都是一个CSS选择符，但querySelectAll()方法返回的是一个NodeList的实例，不仅仅是一个元素，而是所有匹配到的都会在NodeList中。只要querySelectAll()方法的CSS选择符有效，该方法都会返回一个NodeList对象，不管匹配到多少元素，就算是空的，也会返回一个Nodelist。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得所有类为 "selected"的元素</span></span><br><span class="line"><span class="keyword">var</span> selected = <span class="built_in">document</span>.querySelectorAll(<span class="string">".selected"</span>);</span><br></pre></td></tr></tbody></table></figure><p>3、matchesSelector()方法</p><p>Element类型新增的一个方法matchesSelector()，接受一个CSS选择符为参数，如果调用元素与该选择符匹配，返回true；否则返回false。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.body.matchesSelctor(<span class="string">"body.page1"</span>)){</span><br><span class="line">     <span class="comment">//true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="与类相关的扩充"><a href="#与类相关的扩充" class="headerlink" title="与类相关的扩充"></a>与类相关的扩充</h2><p><strong>classList属性</strong><br>为所有元素添加classList属性。它自己有一个表示自己包含多少元素的属性，取得每个元素可以使用item()方法，也可以使用方括号语法。此外还有如下方法：</p><p><strong>add(value)：将给定的字符串值添加到列表中，如果值已经存在，就不添加了。<br>contains(value)：表示列表中是否存在给定的值，如果存在就返回true，否则返回flase。<br>remove(value)：从列表中删除给定的字符串。<br>toggle(value)：如果列表中已经存在给定的值，则删除它；如果列表中没有给定的值，则添加它。</strong></p><p><strong>支持chrome和Firfox 3.6和IE10以上。</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向div元素中添加div类</span></span><br><span class="line">div.classList.add(<span class="string">"div"</span>)</span><br><span class="line">    <span class="comment">//检查div类</span></span><br><span class="line">div.classList.contains(<span class="string">"div"</span>)</span><br><span class="line">    <span class="comment">//删除div类</span></span><br><span class="line">div.classList.remove(<span class="string">"div"</span>)</span><br><span class="line">    <span class="comment">// 切换div类</span></span><br><span class="line">div.classList.toggle(<span class="string">"div"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代类名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; div.classList.length; i++) {</span><br><span class="line">    <span class="built_in">console</span>.log(div.classList[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h2><p>document.activeElement属性，这个属性始终会引用DOM中当前获得焦点的元素。元素获取焦点的方式有页面加载，用户输入（通常是按Tab键）,和代码汇总调用focus()方法。</p><p>默认情况下，文档刚刚加载完成时，document.activeElement中保存的是document.body元素的引用。文档加载期间，document.activeElement的值为null。</p><p>另外就是新增了document.hasFocus()方法，这个方法用于确定文档是否获得了焦点。</p><hr><h2 id="HTMLDocument的变化"><a href="#HTMLDocument的变化" class="headerlink" title="HTMLDocument的变化"></a>HTMLDocument的变化</h2><p><strong>1、readyState属性</strong></p><p>它有两个可能的值</p><ul><li><p>loading，正在加载文档</p></li><li><p>complete，已经加载完文档</p><p>使用document.readyState的最恰当方式，就是通过它来实现一个指示文档已经加载完成的指示器。用法如下：</p></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.readyState ==<span class="string">"complete"</span>){</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>2、兼容模式</strong></p><p>这个属性是为了告诉开发人员浏览器采用的哪种渲染模式。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) {</span><br><span class="line">    alert(<span class="string">"Standards mode"</span>); <span class="comment">//标准模式</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    alert(<span class="string">"Quirks mode"</span>) <span class="comment">//混杂模式</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>3、head属性</strong><br>引用文档的&lt;head&gt;元素，可以结合使用这个属性和另一种后备方法。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//如果有head属性就使用，否则仍然使用document.getElementsByTatName("head")[0];</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="字符集属性"><a href="#字符集属性" class="headerlink" title="字符集属性"></a>字符集属性</h2><p>charset属性表示文档中实际使用的字符集，也可以直接设置。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.charset</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h2><p><strong>1、innerHTML属性</strong></p><p>在读模式下，innerHTML属性返回与调用元素的所有子节点（包括元素，注释和文本节点）和对应的HTML标记。在写模式下，innerHTML会根据指定的值创建新的DOM树，然后用这个DOM树完全替换调用元素原先的所有子节点。</p><p>不是所有的元素都支持innerHTML属性。不支持innerHTML的元素有：&lt;col&gt;、&lt;colgroup&gt;、&lt;frameset&gt;、&lt;head&gt;、&lt;html&gt;、&lt;style&gt;、&lt;tbody&gt;、&lt;thead&gt;、&lt;tfoot&gt;、&lt;tr&gt;，在IE8及更早的版本中，&lt;title&gt;元素也没有innerHTML属性。</p><p><strong>2、outerHTML属性</strong></p><p>在读模式下，outerHTML属性返回调用它的元素所有子节点的HTML标签，在写模式下，outerHTML根据指定的值创建新的DOM树，然后用这个DOM树完全替换调用元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div.outerHTML = <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>;</span><br><span class="line"><span class="comment">//上面的效果和下面的一样</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">p.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>));</span><br><span class="line">div.parentNode.replaceChild(p, div);</span><br></pre></td></tr></tbody></table></figure><p><strong>3、insertAdjacentHTMl()方法</strong></p><p>它接收两个参数：<strong>插入的位置</strong>和<strong>要插入的HTML文本</strong>。第一个参数必须是下列值之一：</p><p>“beforebegin”，在当前元素之下插入一个紧邻的同辈元素；<br>“afterbegin”，在当前元素之下插入一个新的子元素或在第一个子元素之前在插入新的子元素；<br>“beforeend”，在当前元素之下插入一个新的子元素或在最后一个子元素之后在插入新的子元素；<br>“afterend”，在当前元素之后插入一个紧邻的同辈元素；</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.insertAdjacentHTML(<span class="string">"beforeBegin"</span>, <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>)</span><br><span class="line">div.insertAdjacentHTML(<span class="string">"afterEnd"</span>, <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>)</span><br><span class="line">div.insertAdjacentHTML(<span class="string">"afterBegin"</span>, <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>)</span><br><span class="line">div.insertAdjacentHTML(<span class="string">"beforeEnd"</span>, <span class="string">"&lt;p&gt;aqing&lt;/p&gt;"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>4、innerText属性</strong></p><p>通过innerText 属性可以操作元素中包含所有文本内容，包括子文档树中的文本。通过innerText 读取值时，他会按照由浅入深的顺序，将子文档树中的所有文本拼接起来。再通过innerText 写入值时，结果会删除所有子节点，插入包含响应文本值的文本节点。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.innerText = div.innerText;</span><br></pre></td></tr></tbody></table></figure><p>执行这行代码后，就用原来的文本内容替换了容器中的所有内容（包含子节点，因而也就去掉了HTML标签）。</p><p><strong>5、outerText 属性</strong></p><p>除了作用范围变大到了包含调用它的节点之外，outerText与innerHTML 基本只上没有多大的区别。<br>在读取文本值时，结果完全一样。但在写模式下，outerText 就完全不同了：outerText 不只是替换调用它的元素子节点，而是会替换整个元素（包括子节点）。<br><strong>由于这个属性会导致调用它的元素不存在，因此并不常用。</strong></p><hr><h2 id="scrollIntoView-方法"><a href="#scrollIntoView-方法" class="headerlink" title="scrollIntoView()方法"></a>scrollIntoView()方法</h2><p>滚动页面，可以在所有HTML元素上调用，通过滚动浏览器窗口或某个容器元素，调用元素就可以出现在视口中。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.scrollIntoView();</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="contains-方法"><a href="#contains-方法" class="headerlink" title="contains()方法"></a>contains()方法</h2><p>调用contains()方法的应该是祖先节点，也就是搜索开始的节点，这个方法接收一个参数，即要检测的后代节点。如果被检测到的节点是后代节点，该方法返回true，否则返回false</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement.contains(<span class="built_in">document</span>.body));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>测试&lt;body&gt;元素是不是&lt;html&gt;元素的后代。</p><hr><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM操作技术---动态脚本和动态样式</title>
      <link href="/articl/146793a9.html"/>
      <url>/articl/146793a9.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/bbb0dd7687c143ea84951b9e83dcf04d.jpg" alt=""></p><a id="more"></a><h2 id="动态脚本"><a href="#动态脚本" class="headerlink" title="动态脚本"></a>动态脚本</h2><p>创建动态脚本有两种方式。</p><p>1、引入外部文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"aqing.js"</span> &gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、直接插入JavaScript代码</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    script.src = url;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">loadScript(<span class="string">"aqing.js"</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a><strong>动态样式</strong></h2><p>能够把CSS样式包含到HTML页面中的元素有两个。其中，&lt;link&gt;元素用于包含来自外部的文件，而&lt;style&gt;元素用于指定嵌入样式。与动态脚本类似。所谓动态样式是指在页面刚加载时不存在的样式；动态样式是页面加载完成后动态添加到页面中的。</p><p>1、插入外部文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"style.css"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>2、直接插入JavaScript代码</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyleString</span>(<span class="params">css</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>)</span><br><span class="line">    style.type = <span class="string">"text/css"</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">    } <span class="keyword">catch</span> (ex) {</span><br><span class="line">        style.styleSheet.cssText = css;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(style);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">loadStyleString(<span class="string">"body{background-color:red}"</span>);</span><br></pre></td></tr></tbody></table></figure><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript --- DOM  document类型</title>
      <link href="/articl/374790cd.html"/>
      <url>/articl/374790cd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/4df0ccaef34647639f98b30bcc5b27d8.jpg" alt=""></p><a id="more"></a><h2 id="Document-对象"><a href="#Document-对象" class="headerlink" title="Document 对象"></a>Document 对象</h2><p>每个载入浏览器的 HTML 文档都会成为 Document 对象。</p><p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p><p>提示：Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问。</p><hr><p><strong>一、文档子节点</strong></p><p>1、在document中有一个属性body，它保存的是body的引用（<strong>比通过childNodes列表访问的更快，更直接）</strong><br>  Var body = document.body;</p><p>2、Doucument.doucumentElement保存的是html根标签<br>  Var html = document.documentElenmet;</p><p>3、Document.all 代表页面中的所有元素<br>  var all = document.all;<br>  （var all = document.getElementsByTagName(“*”)）效果一样。<br>  它返回一个数组</p><p>4、根据元素的class属性查询一组元素节点对象<br>  GetElementsByClassNmae() 可以根据class属性值获取一组元素节点对象（类数组）<br>  但是该方法 不支持IE8及以下浏览器。</p><p>5、documen.querySelector()<br>   需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<br>   虽然IE8中没有getElementByTagName() 但是可以使用querySelector，他可以支持IE8.<br>   使用该方法总会返回<strong>一个唯一的一个元素</strong>，如果满足条件的元素有多个，那么它会返回第一个。</p><p>6、documen.querySelectorAll()<br>  该方法和querySelector()用法类似，不同的是他会将符合条件的元素<strong>封装到一个数组中</strong>。<br>  即使符合条件的元素只有一个，他也会返回数组。</p><hr><p><strong>二、文档信息</strong></p><p>1.document.title<br>  可以取得当前界面的标题，也可以修改当前界面的标题并反映给浏览器的标题栏中。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.title)  <span class="comment">//查看标题</span></span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">"aqing"</span>     <span class="comment">//修改标题</span></span><br></pre></td></tr></tbody></table></figure><p>2.属性 URL、domain、referrer 都和网页请求有关。<br>  URL属性包含完整的URL<br>  domain属性中只包含了页面的域名。<br>  referrer属性中保存着连接到当前页面的哪个页面的URL，在没有来源页面的情况下，referrer属性中可能会包含空字符串</p><hr><p><strong>三、查找元素</strong></p><p>1.getElementById()<br>  通过id属性来获取一个元素节点的对象</p><p>2.getElementsByTagName()<br>  可以根据标签名来获取一组元素节点对象<br>  这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象<br>  即使查询到的元素只有一个，也会封装到数组中返回。</p><p>3.getElementsByName()<br>  通过name属性来获取一组元素节点对象。<br>  这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象。<br>  即使查询到的元素只有一个，也会封装到数组中返回。</p><hr><p><strong>四、特殊集合</strong></p><p>1、document.anchors<br>  包含文档中所有带name特性的 a 元素</p><p>2、document.forms<br>  包含文档中所有的</p><form>元素，与documen.getElementByTagName（“form”）结果相同。<p></p><p>3、document.images<br>  包含文档中所有的<img>元素，与documen.getElementByTagName（“img”）结果相同。</p><p>4、document.links<br>  包含文档中所带href特性的 a 元素</p><p><strong>集合中的项也会随着当前文档内容的更新而更新</strong></p><hr><p><strong>五、DOM一致性检测</strong></p><p>hasFeature()<br>  这个方法有两个参数：要检测的DOM功能的名称及版本号。如果浏览器支持给定的名称和版本的功能，则该方法会返回 true 。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"XML"</span>, <span class="string">"1.0"</span>));</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>六、文档写入</strong></p><p><strong>1、write()方法</strong><br>定义和用法<br>  write() 方法可向文档写入 HTML 表达式或 JavaScript 代码。</p><p>可列出多个参数(exp1,exp2,exp3,…) ，它们将按顺序被追加到文档中。</p><p>语法<br>  document.write(exp1,exp2,exp3,….)</p><p>说明<br>  虽然根据 DOM 标准，该方法只接受单个字符串作为参数。不过根据经验，write() 可接受任何多个参数。</p><p>我们通常按照两种的方式使用 write() 方法：一是在使用该方在文档中输出 HTML，另一种是在调用该方法的的窗口之外的窗口、框架中产生新文档。在第二种情况中，请务必使用 close() 方法来关闭文档。</p><p><strong>2、writeln() 方法</strong></p><p>定义和用法<br>  writeln() 方法与 write() 方法作用相同，外加可在每个表达式后写一个换行符。</p><p>3、open()方法</p><p>定义和用法<br>  open() 方法可打开一个新文档，并擦除当前文档的内容。</p><p>语法<br>  document.open(mimetype,replace)<br>|参数| 描述 |<br>|–|–|<br>| mimetype |可选。规定正在写的文档的类型。默认值是 “text/html”。 |<br>|replace|可选。当此参数设置后，可引起新文档从父文档继承历史条目。|</p><p>说明<br>  该方法将擦除当前 HTML 文档的内容，开始一个新的文档，新文档用 write() 方法或 writeln() 方法编写。</p><p>提示和注释<br>  重要事项：调用 open() 方法打开一个新文档并且用 write() 方法设置文档内容后，必须记住用 close 方法关闭文档，并迫使其内容显示出来。</p><p>注释：属于被覆盖的文档的一部分的脚本或事件句柄不能调用该方法，因为脚本或事件句柄自身也会被覆盖。</p><p>4、close() 方法</p><p>定义和用法<br>  close() 方法可关闭一个由 document.open 方法打开的输出流，并显示选定的数据。</p><p>语法<br>  document.close()<br>说明<br>  该方法将关闭 open() 方法打开的文档流，并强制地显示出所有缓存的输出内容。如果您使用 write() 方法动态地输出一个文档，必须记住当你这么做的时候要调用 close() 方法，以确保所有文档内容都能显示。</p><p>  一旦调用了 close()，就不应该再次调用 write()，因为这会隐式地调用 open() 来擦除当前文档并开始一个新的文档。</p><br><br>愿你的坚持终有收获。<br><br></form><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript  ---  DOM简介 和  DOM Node节点的增删改查</title>
      <link href="/articl/db2d8858.html"/>
      <url>/articl/db2d8858.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/3714a171b95a4f2b9148de6aa84ffef4.jpg" alt=""></p><a id="more"></a><h2 id="DOM简介："><a href="#DOM简介：" class="headerlink" title="DOM简介："></a>DOM简介：</h2><p><strong>通过 HTML DOM，JavaScript 能够访问和改变 HTML 文档的所有元素。</strong></p><hr><p><strong>HTML DOM（文档对象模型）</strong><br>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p><strong>HTML DOM</strong> 模型被结构化为<strong>对象树</strong>：</p><p><strong>对象的 HTML DOM 树</strong><br><img src="https://img-blog.csdnimg.cn/20200522094310145.gif" alt="在这里插入图片描述"></p><p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p><ul><li>JavaScript 能改变页面中的所有 HTML 元素</li><li>JavaScript 能改变页面中的所有 HTML 属性</li><li>JavaScript 能改变页面中的所有 CSS 样式</li><li>JavaScript 能删除已有的 HTML 元素和属性</li><li>JavaScript 能添加新的 HTML 元素和属性</li><li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li><li>JavaScript 能在页面中创建新的 HTML 事件</li></ul><hr><p><strong>什么是 DOM？</strong><br>DOM 是一项 W3C (World Wide Web Consortium) 标准。</p><p>DOM 定义了访问文档的标准：</p><p>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。”<br>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li>Core DOM - 所有文档类型的标准模型</li><li>XML DOM - XML 文档的标准模型</li><li>HTML DOM - HTML 文档的标准模型</li></ul><hr><p><strong>什么是 HTML DOM？</strong><br>HTML DOM 是 HTML 的标准对象模型和编程接口。它定义了：</p><p>作为对象的 HTML 元素</p><ul><li>所有 HTML 元素的属性</li><li>访问所有 HTML 元素的方法</li><li>所有 HTML 元素的事件</li></ul><p><span style="color:red">换言之：HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。</span></p><hr><p>HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。<br>Document对象是我们可以从脚本中对HTML页面中的所有元素进行访问</p><p>节点：Node——构成HTML文档最基本的单元。<br>常用节点分为4类：</p><ul><li>文档节点：整个HTML文档</li><li>元素节点：HTML文档中的HTML标签</li><li>属性节点：元素的属性</li><li>文本节点：HTML标签中的文本内容</li></ul><p><img src="https://img-blog.csdnimg.cn/20200522141013494.png" alt="在这里插入图片描述"><br>文档的加载：<br>    浏览器在加载一个页面的时候，是按照自上向下的顺序加载的<br>    读取到一行就运行一行，如果将script标签写到页面的上边，<br>    在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载<br>    会导致无法获取到DOM对象</p><p>Onload事件在整个 页面加载完成之后才触发<br>    为window绑定一个onload事件<br>    该事件对应的响应函数，将会在页面加载完成之后执行，<br>    这样可以确保我们的代码执行时所有的DOM对象已经加载完成。</p><hr><p><strong>获取元素节点</strong></p><p>通过document对象调用</p><p>1.getElementById()<br>  通过id属性来获取一个元素节点的对象</p><p>2.getElementsByTagName()<br>  可以根据标签名来获取一组元素节点对象<br>  这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象<br>  即使查询到的元素只有一个，也会封装到数组中返回。</p><p>3.getElementsByName()<br>  通过name属性来获取一组元素节点对象。<br>  这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象。<br>  即使查询到的元素只有一个，也会封装到数组中返回。</p><p><strong>InnerHTML 通过这个属性可以获取到元素内部的html代码<br>  Bj.innerHTML<br>  对于自结束标签没有意义，会返回为空。<br>  如果需要读取元素节点属性，<br>  直接使用 元素.属性名<br>  例子： 元素.id 元素.name 元素.value<br>  <span style="color:red">注意：class属性不能采用这种方式，（主要用于表单中）<br>  读取class属性需要使用 元素. className</span><br>innerText<br>  该属性可以获取元素内部中的文本内容。<br>  他和innerHTML类似，不同的是他会自动将html标签去除。</strong></p><hr><p><strong>获取元素节点的子节点</strong><br>通过具体的元素节点调用<br>1.getElementByTagName()<br>  是一个方法，方法返回当前的指定标签名后代节点</p><p>2.childNodes<br>  是一个属性 表示当前节点的所有子节点<br>  childNodes属性会获取包括文本节点在内的所有节点<br>  <strong>根据DOM标签与标签间的空白也会当成文本节点</strong><br><span style="color:red">注意：IE8及以下的浏览器中不会将空白文本当成子节点，<br>children属性可以获取当前元素的所有子元素。标签与标签间的空白不会当成文本节点。</span></p><p>3.firstChild<br>   属性，表示当前节点的第一个子节点。<br>  可以获取当前元素的第一个子节点（<strong>包含空白文本节点和注释</strong>）。</p><p>  <strong><span style="color:red">firstElementChild:指向第一个元素；（不包括文本节点和注释）</span></strong></p><p>4.lastChile<br>   属性，表示当前节点的最后一个子节点<br>  可以获取当前元素的最后一个子节点（<strong>包含空白文本节点和注释</strong>）。</p><p>  <strong><span style="color:red">lastElementChild:指向最后一个子元素；（不包括文本节点和注释）</span></strong></p><br><p>遍历元素<br>  <strong><span style="color:red">childElementCount:返回子元素的个数（不包括文本节点和注释）</span></strong></p><hr><p><strong>获取父节点和兄弟节点</strong></p><p>通过具体的节点调用<br>1.parentNode<br>   属性，表示当前节点的父节点</p><p>2.previousSibling<br>   属性，表示当前节点的前一个兄弟节点</p><p>  <span style="color:red">previousSibling 属性返回元素节点之前的兄弟节点（包括文本节点、注释节点）；</span><br>  <span style="color:red">previousElementSibling 属性只返回元素节点之前的兄弟元素节点（不包括文本节点、注释节点）；</span></p><p>3.nextSibling<br>   属性，表示当前节点的后一个兄弟节点</p><p>  <span style="color:red">nextSibling 属性返回元素节点之后的兄弟节点（包括文本节点、注释节点）；</span><br>  <span style="color:red">nextElementSibling 属性只返回元素节点之后的兄弟元素节点（不包括文本节点、注释节点）。</span></p><hr><p>1、在document中有一个属性body，它保存的是body的引用<br>  Var body = document.body;</p><p>2、Doucument.doucumentElement保存的是html根标签<br>  Var html = document.documentElenmet;</p><p>3、Document.all 代表页面中的所有元素<br>  var all = document.all;<br>  （var all = document.getElementsByTagName(“*”)）效果一样。<br>  它返回一个数组</p><p>4、根据元素的class属性查询一组元素节点对象<br>  GetElementsByClassNmae() 可以根据class属性值获取一组元素节点对象（类数组）<br>  但是该方法 不支持IE8及以下浏览器。</p><p>5、documen.querySelector()<br>   需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<br>   虽然IE8中没有getElementByTagName() 但是可以使用querySelector，他可以支持IE8.<br>   使用该方法总会返回<strong>一个唯一的一个元素</strong>，如果满足条件的元素有多个，那么它会返回第一个。</p><p>6、documen.querySelectorAll()<br>  该方法和querySelector()用法类似，不同的是他会将符合条件的元素<strong>封装到一个数组中</strong>。<br>  即使符合条件的元素只有一个，他也会返回数组。</p><hr><p><strong>DOM增删改查：</strong></p><p>1.Document.createElement()<br>  可以用于创建一个元素节点对象，<br>  它需要一个标签名作为参数，将会根据标签名创建元素节点对象<br>  并将创建好的对象作为返回值返回。<br>  它可以个innerHTML结合使用。<br><img src="https://img-blog.csdnimg.cn/20200522143355678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.document.createTextNode()<br>  可以用来创建一个文本节点对象<br>  需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回。</p><p>3.appendChild()<br>  向一个父节点中添加一个新的子节点<br>  用法：父节点.appendChild(子节点)；</p><p>4.insertBefore()<br>  可以在指定的子节点前插入新的子节点<br>  语法：<br>  父节点.insertBefore(新节点，旧节点);</p><p>5.replaceChild()<br>  可以使用指定的子节点替换已有的子节点<br>  语法：<br>  父节点.replaceChile(新节点，旧节点)</p><p>6.removeChild()<br>  可以删除一个子节点<br>  语法：父节点.removeChild(子节点)；<br>  但是：<br>  <span style="color:red">常用：子节点.parentNode.removeChild(子节点)</span></p><hr><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ---  BOM</title>
      <link href="/articl/2f15e5f2.html"/>
      <url>/articl/2f15e5f2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/624409a3cef640bd9180db9749cb1453.jpg" alt=""></p><a id="more"></a><h2 id="BOM简介"><a href="#BOM简介" class="headerlink" title="BOM简介"></a>BOM简介</h2><p><strong>JavaScript的实现包括以下3个部分：</strong></p><p>1）核心（ECMAScript）：描述了JS的语法和基本对象。<br>2）文档对象模型 （DOM）：处理网页内容的方法和接口<br>3）浏览器对象模型（BOM）：与浏览器交互的方法和接口</p><p><strong>ECMAScript扩展知识：</strong></p><p>① ECMAScript是一个标准，JS只是它的一个实现，其他实现包括ActionScript。<br>② “ECMAScript可以为不同种类的宿主环境提供核心的脚本编程能力……”，即<strong>ECMAScript不与具体的宿主环境相绑定，如JS的宿主环境是浏览器，AS的宿主环境是Flash。</strong><br>③ECMAScript描述了以下内容：语法、类型、语句、关键字、保留字、运算符、对象。</p><p><strong>DOM 是为了操作文档出现的 API，document 是其的一个对象；<br>BOM 是为了操作浏览器出现的 API，window 是其的一个对象。</strong></p><hr><p>BOM的核心是window，而window对象又具有双重角色，它既是通过js访问浏览器窗口的一个接口，又是一个Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都以window作为其global对象。</p><hr><h2 id="window对象思维导图"><a href="#window对象思维导图" class="headerlink" title="window对象思维导图"></a>window对象思维导图</h2><p><img src="https://img-blog.csdnimg.cn/20200521163031819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> BOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript  ---  闭包详解</title>
      <link href="/articl/ab86b69.html"/>
      <url>/articl/ab86b69.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/15e7a0047f5a4ab79b785f613ac3a528.jpg" alt=""></p><a id="more"></a><h2 id="闭包的几种概念理解："><a href="#闭包的几种概念理解：" class="headerlink" title="闭包的几种概念理解："></a>闭包的几种概念理解：</h2><ol><li>能够访问另一个函数作用域的变量的函数。清晰的讲：<strong>闭包就是一个函数，这个函数能够访问其他函数的作用域中的变量</strong>。</li><li>闭包是一种保护私有变量的机制，在函数执行时形成私有的作用域，保护里面的私有变量不受外界干扰。直观的说就是形成一个不销毁的栈环境。</li><li>闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所能访问的所有局部变量。</li><li><strong>闭包是指有权访问另一个函数作用域中的变量的函数</strong></li><li>能够读取其他函数内部变量的函数。或简单理解为<strong>定义在一个函数内部的函数，内部函数持有外部函数内变量的引用。</strong></li></ol><p>我们都知道，js的作用域分两种，全局和局部，基于我们所熟悉的<a href="https://aqingya.cn/2020/05/19/twenty-eight/" target="_blank" rel="noopener">作用域链相关知识</a>，我们知道在js作用域环境中访问变量的权利是由内向外的，内部作用域可以获得当前作用域下的变量并且可以获得当前包含当前作用域的外层作用域下的变量，反之则不能，也就是说在外层作用域下无法获取内层作用域下的变量，同样在不同的函数作用域中也是不能相互访问彼此变量的，那么我们想在一个函数内部也有限权访问另一个函数内部的变量该怎么办呢？闭包就是用来解决这一需求的，闭包的本质就是在一个函数内部创建另一个函数。</p><br><p><strong>我们首先知道闭包有3个特性：</strong></p><p><strong>①函数嵌套函数</strong></p><p><strong>②函数内部可以引用函数外部的参数和变量</strong></p><p><strong>③参数和变量不会被垃圾回收机制回收</strong></p><hr><h2 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h2><p><strong>例子1</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"Chrome"</span>;    <span class="comment">//创建局部变量name和局部函数alertName</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>) </span>{ <span class="comment">//alertName()是函数内部方法，是一个闭包</span></span><br><span class="line">        alert(name); <span class="comment">//使用了外部函数声明的变量，内部函数可以访问外部函数的变量</span></span><br><span class="line">    }</span><br><span class="line">    alertName();</span><br><span class="line">}</span><br><span class="line">init();</span><br><span class="line"><span class="comment">//一个变量在源码中声明的位置作为它的作用域，同时嵌套的函数可以访问到其外层作用域中声明的变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFun</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"Chrome"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>)</span>{</span><br><span class="line">        alert(name);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> alertName;   <span class="comment">//alertName被外部函数作为返回值返回了,返回的是一个闭包</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFun = outFun();</span><br><span class="line">myFun();</span><br></pre></td></tr></tbody></table></figure><p>闭包有函数+它的词法环境；词法环境指函数创建时可访问的所有变量。<br>myFun引用了一个闭包，闭包由alertName()和闭包创建时存在的“Chrome”字符串组成。<br>alertName（）持有了name的引用，<br>myFunc持有了alertName（）的的访问，<br>因此myFunc调用时，name还是处于可以访问的状态。</p><hr><p><strong>例子2</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inc</span>(<span class="params"></span>) </span>{</span><br><span class="line">        n++;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    }</span><br><span class="line">    inc();  </span><br><span class="line">    inc(); </span><br><span class="line">}</span><br><span class="line">a();</span><br></pre></td></tr></tbody></table></figure><p><strong>例子3</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inc</span>(<span class="params"></span>)</span>{</span><br><span class="line">       n++; </span><br><span class="line">       <span class="built_in">console</span>.log(n);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> inc;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> c = a();</span><br><span class="line">c();    <span class="comment">//控制台输出1</span></span><br><span class="line">c();    <span class="comment">//控制台输出2</span></span><br></pre></td></tr></tbody></table></figure><p>看看是怎么执行的：</p><p>var c = a()，这一句 a()返回的是函数 inc，那这句等同于 var c = inc;<br>c()，这一句等同于 inc(); 注意，函数名只是一个标识（指向函数的指针），而()才是执行函数。<br>后面三句翻译过来就是： var c = inc; inc(); inc();，跟第一段代码有区别吗？ 没有。</p><p><strong>为啥要这样写？</strong><br><strong>我们知道，js的每个函数都是一个个小黑屋，它可以获取外界信息，但是外界却无法直接看到里面的内容。将变量 n 放进小黑屋里，除了 inc 函数之外，没有其他办法能接触到变量 n，而且在函数 a 外定义同名的变量 n 也是互不影响的，这就是所谓的增强“封装性”。</strong></p><p><strong>而之所以要用 return 返回函数标识 inc，是因为在 a 函数外部无法直接调用 inc 函数，所以 return inc 与外部联系起来。</strong></p><hr><p><strong>例子4</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addFun1 = add(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> addFun2 = add(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(addFun1(<span class="number">2</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(addFun2(<span class="number">2</span>));  <span class="comment">//11</span></span><br></pre></td></tr></tbody></table></figure><p>add接受一个参数x，返回一个函数,它的参数是y，返回x+y。<br>add是一个函数工厂，传入一个参数，就可以创建一个参数和其他参数求值的函数。<br>addFun1和addFun2都是闭包。他们使用相同的函数定义，但词法环境不同，addFun1中x是4，后者是5。</p><hr><p><strong>例子5</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(++n);</span><br><span class="line">        <span class="built_in">console</span>.log(++num);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> fn1 = fn();</span><br><span class="line">fn1(); <span class="comment">// 1  4</span></span><br><span class="line">fn1(); <span class="comment">// 1  5</span></span><br></pre></td></tr></tbody></table></figure><p>一般情况下，在函数fn执行完后，就应该连同它里面的变量一同被销毁，但是在这个例子中，匿名函数作为fn的返回值被赋值给了fn1，这时候相当于fn1=function(){var n = 0 … }，并且匿名函数内部引用着fn里的变量num，所以变量num无法被销毁，而变量n是每次被调用时新创建的，所以每次fn1执行完后它就把属于自己的变量连同自己一起销毁，于是乎最后就剩下孤零零的num，于是这里就产生了内存消耗的问题。</p><hr><p><strong>例子6</strong><br>经典例子-定时器与闭包<br>写一个for循环，让它按顺序打印出当前循环次数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    }, <span class="number">100</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>按照预期它应该依次输出1 2 3 4 5，而结果它输出了五次5，这是为什么呢？原来<strong>由于js是单线程的，所以在执行for循环的时候定时器setTimeout被安排到任务队列中排队等待执行，而在等待过程中for循环就已经在执行，等到setTimeout可以执行的时候，for循环已经结束，i的值也已经编程5，所以打印出来五个5</strong>，那么我们为了实现预期结果应该怎么改这段代码呢？</p><p><strong>解决办法：</strong><br>1、<span style="color:#f33b45">（ps:如果把for循环里面的var变成let，也能实现预期结果 ES6新增 利用块级作用域(最简单，推荐)）</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    }, <span class="number">100</span>);</span><br><span class="line">} </span><br><span class="line"><span class="comment">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></tbody></table></figure><p>2、利用自执行函数，将i作为参数传入</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        },  <span class="number">100</span>);</span><br><span class="line">    })(i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></tbody></table></figure><p>引入闭包来保存变量i，将setTimeout放入立即执行函数中，将for循环中的循环值i作为参数传递，100毫秒后同时打印出1 2 3 4 5。</p><p>那如果我们想实现每隔100毫秒分别依次输出数字，又该怎么改呢?</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        }, i * <span class="number">100</span>);</span><br><span class="line">    })(i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></tbody></table></figure><p>在这段代码中，相当于同时启动3个定时器，i*100是为4个定时器分别设置了不同的时间，同时启动，但是执行时间不同，每个定时器间隔都是100毫秒，实现了每隔100毫秒就执行一次打印的效果。</p><p>2、利用setTimeout的第三个参数，将i作为参数传入function</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    }, <span class="number">100</span>, i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></tbody></table></figure><hr><p><strong>例子7</strong><br>闭包作为函数传递</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (x &gt; num) {</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params">fn2</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    fn2(<span class="number">30</span>);</span><br><span class="line">}(fn1);</span><br><span class="line"><span class="comment">//控制台打印  30</span></span><br></pre></td></tr></tbody></table></figure><p>在这段代码中，函数fn1作为参数传入立即执行函数中，在执行到fn2(30)的时候，30作为参数传入fn1中，这时候if(x&gt;num)中的num取的并不是立即执行函数中的num，而是取创建函数的作用域中的num这里函数创建的作用域是全局作用域下，所以num取的是全局作用域中的值15，即30&gt;15，打印30</p><hr><h2 id="闭包应用场景"><a href="#闭包应用场景" class="headerlink" title="闭包应用场景"></a>闭包应用场景</h2><p><strong>1、闭包应用场景之回调</strong></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">""</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body {</span><br><span class="line">        font-size: <span class="number">12</span>px;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    h1 {</span><br><span class="line">        font-size: <span class="number">1.5</span>rem;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    h2 {</span><br><span class="line">        font-size: <span class="number">1.2</span>rem;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;欧力给&lt;/p&gt;</span><br><span class="line">    &lt;h1&gt;嘤嘤嘤&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;啊啊啊&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href="#" id="size-12"&gt;12&lt;/a&gt;</span><br><span class="line">    &lt;a href="#" id="size-14"&gt;14&lt;/a&gt;</span><br><span class="line">    &lt;a href="#" id="size-16"&gt;16&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function">function <span class="title">changeSize</span><span class="params">(size)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> function() {</span><br><span class="line">                document.body.style.fontSize = size + <span class="string">'px'</span>;</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> size12 = changeSize(<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">var</span> size14 = changeSize(<span class="number">14</span>);</span><br><span class="line">        <span class="keyword">var</span> size16 = changeSize(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        document.getElementById(<span class="string">'size-12'</span>).onclick = size12;</span><br><span class="line">        document.getElementById(<span class="string">'size-14'</span>).onclick = size14;</span><br><span class="line">        document.getElementById(<span class="string">'size-16'</span>).onclick = size16;</span><br><span class="line">        <span class="comment">//我们定义行为，然后把它关联到某个用户事件上（点击或者按键）。我们的代码通常会作为一个回调（事件触发时调用的函数）绑定到事件上</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>2、闭包应用场景之封装变量</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用闭包定义能访问私有函数和私有变量的公有函数。</span></span><br><span class="line"><span class="keyword">var</span> counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> privateCounter = <span class="number">0</span>; <span class="comment">//私有变量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">val</span>) </span>{</span><br><span class="line">        privateCounter += val;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ <span class="comment">//三个闭包共享一个词法环境</span></span><br><span class="line">            change(<span class="number">1</span>);</span><br><span class="line">        },</span><br><span class="line">        decrement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            change(<span class="number">-1</span>);</span><br><span class="line">        },</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> privateCounter;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(counter.value()); <span class="comment">//0</span></span><br><span class="line">counter.increment();</span><br><span class="line"><span class="built_in">console</span>.log(counter.value()); <span class="comment">//1</span></span><br><span class="line">counter.increment();</span><br><span class="line"><span class="built_in">console</span>.log(counter.value()); <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><p>共享的环境创建在一个匿名函数体内，立即执行。<br>环境中有一个局部变量一个局部函数，通过匿名函数返回的对象的三个公共函数访问。</p><p><strong>3、闭包应用场景之为节点循环绑定click事件</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link rel="stylesheet" href=""&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p id=<span class="string">"info"</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;E-mail: &lt;input type="text" id="email" name="email"&gt;&lt;/</span>p&gt;</span><br><span class="line">    &lt;p&gt;Name: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;p&gt;Age: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">content</span>)</span>{</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = content;</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setContent</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> infoArr = [</span><br><span class="line">            {<span class="string">'id'</span>:<span class="string">'email'</span>,<span class="string">'content'</span>:<span class="string">'your email address'</span>},</span><br><span class="line">            {<span class="string">'id'</span>:<span class="string">'name'</span>,<span class="string">'content'</span>:<span class="string">'your name'</span>},</span><br><span class="line">            {<span class="string">'id'</span>:<span class="string">'age'</span>,<span class="string">'content'</span>:<span class="string">'your age'</span>}</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; infoArr.length; i++) {</span><br><span class="line">            <span class="keyword">var</span> item = infoArr[i];</span><br><span class="line">            <span class="built_in">document</span>.getElementById(item.id).onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                showContent(item.content)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    setContent()</span><br><span class="line">    <span class="comment">//循环中创建了三个闭包，他们使用了相同的词法环境item，item.content是变化的变量</span></span><br><span class="line">    <span class="comment">//当onfocus执行时，item.content才确定，此时循环已经结束，三个闭包共享的item已经指向数组最后一项。</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></tbody></table></figure><br><p><strong>解决方法1</strong>     通过函数工厂，则函数为每一个回调都创建一个新的词法环境</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决方法1     通过函数工厂，则函数为每一个回调都创建一个新的词法环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">content</span>)</span>{</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = content;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params">content</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        showContent(content)</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setContent</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> infoArr = [</span><br><span class="line">        {<span class="string">'id'</span>:<span class="string">'email'</span>,<span class="string">'content'</span>:<span class="string">'your email address'</span>},</span><br><span class="line">        {<span class="string">'id'</span>:<span class="string">'name'</span>,<span class="string">'content'</span>:<span class="string">'your name'</span>},</span><br><span class="line">        {<span class="string">'id'</span>:<span class="string">'age'</span>,<span class="string">'content'</span>:<span class="string">'your age'</span>}</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; infoArr.length; i++) {</span><br><span class="line">        <span class="keyword">var</span> item = infoArr[i];</span><br><span class="line">        <span class="built_in">document</span>.getElementById(item.id).onfocus = callBack(item.content)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">setContent()</span><br></pre></td></tr></tbody></table></figure><br><p><strong>解决方法2</strong>     绑定事件放在立即执行函数中</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决方法2        绑定事件放在立即执行函数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">content</span>)</span>{</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = content;</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setContent</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> infoArr = [</span><br><span class="line">            {<span class="string">'id'</span>:<span class="string">'email'</span>,<span class="string">'content'</span>:<span class="string">'your email address'</span>},</span><br><span class="line">            {<span class="string">'id'</span>:<span class="string">'name'</span>,<span class="string">'content'</span>:<span class="string">'your name'</span>},</span><br><span class="line">            {<span class="string">'id'</span>:<span class="string">'age'</span>,<span class="string">'content'</span>:<span class="string">'your age'</span>}</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; infoArr.length; i++) {</span><br><span class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                <span class="keyword">var</span> item = infoArr[i];</span><br><span class="line">                <span class="built_in">document</span>.getElementById(item.id).onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                    showContent(item.content)</span><br><span class="line">                }</span><br><span class="line">            })()<span class="comment">//放立即执行函数，立即绑定，用每次的值绑定到事件上，而不是循环结束的值</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    setContent()</span><br></pre></td></tr></tbody></table></figure><br><p><strong>解决方案3</strong>     用ES6声明，避免声明提前，作用域只在当前块内</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解决方案3        用ES6声明，避免声明提前，作用域只在当前块内</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">content</span>)</span>{</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = content;</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setContent</span>(<span class="params"></span>)</span>{</span><br><span class="line">      <span class="keyword">var</span> infoArr = [</span><br><span class="line">          {<span class="string">'id'</span>:<span class="string">'email'</span>,<span class="string">'content'</span>:<span class="string">'your email address'</span>},</span><br><span class="line">          {<span class="string">'id'</span>:<span class="string">'name'</span>,<span class="string">'content'</span>:<span class="string">'your name'</span>},</span><br><span class="line">          {<span class="string">'id'</span>:<span class="string">'age'</span>,<span class="string">'content'</span>:<span class="string">'your age'</span>}</span><br><span class="line">      ];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; infoArr.length; i++) {</span><br><span class="line">          <span class="keyword">let</span> item = infoArr[i];      <span class="comment">//限制作用域只在当前块内</span></span><br><span class="line">          <span class="built_in">document</span>.getElementById(item.id).onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">              showContent(item.content)</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  setContent()</span><br></pre></td></tr></tbody></table></figure><p><strong>解决方案4</strong>     使用 forEach()来遍历helpText数组并给每一个</p><p>添加一个监听器</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">content</span>) </span>{</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = content;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setContent</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> infoArr = [{</span><br><span class="line">        <span class="string">'id'</span>: <span class="string">'email'</span>,</span><br><span class="line">        <span class="string">'content'</span>: <span class="string">'your email address'</span></span><br><span class="line">    }, {</span><br><span class="line">        <span class="string">'id'</span>: <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'content'</span>: <span class="string">'your name'</span></span><br><span class="line">    }, {</span><br><span class="line">        <span class="string">'id'</span>: <span class="string">'age'</span>,</span><br><span class="line">        <span class="string">'content'</span>: <span class="string">'your age'</span></span><br><span class="line">    }];</span><br><span class="line">    infoArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>{</span><br><span class="line">        <span class="built_in">document</span>.getElementById(text.id).onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            showContent(text.content);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">setContent()</span><br></pre></td></tr></tbody></table></figure><hr><br><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="从堆栈的角度看待js函数"><a href="#从堆栈的角度看待js函数" class="headerlink" title="从堆栈的角度看待js函数"></a>从堆栈的角度看待js函数</h2><p>基本变量的值一般都是存在栈内存中，而对象类型的变量的值存储在堆内存中，栈内存存储对应空间地址。基本的数据类型: Number 、Boolean、Undefined、String、Null。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  a = <span class="number">1</span>   <span class="comment">//a是一个基本类型</span></span><br><span class="line"><span class="keyword">var</span>  b = {<span class="attr">m</span>: <span class="number">20</span> }   <span class="comment">//b是一个对象</span></span><br></pre></td></tr></tbody></table></figure><p>对应内存存储：<br><img src="https://img-blog.csdnimg.cn/20200520134555480.png" alt="在这里插入图片描述"><br>当我们执行 b={m:30}时，堆内存就有新的对象{m：30}，栈内存的b指向新的空间地址( 指向{m：30} )，而堆内存中原来的{m：20}就会被程序引擎垃圾回收掉，节约内存空间。我们知道js函数也是对象，它也是在堆与栈内存中存储的，我们来看一下转化：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">    }</span><br><span class="line">    fn1();</span><br><span class="line">}</span><br><span class="line">fn();</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520134802643.png" alt="在这里插入图片描述"><br><strong>栈是一种先进后出的数据结构：</strong><br><strong>1 在执行fn前，此时我们在全局执行环境(浏览器就是window作用域)，全局作用域里有个变量a；</strong></p><p><strong>2 进入fn，此时栈内存就会push一个fn的执行环境，这个环境里有变量b和函数对象fn1，这里可以访问自身执行环境和全局执行环境所定义的变量</strong></p><p><strong>3 进入fn1，此时栈内存就会push 一个fn1的执行环境，这里面没有定义其他变量，但是我们可以访问到fn和全局执行环境里面的变量，因为程序在访问变量时，是向底层栈一个个找，如果找到全局执行环境里都没有对应变量，则程序抛出underfined的错误。</strong></p><p><strong>4 随着fn1()执行完毕，fn1的执行环境被杯销毁，接着执行完fn()，fn的执行环境也会被销毁，只剩全局的执行环境下，现在没有b变量，和fn1函数对象了，只有a 和 fn(函数声明作用域是window下)</strong><br><br><br>在函数内访问某个变量是根据函数作用域链来判断变量是否存在的，而函数作用域链是程序根据函数所在的执行环境栈来初始化的，所以上面的例子，我们在fn1里面打印变量b，根据fn1的作用域链的找到对应fn执行环境下的变量b。所以当程序在调用某个函数时，做了一下的工作：准备执行环境，初始函数作用域链和arguments参数对象<br><br><br>我们现在看回最初的例子outer与inner</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>{</span><br><span class="line">     <span class="keyword">var</span>  a = <span class="string">'变量1'</span></span><br><span class="line">     <span class="keyword">var</span>  inner = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.info(a)</span><br><span class="line">     }</span><br><span class="line">    <span class="keyword">return</span> inner    <span class="comment">// inner 就是一个闭包函数，因为他能够访问到outer函数的作用域</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span>  inner = outer()   <span class="comment">// 获得inner闭包函数</span></span><br><span class="line">inner()   <span class="comment">//"变量1"</span></span><br></pre></td></tr></tbody></table></figure><p>当程序执行完var inner = outer()，其实outer的执行环境并没有被销毁，因为他里面的变量a仍然被被inner的函数作用域链所引用，当程序执行完inner(), 这时候，inner和outer的执行环境才会被销毁调；《JavaScript高级编程》书中建议：由于闭包会携带包含它的函数的作用域，因为会比其他函数占用更多内容，过度使用闭包，会导致内存占用过多。</p><hr><h2 id="js闭包的各种坑"><a href="#js闭包的各种坑" class="headerlink" title="js闭包的各种坑"></a>js闭包的各种坑</h2><p><strong>坑点1： 引用的变量可能发生变化</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>{</span><br><span class="line">         <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">             result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                 <span class="keyword">return</span> i;</span><br><span class="line">             };</span><br><span class="line">         }</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure><p>看样子result每个闭包函数对打印对应数字，1,2,3,4,…,10, 实际不是，因为每个闭包函数访问变量i是outer执行环境下的变量i，随着循环的结束，i已经变成10了，所以每个函数内部的 i 值都是10，<br>怎么解决这个问题呢？</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        result[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> num; <span class="comment">// 此时访问的num，是上层函数执行环境的num，数组有10个函数对象，每个对象的执行环境下的number都不一样</span></span><br><span class="line">            }();</span><br><span class="line">        })(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(outer()); <span class="comment">//0,1,2,3,4,5,6,7,8,9</span></span><br></pre></td></tr></tbody></table></figure><p>`我们没有直接把闭包赋值给数组，而是定义一个匿名函数，并立即执行该匿名函数的结果赋值给数组。我们在调用匿名函数时，我们传入的变量 i 。由于函数是按值传递的，所以将变量 i 的当前值复制给num。而这个匿名函数的内部，又创建并返回一个访问num的闭包。这样一来result数组中的每个函数都有自己的num变量的一个副本，因此返回不同的数值。</p><br><p><strong>坑点2: this指向问题</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = {</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFuce: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFuce()()); <span class="comment">// The Window</span></span><br></pre></td></tr></tbody></table></figure><p>由于getNameFuce()返回的是一个函数，因此调用object.getNameFuce()()就会立即调用它返回的函数，所以它返回的函数就相当于Window调用的，结果就返回一个全局的字符串The Window”。<br><strong>因为里面的闭包函数是在window作用域下执行的，也就是说，this指向windows</strong></p><br><p><strong>this和arguments。内部函数在搜索这两个对象时，只会搜索到其活动对象为止，因此永远不能直接访问外部函数中的这两个变量。如果想访问作用域中的 this 和 arguments 对象，必须将该对象的引用保存到另一个闭包能够访问的变量之中。</strong></p><p>我们可以把外部作用域中的this对象保存在一个闭包能够访问到的变量里，就可以让闭包访问该对象了。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = {</span><br><span class="line">    name: <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFuce: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> that.name;</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFuce()()); <span class="comment">// My Object</span></span><br></pre></td></tr></tbody></table></figure><p>在定义匿名函数之前，我们把 this 对象赋值给一个名叫that的变量。而定义了闭包之后，闭包可以访问这变量，因为它是我们在包含函数中特意声明的变量。即使在函数返回之后，that 也仍然引用着 object ，所以调用object.getNameFuce()() 就返回了 “My Object”。</p><p>下面几种特殊情况，this 的值也可能发生意外的改变。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"> object = {</span><br><span class="line">     name: <span class="string">"My Object"</span>,</span><br><span class="line">     getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">     }</span><br><span class="line"> };</span><br><span class="line"> <span class="built_in">console</span>.log(object.getName()); <span class="comment">// My Object</span></span><br><span class="line"> <span class="built_in">console</span>.log((object.getName)()); <span class="comment">// My Object</span></span><br><span class="line"> <span class="built_in">console</span>.log((object.getName = object.getName)()); <span class="comment">// The Window 非严格模式下</span></span><br></pre></td></tr></tbody></table></figure><p>第一行是代码正常调用。第二行(object.getName)()调用 和object.getName() 是一样的。我们看一下第三行，先执行一条赋值语句，再调用赋值后的结果。因为这个赋值表达式的值是函数本身所有 this 的值不能得到维持，结果就返回了”The Window”。<br>当然我们在开发的时候，不会用第二行和第三行代码，不过，这个例子有助于说明即使是语法的细微变化，都有可能意外的改变 this 值。</p><br><p><strong>坑点3：内存泄露问题</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">showId</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>)</span><br><span class="line">    el.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">      aler(el.id)   <span class="comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改成下面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">showId</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>)</span><br><span class="line">    <span class="keyword">var</span> id  = el.id</span><br><span class="line">    el.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">      aler(id) </span><br><span class="line">    }</span><br><span class="line">    el = <span class="literal">null</span>    <span class="comment">// 主动释放el</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>闭包会引用包含函数的整个活动对象，而其中包含着el。即使闭包不直接引用el，包含函数的活动对象中也会保存一个引用，因此有必要吧el变量设置为null。</strong></p><br><p><strong>技巧1： 用闭包解决递归调用问题（当然现在大多用es6的let 和const 定义）</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>); <span class="comment">//会产生耦合</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> f = factorial;</span><br><span class="line">factorial = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">3</span>)); <span class="comment">//报错 1.html:2030 Uncaught TypeError: factorial is not a function</span></span><br></pre></td></tr></tbody></table></figure><p>以上代码先把 factorial() 函数保存到变量 f 中，然后将 factorial 变量设置为null。结果指向原始函数的引用就只有一个 f ，但接下来调用 f() 时，由于必须执行 factorial() ,而 factorial 已经不再是函数了，所以就会导致错误，在这种情况下可以使用 arguments.callee() 可以解决这个问题。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> f = factorial;</span><br><span class="line">factorial = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">3</span>)); <span class="comment">//6</span></span><br></pre></td></tr></tbody></table></figure><p><strong>arguments.callee 是一个指向正在执行的函数的指针</strong>。但是在严格模式下，不能通过脚本访问 arguments.callee ，我们还可以用闭包的方式来解决。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> num * f(num - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="keyword">var</span> f = factorial;</span><br><span class="line">factorial = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">3</span>)); <span class="comment">//6</span></span><br></pre></td></tr></tbody></table></figure><p>这样就没有问题了，实际上起作用的是闭包函数f，而不是外面的函数newFactorial，这样在严格模式和非严格模式都能使用。</p><br><p><strong>技巧2：用闭包模仿块级作用域</strong></p><p>es6没出来之前，用var定义变量存在变量提升问题</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">//这里是块级作用域</span></span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>这是立即调用一个匿名函数</p><br><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">//这里是块级作用域</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>先定义一个函数然后再立即调用它，定义函数的方式是创建一个匿名函数，并把匿名函数赋值给变量someFunction 。<br>那么是不是也可以用函数的值直接取代函数名呢？然而下面的代码会导致错误。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">//这里是块级作用域</span></span><br><span class="line">}();    <span class="comment">//报错</span></span><br></pre></td></tr></tbody></table></figure><p>这段代码会导致语法错误，是因为JavaScript将function 关键字作为一个函数声明的开始，而函数声明后面不能跟圆括号。然而，<strong>函数表达式</strong>的后面可以跟圆括号，要将函数声明转化为函数表达式，加上圆括号即可。</p><br><p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumber</span>(<span class="params">count</span>) </span>{</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) {</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        }</span><br><span class="line">    })();</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 报错 Uncaught ReferenceError: i is not defined</span></span><br><span class="line">}</span><br><span class="line">outputNumber(<span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure><br><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下闭包的好处与坏处</p><p><strong>好处</strong></p><p><strong>①保护函数内的变量安全 ，实现封装，防止变量流入其他环境发生命名冲突<br>②在内存中维持一个变量，可以做缓存（但使用多了同时也是一项缺点，消耗内存）<br>③匿名自执行函数可以减少内存消耗</strong></p><p><strong>坏处</strong></p><p><strong>①其中一点上面已经有体现了，就是被引用的私有变量不能被销毁，增大了内存消耗，造成内存泄漏，解决方法是可以在使用完变量后手动为它赋值为null；<br>②其次由于闭包涉及跨域访问，所以会导致性能损失，我们可以通过把跨作用域变量存储在局部变量中，然后直接访问局部变量，来减轻对执行速度的影响</strong></p><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript --- 作用域与作用域链</title>
      <link href="/articl/645a7186.html"/>
      <url>/articl/645a7186.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/8b87a15fbd9b443fa3b322c68b9b1423.jpg" alt=""></p><a id="more"></a><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>1、理解<br>  就是一块“地盘”，一个代码所在的区域<br>  它是静态的（相对于上下文对象），在编写代码时就确定了</p><p>2、分类<br>  全局作用域<br>  函数作用域<br>  块级作用域</p><p>3、作用<br>  隔离变量，不同作用域下的同名变量不会有冲突。<br><img src="https://img-blog.csdnimg.cn/20200519155909763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="作用域与执行上下文"><a href="#作用域与执行上下文" class="headerlink" title="作用域与执行上下文"></a>作用域与执行上下文</h2><p>1、区别1<br>  全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时。<br>  全局执行上下文环境是在全局作用域确定之后，js代码马上执行之前创建。<br>  函数执行_上下文环境是在调用函数时，函数体代码执行之 前创建。</p><p>2、区别2<br>  作用域是静态的，只要函数定义好了就一直存在，且不会再变化。<br>  上下文环境是动态的，调用函数时创建，函数调用结束时，上下文环境就会释放。</p><p>3、联系<br>  上下文环境（对象）是从属于所在的作用域。<br>  全局上下文环境—&gt;全局作用域。<br>  函数上下文环境—&gt;对应的函数使用域。</p><p><img src="https://img-blog.csdnimg.cn/20200519161000612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>1、理解<br>  多个上下级关系的作用域形成的链，它的方向是从下向上的（从内到外）。<br>  查找变量时就是沿着作用域链来查找的。</p><p>2、查找一个变量的查找规则<br>  在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则在上一级作用域是执行上下文中查找对应的属性，如果有直接返回，否则在往上查找，直到全局作用域，如果还找不到就抛出找不到的异常。</p><p><img src="https://img-blog.csdnimg.cn/20200519162258104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="关于作用域链的两道面试题：（具有迷惑性，要注意）"><a href="#关于作用域链的两道面试题：（具有迷惑性，要注意）" class="headerlink" title="关于作用域链的两道面试题：（具有迷惑性，要注意）"></a>关于作用域链的两道面试题：（具有迷惑性，要注意）</h2><p><strong>面试题1：</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">f</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line">    f();</span><br><span class="line">}</span><br><span class="line">show(fn);   <span class="comment">//10</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200519164317171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)fn()中没有x，就去全局作用域中去寻找。</p><hr><p><strong>面试题二：</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(fn);</span><br><span class="line">}</span><br><span class="line">fn(); <span class="comment">//ƒ () {console.log(fn);}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    fn2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(fn2)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">obj.fn2(); <span class="comment">//Uncaught ReferenceError: fn2 is not defined</span></span><br></pre></td></tr></tbody></table></figure><p>fn()应该没有问题正常输出fn函数。<br>但是调用obj.fn2()时，console.log(fn2)，会先在fn函数中找fn，没有就去全局作用域中寻找，全局也没有，就报错了。</p><p>如果我们想找到obj中的fn2,我们可以这样写。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    fn2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.fn2)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">obj.fn2(); <span class="comment">//ƒ () {console.log(this.fn2)}</span></span><br></pre></td></tr></tbody></table></figure><br><br><p>愿你的坚持终有回报。</p><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript  ---  继承总结</title>
      <link href="/articl/15498138.html"/>
      <url>/articl/15498138.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/2fb0db544bd443fc92a359d3a9941076.jpg" alt=""></p><a id="more"></a><h2 id="ES5中的继承"><a href="#ES5中的继承" class="headerlink" title="ES5中的继承"></a>ES5中的继承</h2><p><strong>一、 原型链继承</strong></p><p>原型链继承的原理：直接让子类的原型对象指向父类实例，当子类实例找不到对应的属性和方法时，就会往它的原型对象，也就是父类实例上找，从而实现对父类的属性和方法的继承。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fat</span> (<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'aqing'</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 父类上的原型方法</span></span><br><span class="line">fat.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span> (<span class="params"></span>) </span>{}</span><br><span class="line"><span class="comment">// 子类的原型对象方法指向父类 子类中找不到的属性方法就会向父类找</span></span><br><span class="line">child.prototype = <span class="keyword">new</span> fat()</span><br><span class="line"><span class="comment">// 不影响继承 顺便绑一下constructor</span></span><br><span class="line">child.prototype.constructor = child</span><br><span class="line"><span class="comment">// child实例就可以访问父类及其原型上的属性和方法了</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="keyword">new</span> child()</span><br><span class="line">Child.name <span class="comment">// 'aqing'</span></span><br><span class="line">Child.getName() <span class="comment">// 'aqing'</span></span><br></pre></td></tr></tbody></table></figure><p><strong>原型链继承的缺点</strong></p><ol><li><p>所有的child实例原型都指向同一个fat实例，因此对child实例修改某个父类引用类型会影响所有的child实例；</p></li><li><p>创建子类时无法向父类传参，没有实现super()的功能.</p></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fat</span> (<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'aqing'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fat.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span> (<span class="params"></span>) </span>{}</span><br><span class="line">child.prototype = <span class="keyword">new</span> fat()</span><br><span class="line">child.prototype.constructor = child</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> Child1 = <span class="keyword">new</span> child();</span><br><span class="line"><span class="keyword">const</span> Child2 = <span class="keyword">new</span> child();</span><br><span class="line">Child1.name = <span class="string">'wzg'</span></span><br><span class="line"><span class="built_in">console</span>.log(Child1.name) <span class="comment">// wzg</span></span><br><span class="line"><span class="comment">// 本来父类name属性是zaq 然后现在==</span></span><br><span class="line"><span class="built_in">console</span>.log(Child2.name) <span class="comment">// wzg</span></span><br></pre></td></tr></tbody></table></figure><p><strong>二、 构造函数继承</strong></p><p>构造函数继承：在子类的构造函数中执行父类的构造函数，并为其绑定子类的this。让父类的构造函数把成员的属性和方法都挂在子类的this上，这样既避免了共用一个原型实例，又能像父类构造函数传参。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fat</span>(<span class="params">name</span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">}</span><br><span class="line">fat.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>{</span><br><span class="line">    fat.call(<span class="keyword">this</span>, name)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child(<span class="string">"aqing"</span>)</span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child(<span class="string">"aqing"</span>)</span><br><span class="line">child1.name = <span class="string">'wzg'</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.name) <span class="comment">// wzg</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.name) <span class="comment">// aqing</span></span><br></pre></td></tr></tbody></table></figure><p><strong>构造函数继承的缺点</strong><br>继承不到父类上的属性和方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child1.getName() <span class="comment">// Uncaught TypeError: child1.getName is not a function</span></span><br></pre></td></tr></tbody></table></figure><p><strong>三 、组合式继承</strong><br>既然原型链继承和构造函数继承都有各自的缺点但是又能互补，那何不将两者结合起来使用；</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fat</span>(<span class="params">name</span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line">fat.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 构造函数继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>{</span><br><span class="line">    fat.call(<span class="keyword">this</span>, name)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> fat();</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child(<span class="string">"aqing"</span>);</span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child(<span class="string">"aq"</span>);</span><br><span class="line">child1.name = <span class="string">'wzg'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">//  wzg</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// aq</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.getName()); <span class="comment">//wzg</span></span><br></pre></td></tr></tbody></table></figure><p><strong>组合式继承的缺点</strong><br>每次创建子类实例都执行了两次构造函数（fat.call()和new fat()），虽然不影响继承，但是在子类创建时 原型中会存在两份相同的属性和方法。</p><p><strong>四 、寄生式组合继承</strong></p><p>为了解决构造函数被执行两次的问题，我们将指向父类实例 变成转向父类原型，减少一次构造函数的执行。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fat</span>(<span class="params">name</span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line">fat.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 构造函数继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>{</span><br><span class="line">    fat.call(<span class="keyword">this</span>, name);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line">Child.prototype = fat.prototype <span class="comment">// 将指向父类实例转成转向父类原型</span></span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child(<span class="string">"aqing"</span>);</span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child(<span class="string">"aqing"</span>);</span><br><span class="line">child1.name = <span class="string">'wzg'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// wzg</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// aqing</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.getName()); <span class="comment">// wzg</span></span><br></pre></td></tr></tbody></table></figure><p>但是这种方法也存在一个问题，就是子类和父类的原型都指向同一个对象，如果我们对子类原型操作就会对父类原型产生影响。比如给子类Child.prototype新增一个getName方法,那么父类fat.prototype也增加或是被覆盖一个getName方法。为了解决这个问题 我们给fat.prototype做一个浅拷贝；</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fat</span>(<span class="params">name</span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line">fat.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 构造函数继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>{</span><br><span class="line">    fat.call(<span class="keyword">this</span>, name);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(fat.prototype) <span class="comment">// 将指向父类实例转成转向父类原型</span></span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child(<span class="string">"aqing"</span>);</span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child(<span class="string">"aqing"</span>);</span><br><span class="line">child1.name = <span class="string">'wzg'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// wzg</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// aqing</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.getName()); <span class="comment">// wzg</span></span><br><span class="line">Child.prototype.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"sayname"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> fat();</span><br><span class="line">child1.sayname(); <span class="comment">//saynem</span></span><br><span class="line">f.sayname();   <span class="comment">//Uncaught TypeError: f.sayname is not a function</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="ES6中的继承"><a href="#ES6中的继承" class="headerlink" title="ES6中的继承"></a>ES6中的继承</h2><p>class介绍<a href="https://github.com/ruanyf/es6tutorial/blob/57701fcc2e4c972b5fa6be236362f0b57b97bab4/docs/class.md" target="_blank" rel="noopener">来自阮一峰</a><br>es6中的继承：<br>1、class可以理解为functon,由于class本质还是一个function，因此它也有一个prototype属性。当new一个class时，会把class的protortype属性赋值给这个新对象的_proto_属性上；<br>2、constructor是默认添加的方法，在new一个对象的时候，会自动调用该方法, constructor里定义自己的属性；<br>3、继承extends和super， class子类名 extends父类名 实现继承。当然，还得在constructor里写上super (父类的参数)，意思就是在子类中获取父类的this指针，相当于fat.call(this)</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fat</span> </span>{</span><br><span class="line"><span class="keyword">constructor</span>(props) {</span><br><span class="line"><span class="keyword">this</span>.name = props || <span class="string">''</span>;</span><br><span class="line">}</span><br><span class="line">getName () {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">fat</span> </span>{</span><br><span class="line"><span class="keyword">constructor</span>(props, attrs) { <span class="comment">// props继承父类的属性，attrs自己私有的属性</span></span><br><span class="line"><span class="keyword">super</span>(props); <span class="comment">// 相当于获取父类的this指向</span></span><br><span class="line"><span class="keyword">this</span>.rename = props.rename || <span class="string">''</span></span><br><span class="line"><span class="keyword">this</span>.attrs = attrs</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 子类自己的方法</span></span><br><span class="line">getFatname () {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">}</span><br><span class="line">getAttrs () {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.attrs</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 通过new实例化一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child({</span><br><span class="line">name: <span class="string">'wzg'</span>,</span><br><span class="line">rename: <span class="string">'aqing'</span></span><br><span class="line">}, <span class="string">'wuzhiguang'</span>)</span><br><span class="line">child1.getName() <span class="comment">// wzg</span></span><br><span class="line">child1.getRename() <span class="comment">// aqing</span></span><br><span class="line">child1.getAttrs() <span class="comment">// wuzhiguang</span></span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的原型和原型链（图解）</title>
      <link href="/articl/d966af1.html"/>
      <url>/articl/d966af1.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/9e59b1cfbfef402e9f1e7b01fbe72497.jpg" alt=""></p><a id="more"></a><h2 id="JS中的原型和原型链"><a href="#JS中的原型和原型链" class="headerlink" title="JS中的原型和原型链"></a>JS中的原型和原型链</h2><p>讲原型的时候，我们应该先要记住以下几个要点，这几个要点是理解原型的关键：</p><p>1、所有的引用类型（数组、函数、对象）可以自由扩展属性（除null以外）。</p><p>2、所有的引用类型都有一个’_ _ proto_ _’属性(也叫隐式原型，它是一个普通的对象)。</p><p>3、所有的函数都有一个’prototype’属性(这也叫显式原型，它也是一个普通的对象)。</p><p>4、所有引用类型，它的’_ _ proto_ _’属性指向它的构造函数的’prototype’属性。</p><p>5、当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的’_ _ proto_ _’属性(也就是它的构造函数的’prototype’属性)中去寻找。</p><hr><p>那么要点说完了，我们就根据这些要点来理解原型和原型链。</p><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>我们先来看一个原型的例子。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name,age</span>)</span>{</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*根据要点3，所有的函数都有一个prototype属性，这个属性是一个对象</span></span><br><span class="line"><span class="comment">再根据要点1，所有的对象可以自由扩展属性</span></span><br><span class="line"><span class="comment">于是就有了以下写法*/</span></span><br><span class="line">Foo.prototype={</span><br><span class="line"><span class="comment">// prototype对象里面又有其他的属性</span></span><br><span class="line">showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I'm "</span>+<span class="keyword">this</span>.name);<span class="comment">//this是什么要看执行的时候谁调用了这个函数</span></span><br><span class="line">},</span><br><span class="line">showAge:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"And I'm "</span>+<span class="keyword">this</span>.age);<span class="comment">//this是什么要看执行的时候谁调用了这个函数</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> fn=<span class="keyword">new</span> Foo(<span class="string">'小明'</span>,<span class="number">19</span>)</span><br><span class="line"><span class="comment">/*当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它</span></span><br><span class="line"><span class="comment">构造函数的'prototype'属性中去找*/</span></span><br><span class="line">fn.showName(); <span class="comment">//I'm 小明</span></span><br><span class="line">fn.showAge(); <span class="comment">//And I'm 19</span></span><br></pre></td></tr></tbody></table></figure><hr><p>这就是原型，很好理解。那为什么要使用原型呢？</p><p>试想如果我们要通过Foo()来创建很多很多个对象，如果我们是这样子写的话：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name,age</span>)</span>{</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line"><span class="keyword">this</span>.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I'm "</span>+<span class="keyword">this</span>.name);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">this</span>.showAge=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"And I'm "</span>+<span class="keyword">this</span>.age);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>那么我们创建出来的每一个对象，里面都有showName和showAge方法，这样就会占用很多的资源。<br>而通过原型来实现的话，只需要在构造函数里面给属性赋值，而把方法写在Foo.prototype属性(这个属性是唯一的)里面。这样每个对象都可以使用prototype属性里面的showName、showAge方法，并且节省了不少的资源。</p><hr><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>理解了原型，那么原型链就更好理解了。</p><p><strong>下面这段话可以帮助理解原型链</strong></p><p>根据要点5，当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它构造函数的’prototype’属性中去寻找。那又因为’prototype’属性是一个对象，所以它也有一个’_ _ proto_ _’属性。</p><p>那么我们来看一个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name,age</span>)</span>{</span><br><span class="line"> <span class="keyword">this</span>.name=name;</span><br><span class="line"> <span class="keyword">this</span>.age=age;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="comment">//this是什么要看执行的时候谁调用了这个函数。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I'm "</span>+<span class="keyword">this</span>.name+<span class="string">" And I'm "</span>+<span class="keyword">this</span>.age);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> fn=<span class="keyword">new</span> Foo(<span class="string">'小明'</span>,<span class="number">19</span>);</span><br><span class="line">fn.toString(); <span class="comment">//I'm 小明 And I'm 19</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.toString===Foo.prototype.__proto__.toString); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn.__proto__ ===Foo.prototype)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.__proto__===<span class="built_in">Object</span>.prototype)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__===<span class="literal">null</span>)<span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><p>是不是觉得有点奇怪？我们来分析一下。<br><img src="https://img-blog.csdnimg.cn/20200515132717836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)首先，fn的构造函数是Foo()。所以：<br><strong>fn._ _ proto _ _=== Foo.prototype</strong><br>又因为Foo.prototype是一个普通的对象，它的构造函数是Object，所以：<br><strong>Foo.prototype._ _ proto _ _=== Object.prototype</strong><br>通过上面的代码，我们知道这个toString()方法是在Object.prototype里面的，当调用这个对象的本身并不存在的方法时，它会一层一层地往上去找，一直到null为止。</p><br><br>所以当fn调用toString()时，JS发现fn中没有这个方法，于是它就去Foo.prototype中去找，发现还是没有这个方法，然后就去Object.prototype中去找，找到了，就调用Object.prototype中的toString()方法。<br><p>这就是原型链，fn能够调用Object.prototype中的方法正是因为存在原型链的机制。</p><p>另外，在使用原型的时候，一般推荐将需要扩展的方法写在构造函数的prototype属性中，避免写在_ _ proto _ _属性里面。</p><br><hr><h2 id="探索instanceof"><a href="#探索instanceof" class="headerlink" title="探索instanceof"></a>探索instanceof</h2><p>instanceof是如何判断的？<br>表达式： A instanceof B       A是实例对象，B是构造函数。A看隐式原型属性（<strong>proto</strong>），B看显示原型属性(prototype)</p><p>如果B函数的显示原型对象在A对象的原型链上,返回true，否则返回false</p><p>案例一：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> Foo); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200515152136840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>案例二:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>{}</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span> <span class="keyword">instanceof</span> Foo); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200515153434949.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200515153443153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们来逐个分析一下：</p><pre><code>console.log(Object instanceof Function); //true</code></pre><p><img src="https://img-blog.csdnimg.cn/20200515154607459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>console.log(Object instanceof Object); //true</code></pre><p><img src="https://img-blog.csdnimg.cn/20200515154638561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>console.log(Function instanceof Function); //true<br><img src="https://img-blog.csdnimg.cn/20200515154725474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>console.log(Function instanceof Object); //true</code></pre><p><img src="https://img-blog.csdnimg.cn/20200515154808226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>function Foo() {}console.log(Object instanceof Foo); //false</code></pre><p><img src="https://img-blog.csdnimg.cn/2020051515495623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>##补充：两个关于原型链的面试题</p><p>案例一：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>{};</span><br><span class="line">A.prototype.n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> A();</span><br><span class="line">A.prototype = {</span><br><span class="line">    n: <span class="number">2</span>,</span><br><span class="line">    m: <span class="number">3</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(b.n); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b.m); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(c.n); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(c.m); <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200515145330972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>案例二：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>{};</span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a()"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b()"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line">f.a();<span class="comment">//a()</span></span><br><span class="line">f.b(); <span class="comment">// 直接报错   f.b is not a function</span></span><br><span class="line">F.a();<span class="comment">//a()</span></span><br><span class="line">F.b();<span class="comment">//b()</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200515150503562.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200515150517395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript正则表达式-常见面试题总结</title>
      <link href="/articl/2195a388.html"/>
      <url>/articl/2195a388.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/0ad7df3c78a34d90b3a7a49a82ea9120.jpg" alt=""></p><a id="more"></a><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>JavaScript 写一个字符串转成驼峰的方法，o_div_style_position转成oDivStylePosotion。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'border-bottom-color'</span>;</span><br><span class="line"><span class="keyword">var</span> strRg = str.replace(<span class="regexp">/\-[a-z]/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> params.charAt(<span class="number">1</span>).toUpperCase();</span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(strRg);</span><br></pre></td></tr></tbody></table></figure><ol><li>charAt(1)也可以用substr(1)、substring(1)来替代。</li><li>toUpperCase()转换成大写字母。</li><li>/-[a-z]/g中g表示全文检索，part表示匹配到的字符</li><li>replace是字符串的方法，返回经过修改的新字符串。</li></ol><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>JavaScript 查找字符串中出现最多字符的个数<br>例如：sdjksfssscfssdd -&gt;字符最多的是s，出现了7次</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'sdjksfssscfssdd'</span>;</span><br><span class="line"><span class="keyword">var</span> maxObj = {</span><br><span class="line">    key: <span class="literal">null</span>,</span><br><span class="line">    count: <span class="literal">null</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">var</span> maxCou = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str) {</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(str[<span class="number">0</span>], <span class="string">'g'</span>);</span><br><span class="line">  <span class="keyword">var</span> currStr = str[<span class="number">0</span>];</span><br><span class="line">  str = str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">part</span>) </span>{</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  })</span><br><span class="line">  <span class="keyword">if</span> (i &gt; maxCou) {</span><br><span class="line">    maxObj.key = currStr;</span><br><span class="line">    maxCou = maxObj.count = i;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(maxObj.key + <span class="string">':'</span> + maxObj.count)</span><br></pre></td></tr></tbody></table></figure><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><p>JavaScript 把12233435566690中连续重复的数字去掉</p><p>判断是否为空字符串，是就直接返回；</p><p>不是的话</p><p>初始字符串为str第一个，从第二个开始，如果不等于他们前一个的字符，代表不重复，加入初始字符，迭代进行，直到最后一个，返回</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeRepetition</span> (<span class="params">str</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (str != <span class="string">''</span>) {</span><br><span class="line">    <span class="keyword">var</span> result = str[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; str.length; i++) {</span><br><span class="line">      <span class="keyword">if</span> (str[i] != str[i - <span class="number">1</span>]) {</span><br><span class="line">        result += str[i];</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> result = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(removeRepetition(<span class="string">"sssssssssaaaaaaaaasasas"</span>)); <span class="comment">//sasasas</span></span><br></pre></td></tr></tbody></table></figure><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><p>JavaScript 用js实现千位分隔符?</p><p>例如123456789–&gt;123,456,789</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'123456789'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([1-9]\d{0,2})((?:\d{3})+)$/</span>;</span><br><span class="line"><span class="keyword">var</span> s = str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">1</span> + <span class="string">','</span> + <span class="built_in">RegExp</span>.$<span class="number">2.</span>match(<span class="regexp">/\d{3}/g</span>);</span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(s);<span class="comment">//123,456,789</span></span><br></pre></td></tr></tbody></table></figure><p>知识点</p><ul><li>将第一个逗号前面的数字作为第一组，后面所有数字为第二组，第二组是由多个三位的数字组合而成的，整体需要匹配捕获，但是每个三位数不需要匹配捕获所以加？：。</li><li>RegExp.$1获取第一个分组，RegExp.$2获取第二个分组。</li><li>match返回匹配到的数据，是数组类型。</li></ul><p>注意：IE10中直接调用分组不识别，需要在此前调用test方法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'123456789'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([1-9]\d{0,2})((?:\d{3})+)$/</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) {</span><br><span class="line">  <span class="keyword">var</span> s = str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">1</span> + <span class="string">','</span> + <span class="built_in">RegExp</span>.$<span class="number">2.</span>match(<span class="regexp">/\d{3}/g</span>);</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(s);<span class="comment">//123,456,789</span></span><br></pre></td></tr></tbody></table></figure><h2 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h2><p>JavaScript 写一个正则表达式判断字符串是否是对称数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Woow'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([a-z])([a-z])\2\1$/i</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="问题六"><a href="#问题六" class="headerlink" title="问题六"></a>问题六</h2><p>JavaScript 写出一个正则表达式用于匹配由数字和字母组成的字符串</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPassWord</span> (<span class="params">nubmer</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/^[0-9a-zA-Z]*$/</span>;  <span class="comment">//判断字符串是否为数字和字母组合</span></span><br><span class="line">  <span class="keyword">if</span> (!re.test(nubmer)) {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><br><hr><h2 id="test-也能捕获（本意是匹配）"><a href="#test-也能捕获（本意是匹配）" class="headerlink" title="test() 也能捕获（本意是匹配）"></a>test() 也能捕获（本意是匹配）</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"wzg123wzg45wzg52"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d+)/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200512203558386.png" alt="在这里插入图片描述"></p><hr><h2 id="案例：把时间字符串进行处理"><a href="#案例：把时间字符串进行处理" class="headerlink" title="案例：把时间字符串进行处理"></a>案例：把时间字符串进行处理</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="string">"2020-5-1"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d{4})-(\d{1,2})-(\d{1,2})/</span>;</span><br><span class="line">time = time.replace(reg, <span class="string">"$1年$2月$3日"</span>);</span><br></pre></td></tr></tbody></table></figure><p>也可以这样处理str.replace(reg,function(){})</p><ol><li>首先拿REG和TIME进行匹配捕获，能匹配到几次就会把传递的函数执行几次（而且是匹配一次就执行一次）</li><li>不仅把方法执行，而且EWPLACE还给方法传递了实参信息（和exec捕获的内容一致的信息：大正则匹配的内容，小分组匹配的信息）</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="string">"2020-5-1"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d{4})-(\d{1,2})-(\d{1,2})/</span>;</span><br><span class="line">time = time.replace(reg, (big, $<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span>) =&gt; {</span><br><span class="line">    <span class="built_in">console</span>.log(big, $<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/2020051220375457.png" alt="在这里插入图片描述"></p><ol start="3"><li>在函数中我们返回的是啥，就把当前大正则匹配的内容替换成啥。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="string">"2020-5-1"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d{4})-(\d{1,2})-(\d{1,2})/</span>;</span><br><span class="line">time = time.replace(reg, (...arg) =&gt; {</span><br><span class="line">    <span class="keyword">let</span> [, $<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span>] = arg;</span><br><span class="line">    $<span class="number">2.</span>length &lt; <span class="number">2</span> ? $<span class="number">2</span> = <span class="string">"0"</span> + $<span class="number">2</span> : <span class="literal">null</span></span><br><span class="line">    $<span class="number">3.</span>length &lt; <span class="number">2</span> ? $<span class="number">3</span> = <span class="string">"0"</span> + $<span class="number">3</span> : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> $<span class="number">1</span> + <span class="string">"年"</span> + $<span class="number">2</span> + <span class="string">"月"</span> + $<span class="number">3</span> + <span class="string">"日"</span></span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(time);</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="案例：字符串首字母大写"><a href="#案例：字符串首字母大写" class="headerlink" title="案例：字符串首字母大写"></a>案例：字符串首字母大写</h2><p>函数被执行了六次，每一次都把正则匹配的信息传递给函数<br>每一次匹配：[“good”,”g”] [“good”,”g”] …</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"good good study, day day up"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\b([a-zA-Z])[a-zA-Z]*\b/g</span>;</span><br><span class="line">str = str.replace(reg, (...arg) =&gt; {</span><br><span class="line">    <span class="keyword">var</span> [content, $<span class="number">1</span>] = arg;</span><br><span class="line">    $<span class="number">1</span> = $<span class="number">1.</span>toUpperCase();</span><br><span class="line">    content = content.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $<span class="number">1</span> + content;</span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中正则表达式--  (?=a)、先行断言、现行否定断言</title>
      <link href="/articl/12fc15b1.html"/>
      <url>/articl/12fc15b1.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/d702ed22f9ac4156b9b1c6c596d1a950.jpg" alt=""></p><a id="more"></a><p>(?=a) 代表什么意思！</p><blockquote><p>(?=a)非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。</p></blockquote><p>还有四个和这个相近的:</p><blockquote><p>(?!a)非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。<br>(?:a)非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。<br>(?&lt;=a)非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。<br>(?&lt;!a)非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。</p></blockquote><p>以上是官方的定义，比较难懂，我用自己的理解翻译了一下：</p><blockquote><p>(?=a) 表示我们需要匹配某样东西的前面。<br>(?!a) 表示我们需要不匹配某样东西。<br>(?:a) 表示我们需要匹配某样东西本身。<br>(?&lt;=a) 表示我们需要匹配某样东西的后面。<br>(?&lt;!a) 表示我们需要不匹配某样东西，与(?!a)方向相反。</p></blockquote><p>我的翻译可能还是不太容易理解，我们用代码来解释一下！</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中国人"</span>.replace(<span class="regexp">/我是(?=中国)/</span>, <span class="string">"rr"</span>)) <span class="comment">// 输出： 'rr中国人'，匹配的是中国前面的'我是'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中国人"</span>.replace(<span class="regexp">/(?!中国)/</span>, <span class="string">"rr"</span>)) <span class="comment">// 输出：'rr我是中国人'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中国人"</span>.replace(<span class="regexp">/(?:中国)/</span>, <span class="string">"rr"</span>)) <span class="comment">// 输出：'我是rr人'，匹配'中国'本身</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中国人"</span>.replace(<span class="regexp">/(?&lt;=中国)人/</span>, <span class="string">"rr"</span>)) <span class="comment">// 输出：'我是中国rr'，匹配的是中国后面的'人'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中国人"</span>.replace(<span class="regexp">/(?&lt;!中国)/</span>, <span class="string">"rr"</span>)) <span class="comment">// 输出：'rr我是中国人'</span></span><br></pre></td></tr></tbody></table></figure><p>Tips：(?!a)和(?&lt;!a)都是输出的 ‘rr我是中国人’，我的理解是，replace替换的时候匹配得是不包含中国的字符串，但是这个字符串又没有，那么js自动给加前面去了。</p><hr><h2 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h2><p>x(?=y)称为先行断言（Positive look-ahead），x只有在y前面才匹配，y不会被计入返回结果。比如，要匹配后面跟着百分号的数字，可以写成/\d+(?=%)/。</p><p>“先行断言”中，括号里的部分是不会返回的。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="string">'abc'</span>.match(<span class="regexp">/b(?=c)/</span>);</span><br><span class="line">m <span class="comment">// ["b"]</span></span><br></pre></td></tr></tbody></table></figure><p>上面的代码使用了先行断言，b在c前面所以被匹配，但是括号对应的c不会被返回。</p><h2 id="先行否定断言"><a href="#先行否定断言" class="headerlink" title="先行否定断言"></a>先行否定断言</h2><p>x(?!y)称为先行否定断言（Negative look-ahead），x只有不在y前面才匹配，y不会被计入返回结果。比如，要匹配后面跟的不是百分号的数字，就要写成/\d+(?!%)/。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/\d+(?!\.)/.exec(<span class="string">'3.14'</span>) <span class="comment">// ["14"]</span></span><br><span class="line"><span class="comment">// ["14"]</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，正则表达式指定，只有不在小数点前面的数字才会被匹配，因此返回的结果就是14。</p><p>“先行否定断言”中，括号里的部分是不会返回的。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="string">'abd'</span>.match(<span class="regexp">/b(?!c)/</span>);</span><br><span class="line">m <span class="comment">// ['b']</span></span><br></pre></td></tr></tbody></table></figure><p>上面的代码使用了先行否定断言，b不在c前面所以被匹配，而且括号对应的d不会被返回。</p><p>参考链接<a href="https://wangdoc.com/javascript/stdlib/regexp.html" target="_blank" rel="noopener">JavaScript教程</a></p><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中ECMAScript5中的数组方法。</title>
      <link href="/articl/a77b0dd1.html"/>
      <url>/articl/a77b0dd1.html</url>
      
        <content type="html"><![CDATA[<p>![](<a href="https://gitee.com/wu_zhiguang/blog/raw/master/img/37073a4791b24b428442d8a82fccc5d3" target="_blank" rel="noopener">https://gitee.com/wu_zhiguang/blog/raw/master/img/37073a4791b24b428442d8a82fccc5d3</a> (1).jpg)</p><a id="more"></a><p>但在开始详细介绍之前，很有必要对ECMAScript 5中的数组方法做一个概述。首先，大多数方法的第一个参数接收一个函数，并且对数组的每个元素(或一些元素)调用一次该函数。如果是稀疏数组，对不存在的元素不调用传递的函数。在大多数情况下，调用提供的函数使用三个参数:数组元素、元素的索引和数组本身。通常，只需要第一个参数值，可以忽略后两个参数。大多数ECMAScript 5数组方法的第一个参数是一个函数，第二个参数是可选的。如果有第二个参数，则调用的函数被看做是第二个参数的方法。也就是说，在调用函数时传递进去的第二个参数作为它的this关键字的值来使用。被调用的函数的返回值非常重要，但是不同的方法处理返回值的方式也不一样。ECMAScript 5中的数组方法都不会修改它们调用的原始数组。当然，传递给这些方法的函数是可以修改这些数组的。</p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>forEach()方法从头到尾遍历数组，每一个元素调用指定的函数。如上所述，传递的函数作为forEach()的第一个参数，然后forEach()使用三个参数调用该函数：数组元素、元素的索引和数组本身。如果只关心数组元素的值，可以编写只有一个参数的函数—额外的参数将忽略。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> sum += x;</span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(sum);    <span class="comment">// 10</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：forEach()无法在所有元素都传递给调用的函数之前终止遍历。也就是说，没有像for循环中使用的响应的break()语句。如果要提前终止，必须把forEach()方法放在一个try块中，并能抛出一个异常。如果forEach()调用的函数抛出foreach.break异常，循环会提前终止。</p><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>map()方法将调用的数组的每一个元素传递给指定的函数，并且返回一个数组，它包含该函数的返回值。例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">b = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x += <span class="number">1</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(b);    <span class="comment">//  [2, 3, 4]</span></span><br></pre></td></tr></tbody></table></figure><p>传递给map()的函数的调用方式和传递给forEach()的函数的调用方式一样，但出传递给map()的函数应该有返回值。注意，map()返回的是一个新数组：它不修改调用的数组。如果是稀疏数组，返回的也是相同方式的稀疏数组：它具有相同的长度，相同的缺失元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, , <span class="literal">undefined</span>, <span class="number">5</span>];</span><br><span class="line">b = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x += <span class="number">1</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//  [2, 3, 4, empty, NaN, 6]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>filter()方法返回的数组元素是调用的数组的一个子集。传递的函数是用来逻辑判定的：该函数返回true或者false。调用判定函数就像调用forEach()和map()一样，如果返回值为true或者能转化为true的值，那么传递给判定函数的元素就是这个子集的成员，他将被添加到一个作为返回值的数组中。例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">b = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">3</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(b)    <span class="comment">//  [4, 5, 6]</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：filter()会跳过稀疏数组中缺少的元素，它的返回数组总是稠密的。为了压缩稀疏数组的空缺，代码如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, , , ]</span><br><span class="line"><span class="keyword">var</span> aa = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(aa);   <span class="comment">//  [1, 2, 3]</span></span><br></pre></td></tr></tbody></table></figure><p>甚至，压缩空缺并删除Undefined和null元素，可以这样使用filter():</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> aaa = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x !== <span class="literal">undefined</span> &amp;&amp; x != <span class="literal">null</span>;</span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(aaa);    <span class="comment">//   [1, 2, 3, 6]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="every-和some"><a href="#every-和some" class="headerlink" title="every()和some()"></a>every()和some()</h2><p>every()和some()方法是数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true或者false。</p><ol><li>every()方法就像数学中的‘针对所有” 的量词:当且仅当针对数组中的所有元素调用判定函数都返回true,它才返回true :</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">10</span>;</span><br><span class="line">}));      <span class="comment">// true  所有的值都小于10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">5</span>;</span><br><span class="line">}));      <span class="comment">// false  不是所有的值都小于5</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>some()方法就像数学中的“存在” 的量词:当数组中至少有一个元素调用判定函数返回true,它就返回true;并且当且仅当数值中的所有元素调用判定函数都返回false，它才返回false:</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">10</span>;</span><br><span class="line">})); <span class="comment">// false   a中元素没有等于10的</span></span><br><span class="line"><span class="built_in">console</span>.log(a.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">})); <span class="comment">// true    a中包含有偶数</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：一旦every()和some()确认该返回什么值它们就会停止遍历数组元素。some()在判定函数第一次返回true后就返回true,但如果判定函数一直返回false， 它将会遍历整个数组。every( )恰好相反:它在判定函数第一次返回false后就返回false，但如果判定函数一直返回true，它将会遍历整个数组。注意，根据数学上的惯例，在空数组上调用时，every()返回true,some()返回false。</p><h2 id="reduce-和reduceRight"><a href="#reduce-和reduceRight" class="headerlink" title="reduce()和reduceRight()"></a>reduce()和reduceRight()</h2><p>reduce()和reduceRight()方法使用指定的函数将数组元素进行组合，生成单个值，这在函数式编程中是常见的操作，也可以称为“注入”和“折叠”。例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">}, <span class="number">0</span>); </span><br><span class="line"><span class="built_in">console</span>.log(sum);     <span class="comment">//  20  数组求和</span></span><br><span class="line"><span class="keyword">var</span> product = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">}, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(product); <span class="comment">//  600   数组求积</span></span><br><span class="line"><span class="keyword">var</span> max = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> (x &gt; y) ? x : y</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(max);     <span class="comment">//  5     求最大值</span></span><br></pre></td></tr></tbody></table></figure><p>reduce()需要两个参数，第一个是执行化简操作的函数，化简函数的任务就是用某种方法把两个值组合或化简为一个值，并返回化简后的值，在上面的例子中，函数通过加法、乘法、或取最大值的方法组合两个值。第二个（可选）的参数是一个传递给函数的初始值。</p><p>reduce()使用的函数与forEach( )和map( )使用的函数不同。比较熟悉的是，数组元素、元素的索引和数组本身将作为第2~4个参数传递给函数。第一个参数是到目前为止的化简操作累积的结果。第一次调用函数时，第一个参数是一个初始值，它就是传递给reduce()的第二个参数。在接下来的调用中，这个值就是上一次化简函数的返回值。在上面的第一个例子中，第一次调用化简函数时的参数是0和1。将两者相加并返回1。再次调用时的参数是1和2，它返回3。然后它计算3+3=6、6+4=10， 最后计算10+5=15。最后的值是15，reduce()返回这个值。</p><p>可能已经注意到了，上面第三次调用reduce()时只有一个参数:没有指定初始值。当不指定初始值调用reduce()时，它将使用数组的第一个 元素作为其初始值。这意味着第一次调用化简函数就使用了第一个和第二个数组元素作为其第一个和第二个参数。在上面求和与求积的例子中，可以省略初始值参数。</p><p>在空数组上，不带初始值参数调用reduce()将导致类型错误异常。如果调用它的时候只有一个值——数组只有一个元素并且没有指定初始值，或者有一个空数组并且指定一个初始值——reduce()只是简单地返回那个值而不会调用化简函数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">}, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//0</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//报错</span></span><br></pre></td></tr></tbody></table></figure><p>报错：<br><img src="https://img-blog.csdnimg.cn/20200506213645655.png" alt="在这里插入图片描述"></p><p>reduceRight()的工作原理和reduce()-样，不同的是它按照数组索引从高到低(从右到左)处理数组，而不是从低到高。如果化简操作的优先顺序是从右到左，你可能想会使用它。</p><h2 id="indexOf-和lastIndexOf"><a href="#indexOf-和lastIndexOf" class="headerlink" title="indexOf()和lastIndexOf()"></a>indexOf()和lastIndexOf()</h2><p>indexOf()和lastIndexOf()搜索整个数组中具有给定值的元素，返回找到第一个元素的索引或者如果没有找到就返回-1。indexOf()从头至尾搜索，而lastIndexOf()则反向搜索。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="number">1</span>));      <span class="comment">//   1  a[1]是1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.lastIndexOf(<span class="number">1</span>));  <span class="comment">//   4  a[4]是1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="number">4</span>));      <span class="comment">//  -1  a中没有4</span></span><br></pre></td></tr></tbody></table></figure><p>不同于本节描述的其他方法，index0f()和lastIndex0f()方法 不接收一个函数作为其参数。第一个参数是需要搜索的值，第二个参数是可选的:它指定数组中的一个索引，从那里开始搜索。如果省略该参数，index0f()从头开始搜索，而lastIndex0f()从末尾开始搜索。第二个参数也可以是负数，它代表相对数组末尾的偏移量，对于splice()方法:例如，- 1指定数组的最后一个元素。</p><p>如下函数在一个数组中搜索指定的值并返回包含所有匹配的数组索引的一个数组。它展示了如何运用indexOf()的第二个参数来查找除了第一个以外匹配的值。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在数组a中查找所有出现的x，并且返回一个包含匹配索引的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">a, x</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> result = [];             <span class="comment">//将会返回的数组</span></span><br><span class="line">    <span class="keyword">var</span> len = a.length;          <span class="comment">//待搜索数组的长度</span></span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;                 <span class="comment">//开始搜索的位置</span></span><br><span class="line">    <span class="keyword">while</span> (pos &lt; len) {          <span class="comment">//循环搜索多个数组</span></span><br><span class="line">        pos = a.indexOf(x, pos); <span class="comment">//搜索</span></span><br><span class="line">        <span class="keyword">if</span> (pos === <span class="number">-1</span>) <span class="keyword">break</span>;   <span class="comment">//未找到，就完成搜索</span></span><br><span class="line">        result.push(pos);        <span class="comment">//否则，在数组中存储索引</span></span><br><span class="line">        pos++;                   <span class="comment">//并从下一个位置开始</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;               <span class="comment">//返回包含索引的数组</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(find(a, <span class="number">2</span>));</span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：字符串也有indexOf()和lastIndexOf()方法，它们和数组方法的功能类似。<br><br><br><br><br>愿你的坚持终有收获。<br><br><br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的稀疏数组和密集数组</title>
      <link href="/articl/47ce2b06.html"/>
      <url>/articl/47ce2b06.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/77ed7b55b8fe417e8e65fa87a7ad2ed2.jpg" alt=""></p><a id="more"></a><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>概念</p><p>在一些后端语言中，如 C，数组内的值通常被分配在一系列连续的内存地址上，但是在 js 中，某些数组内存则不是连续的，所谓稀疏，顾名思义，不连续，存在一些空隙；<br><br><br>例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// (3) [empty × 3]</span></span><br></pre></td></tr></tbody></table></figure><p>通过以上方法创建数组，其中 Array(3) 中的参数 3 表示数组的长度，这个数组就是稀疏的，控制台输出一般带有 empty 字样，或者像下面这样创建数组：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,,<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// (3) [1, empty, 2]</span></span><br></pre></td></tr></tbody></table></figure><p>因为定义语句中两个逗号之间无字符，没有定义值，同样带有 empty 字样，代表稀疏数组，这里可以把 empty 理解为上面讲到的 空隙；<br><br></p><p>特点<br>接下来看一下稀疏数组特殊在什么地方，举个例子说明：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  <span class="comment">// 正常数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);  <span class="comment">// 稀疏数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, , <span class="number">3</span>];  <span class="comment">// 稀疏数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.length, arr2.length, arr3.length);</span><br><span class="line"><span class="comment">// 3 3 3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>], arr3[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// undefined undefined</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">    <span class="built_in">console</span>.log(arr1[i], arr2[i], arr3[i]);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 1 undefined 1</span></span><br><span class="line"><span class="comment">// 2 undefined undefined</span></span><br><span class="line"><span class="comment">// 3 undefined 3</span></span><br><span class="line">arr1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">arr2.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">});</span><br><span class="line"><span class="comment">// （无输出）</span></span><br><span class="line">arr3.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> <span class="keyword">in</span> arr3, <span class="number">1</span> <span class="keyword">in</span> arr3);</span><br><span class="line"><span class="comment">// true false</span></span><br></pre></td></tr></tbody></table></figure><p>总结一下，创建的稀疏数组，其长度（length）与定义长度值一致；空隙 值可以被单独访问到，并且不是之前出现的 empty 字样，而是 undefined，比如例子中出现 undefined 时都是使用 arr[i] 这样的索引直接访问方式；使用某些数组方法如 forEach() 时，会忽略掉空隙值，只处理正常值，所以也会使得 1 in arr3 值为 false，即数组中不存在该索引；<br><br><br>细想一下，js 这样处理的原因多半是去除不必要的性能开销，当数组相当大时，可以避免处理一些未初始化的值，但这样也同时使得开发中会出现一些问题，所以应尽量避免；<br><br><br>举个例子来查看一下性能如何：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'one'</span>);</span><br><span class="line"><span class="comment">// 密集数组</span></span><br><span class="line"><span class="built_in">Array</span>(...Array(<span class="number">1e5</span>)).forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    ;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'one'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'two'</span>);</span><br><span class="line"><span class="comment">// 稀疏数组</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1e5</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    ;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'two'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// one: 26.3759765625ms</span></span><br><span class="line"><span class="comment">// two: 5.701171875ms</span></span><br></pre></td></tr></tbody></table></figure><p>可以看出在处理较大数组时，稀疏数组确实能降低不少性能开销；<br><br></p><h2 id="密集数组"><a href="#密集数组" class="headerlink" title="密集数组"></a>密集数组</h2><p>概念</p><p>与稀疏相对应，则存在密集，定义也就是元素中不存在 空隙 值，其实密集数组基本就是平时常见的正常数组；</p><p>例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">arr2.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><p>以上都是一些定义密集数组的方法，并且数组中的值都能被正常访问或遍历处理；</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>运用时需要注意以下情况：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">0</span>], arr2[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// undefined undefined</span></span><br><span class="line">arr1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">})</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">arr2.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">})</span><br><span class="line"><span class="comment">// （无输出）</span></span><br></pre></td></tr></tbody></table></figure><p>即显式的声明值为 undefined 并不代表这个值就是之前提到的空隙值，虽然二者通过索引访问时的值都返回 undefined，但是其根本还是有区别的，显式声明过的是可以被遍历等操作访问的，不会被当成空隙值被忽略；</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>通常在很多情况下，我们想要直接声明一个数组并赋予其一些特定的初始值，并且为了避免问题，通常是希望申明为密集数组的，下面就介绍一些常用的方法或技巧：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="comment">// [1, 1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.fill().map(<span class="function">(<span class="params">x, i</span>) =&gt;</span> i);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="comment">// [0, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">Array</span>(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line"><span class="comment">// [undefined, undefined, undefined]</span></span><br><span class="line"><span class="comment">// 这样声明的是密集数组，不是稀疏的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>).join(<span class="string">'a'</span>).split(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr4);</span><br><span class="line"><span class="comment">// ['a', 'a', 'a']</span></span><br><span class="line"><span class="comment">// 注意定义数组长度比输出数组大 1</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详谈js中isPrototypeOf()、hasOwnProperty()、instanceof、propertyIsEnumerable()的区别。</title>
      <link href="/articl/d3af3faa.html"/>
      <url>/articl/d3af3faa.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/d88ecbcfd18a4cdf916f7ac8b500be31.jpg" alt=""></p><a id="more"></a><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> <span class="keyword">constructor</span></span><br></pre></td></tr></tbody></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>object</code> ：某个实例对象</p><p><code>constructor</code> ：某个构造函数</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><code>instanceof</code> 运算符用来检测 <code>constructor.prototype</code>是否存在于参数 <code>object</code> 的原型链上。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>{} </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params"></span>)</span>{} </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> C; <span class="comment">// true，因为 Object.getPrototypeOf(o) === C.prototype</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> D; <span class="comment">// false，因为 D.prototype 不在 o 的原型链上</span></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true，因为 Object.prototype.isPrototypeOf(o) 返回 true</span></span><br><span class="line">C.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true，同上</span></span><br><span class="line"></span><br><span class="line">C.prototype = {};</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">o2 <span class="keyword">instanceof</span> C; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> C; <span class="comment">// false，C.prototype 指向了一个空对象,这个空对象不在 o 的原型链上.</span></span><br><span class="line"></span><br><span class="line">D.prototype = <span class="keyword">new</span> C(); <span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> D();</span><br><span class="line">o3 <span class="keyword">instanceof</span> D; <span class="comment">// true</span></span><br><span class="line">o3 <span class="keyword">instanceof</span> C; <span class="comment">// true 因为 C.prototype 现在在 o3 的原型链上</span></span><br></pre></td></tr></tbody></table></figure><p><strong>需要注意的是，</strong>如果表达式 <code>obj instanceof Foo</code> 返回 <code>true</code>，则并不意味着该表达式会永远返回 <code>true</code>，因为 <code>Foo.prototype</code> 属性的值有可能会改变，改变之后的值很有可能不存在于 <code>obj</code> 的原型链上，这时原表达式的值就会成为 <code>false</code>。另外一种情况下，原表达式的值也会改变，就是改变对象 <code>obj</code> 的原型链的情况，虽然在目前的ES规范中，我们只能读取对象的原型而不能改变它，但借助于非标准的 <code>__proto__</code> 伪属性，是可以实现的。比如执行 <code>obj.__proto__ = {}</code> 之后，<code>obj instanceof Foo</code> 就会返回 <code>false</code> 了。</p><h2 id="isPrototypeOf-NaN"><a href="#isPrototypeOf-NaN" class="headerlink" title="isPrototypeOf()"></a>isPrototypeOf()</h2><p><strong><code>isPrototypeOf()</code> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener"><code>instanceof</code></a> 运算符不同。在表达式 “<code>object instanceof AFunction</code>“中，<code>object</code> 的原型链是针对 <code>AFunction.prototype</code> 进行检查的，而不是针对 <code>AFunction</code> 本身。</strong></p><p><code>isPrototypeOf</code>是用来判断指定对象<code>object1</code>是否存在于另一个对象<code>object2</code>的原型链中，是则返回true，否则返回false。<br>格式如下：<br>  object1.isPrototypeOf(object2);<br>  object1是一个对象的实例；<br>  object2是另一个将要检查其原型链的对象。<br>原型链可以用来在同一个对象类型的不同实例之间共享功能。<br>如果 object2 的原型链中包含object1，那么 <code>isPrototypeOf</code>方法返回 true。<br>如果 object2 不是一个对象或者 object1 没有出现在 object2 中的原型链中，<code>isPrototypeOf</code>方法将返回 false。</p><p>示例:<br>本示例展示了 <code>Baz.prototype, Bar.prototype, Foo.prototype</code>和 <code>Object.prototype</code> 在 <code>baz</code> 对象的原型链上：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>{}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>{}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Baz</span>(<span class="params"></span>) </span>{}</span><br><span class="line"></span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype);</span><br><span class="line">Baz.prototype = <span class="built_in">Object</span>.create(Bar.prototype);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> Baz();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Baz.prototype.isPrototypeOf(baz)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Bar.prototype.isPrototypeOf(baz)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.isPrototypeOf(baz)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.isPrototypeOf(baz)); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><br><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty()"></a>hasOwnProperty()</h2><p><code>hasOwnProperty()</code> 检查对象自身中是否含有该属性。使用该方法时，只有对象自身中含有属性时才会返回true。</p><p>格式如下：<br><code>object.hasOwnProperty(proName);</code><br>判断proName的名称是不是object对象的一个属性或对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = {</span><br><span class="line">            x: <span class="number">1</span></span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">console</span>.log(a.hasOwnProperty(<span class="string">"x"</span>)); <span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(a.hasOwnProperty(<span class="string">"y"</span>)); <span class="comment">//false</span></span><br><span class="line">        <span class="built_in">console</span>.log(a.hasOwnProperty(<span class="string">"toString"</span>)); <span class="comment">//false toString是继承属性</span></span><br></pre></td></tr></tbody></table></figure><br><h2 id="propertyIsEnumerable-NaN"><a href="#propertyIsEnumerable-NaN" class="headerlink" title="propertyIsEnumerable()"></a>propertyIsEnumerable()</h2><p><code>propertyIsEnumerable()</code>是<code>hasOwnProperty()</code>的增强版，只有检侧到是目有属性且这个属性的可枚举性(enumerable attribute)为true时它才返回true.某些内置属性是不可枚举的。通常由JavaScript代码创建的属性都是可枚举的。除非调用``Object.defineProperty() `方法来修改。</p><p><code>propertyIsEnumerable()</code>方法返回一个布尔值，表示指定的属性是否可枚举。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><blockquote><p>obj.propertyIsEnumerable(prop)</p></blockquote><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><blockquote><p>prop<br>   需要测试的属性名。</p></blockquote><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><blockquote><p>用来表示指定的属性名是否可枚举的布尔值。</p></blockquote><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><blockquote><p>每个对象都有一个 <code>propertyIsEnumerable</code>方法。此方法可以确定对象中指定的属性是否可以被 for…in<br>循环枚举，但是通过原型链继承的属性除外。如果对象没有指定的属性，则此方法返回 false。</p></blockquote><p>例子</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = {};</span><br><span class="line"><span class="keyword">const</span> array1 = [];</span><br><span class="line">object1.property1 = <span class="number">42</span>;</span><br><span class="line">array1[<span class="number">0</span>] = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object1.propertyIsEnumerable(<span class="string">'property1'</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.propertyIsEnumerable(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.propertyIsEnumerable(<span class="string">'length'</span>));</span><br><span class="line"><span class="comment">// expected output: false</span></span><br></pre></td></tr></tbody></table></figure><p>下面的例子演示了用户自定义对象和内置对象上属性可枚举性的区别.</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'is enumerable'</span>];</span><br><span class="line"></span><br><span class="line">a.propertyIsEnumerable(<span class="number">0</span>);        <span class="comment">// 返回 true</span></span><br><span class="line">a.propertyIsEnumerable(<span class="string">'length'</span>); <span class="comment">// 返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.propertyIsEnumerable(<span class="string">'random'</span>); <span class="comment">// 返回 false</span></span><br><span class="line"><span class="keyword">this</span>.propertyIsEnumerable(<span class="string">'Math'</span>);   <span class="comment">// 返回 false</span></span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript --- forEach() 方法详解</title>
      <link href="/articl/6ea417ec.html"/>
      <url>/articl/6ea417ec.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/bfa60f4389414aedbb61140ee5cdb8ab.jpg" alt=""></p><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</p></blockquote><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><blockquote><p>callback<br>   为数组中每个元素执行的函数，该函数接收一至三个参数：<br>currentValue<br>   数组中正在处理的当前元素。<br>index (可选)<br>    数组中正在处理的当前元素的索引。<br>array (可选)<br>  forEach() 方法正在操作的数组。<br>thisArg (可选)<br> 可选参数。当执行回调函数 callback 时，用作 this 的值。</p></blockquote><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><blockquote><p>undefined。</p></blockquote><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>   forEach() 方法按升序为数组中含有效值的每一项执行一次 callback 函数，那些已删除或者未初始化的项将被跳过（例如在稀疏数组上）。<br>  可依次向 callback 函数传入三个参数：<br>    1、数组当前项的值<br>    2、数组当前项的索引<br>    3、数组对象本身<br>  如果 thisArg 参数有值，则每次 callback 函数被调用时，this 都会指向 thisArg 参数。如果省略了 thisArg 参数，或者其值为 null 或 undefined，this 则指向全局对象。按照函数观察到 this 的常用规则，callback 函数最终可观察到 this 值。<br>  forEach() 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach() 遍历到他们那一刻的值。已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了（例如使用 shift()），之后的元素将被跳过<br>  forEach() 为每个数组元素执行一次 callback 函数；与 map() 或者 reduce() 不同的是，它总是返回 undefined 值，并且不可链式调用。其典型用例是在一个调用链的最后执行副作用（side effects，函数式编程上，指函数进行 返回结果值 以外的操作）。<br>  forEach() 被调用时，不会改变原数组，也就是调用它的数组（尽管 callback 函数在被调用时可能会改变原数组）。（译注：此处说法可能不够明确，具体可参考EMCA语言规范：’forEach does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.’，即 forEach 不会直接改变调用它的对象，但是那个对象可能会被 callback 函数改变。）</p></blockquote><p><strong><span>注意</span>： 除了抛出异常以外，没有办法中止或跳出 forEach() 循环。如果你需要中止或跳出循环，forEach() 方法不是应当使用的工具。</strong></p><h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><p>3 和 7 之间空缺的数组单元未被 forEach() 调用 callback 函数，或进行任何其他操作。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arraySparse = [<span class="number">1</span>,<span class="number">3</span>,,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> numCallbackRuns = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">arraySparse.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>{</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">  numCallbackRuns++;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"numCallbackRuns: "</span>, numCallbackRuns);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// numCallbackRuns: 3</span></span><br></pre></td></tr></tbody></table></figure><br>将 for 循环转换为 forEach<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [<span class="string">'item1'</span>, <span class="string">'item2'</span>, <span class="string">'item3'</span>];</span><br><span class="line"><span class="keyword">const</span> copy = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++) {</span><br><span class="line">  copy.push(items[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line">items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">  copy.push(item);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br>打印出数组的内容<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">element, index, array</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a['</span> + index + <span class="string">'] = '</span> + element);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意索引 2 被跳过了，因为在数组的这个位置没有项</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, , <span class="number">9</span>].forEach(logArrayElements);</span><br><span class="line"><span class="comment">// logs:</span></span><br><span class="line"><span class="comment">// a[0] = 2</span></span><br><span class="line"><span class="comment">// a[1] = 5</span></span><br><span class="line"><span class="comment">// a[3] = 9</span></span><br></pre></td></tr></tbody></table></figure><br>如果数组在迭代时被修改了，则其他元素会被跳过。<p>  下面的例子会输出 “one”, “two”, “four”。当到达包含值 “two” 的项时，整个数组的第一个项被移除了，这导致所有剩下的项上移一个位置。因为元素 “four” 正位于在数组更前的位置，所以 “three” 会被跳过。 forEach() 不会在迭代之前创建数组的副本。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> words = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>];</span><br><span class="line">words.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(word);</span><br><span class="line">  <span class="keyword">if</span> (word === <span class="string">'two'</span>) {</span><br><span class="line">    words.shift();</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// four</span></span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中keys()和getOwnPropertyNames()详解。</title>
      <link href="/articl/9d1d8417.html"/>
      <url>/articl/9d1d8417.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/34eecd91b0654f22af2538bc7c380cc3.jpg" alt=""></p><a id="more"></a><p>   除了for/in循环之外，ECMAScript 5定义了两个用以枚举属性名称的函数。第一个是Object.keys(), 它返回一个数组，这个数组由对象中可枚举的自有属性的名称组成。</p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><blockquote><p>Object.keys(obj)</p></blockquote><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><blockquote><p>obj<br>    要返回其枚举自身属性的对象。</p></blockquote><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><blockquote><p>一个表示给定对象的所有可枚举属性的字符串数组。</p></blockquote><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>Object.keys 返回一个所有元素为字符串的数组，其元素来自于从给定的object上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple array</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr)); <span class="comment">// console: ['0', '1', '2']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object</span></span><br><span class="line"><span class="keyword">var</span> obj = { <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> };</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// console: ['0', '1', '2']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object with random key ordering</span></span><br><span class="line"><span class="keyword">var</span> anObj = { <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> };</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(anObj)); <span class="comment">// console: ['2', '7', '100']</span></span><br></pre></td></tr></tbody></table></figure><p>   要在原生不支持的旧环境中添加兼容的Object.keys，请复制以下代码段</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Object</span>.keys) {</span><br><span class="line">  <span class="built_in">Object</span>.keys = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty,</span><br><span class="line">        hasDontEnumBug = !({<span class="attr">toString</span>: <span class="literal">null</span>}).propertyIsEnumerable(<span class="string">'toString'</span>),</span><br><span class="line">        dontEnums = [</span><br><span class="line">          <span class="string">'toString'</span>,</span><br><span class="line">          <span class="string">'toLocaleString'</span>,</span><br><span class="line">          <span class="string">'valueOf'</span>,</span><br><span class="line">          <span class="string">'hasOwnProperty'</span>,</span><br><span class="line">          <span class="string">'isPrototypeOf'</span>,</span><br><span class="line">          <span class="string">'propertyIsEnumerable'</span>,</span><br><span class="line">          <span class="string">'constructor'</span></span><br><span class="line">        ],</span><br><span class="line">        dontEnumsLength = dontEnums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>{</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> obj !== <span class="string">'function'</span> || obj === <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Object.keys called on non-object'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) {</span><br><span class="line">        <span class="keyword">if</span> (hasOwnProperty.call(obj, prop)) result.push(prop);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (hasDontEnumBug) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; dontEnumsLength; i++) {</span><br><span class="line">          <span class="keyword">if</span> (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i]);</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">  })()</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>   上面的代码在IE7（也许IE8也是）下有个问题，就是如果传入一个来自其他 window 对象下的对象时，不可枚举的属性也会获取到。</p><hr><p>   ECMAScript 5中第二E个枚举属性的函数是Object.getOwnPropertyNames()，它和Ojbect.keys()似，只是它返回对象的所有自有属性的名称，而不仅仅是可枚举的属性。在ECMAScript 3中是无法实现的类似的函数的，因为ECMAScript 3中没有提供任何方法来获取对象不可枚举的属性。</p><blockquote><p>Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>Object.getOwnPropertyNames(obj)</p></blockquote><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><blockquote><p>obj<br>   一个对象，其自身的可枚举和不可枚举属性的名称被返回。</p></blockquote><h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><blockquote><p>在给定对象上找到的自身属性对应的字符串数组。</p></blockquote><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><blockquote><p>Object.getOwnPropertyNames() 返回一个数组，该数组对元素是 obj自身拥有的枚举或不可枚举属性名称字符串。<br>数组中枚举属性的顺序与通过 for…in 循环（或 Object.keys）迭代该对象属性时一致。数组中不可枚举属性的顺序未定义。</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(arr).sort()); <span class="comment">// ["0", "1", "2", "length"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类数组对象</span></span><br><span class="line"><span class="keyword">var</span> obj = { <span class="number">0</span>: <span class="string">"a"</span>, <span class="number">1</span>: <span class="string">"b"</span>, <span class="number">2</span>: <span class="string">"c"</span>};</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj).sort()); <span class="comment">// ["0", "1", "2"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Array.forEach输出属性名和属性值</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, idx, array</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(val + <span class="string">" -&gt; "</span> + obj[val]);</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 0 -&gt; a</span></span><br><span class="line"><span class="comment">// 1 -&gt; b</span></span><br><span class="line"><span class="comment">// 2 -&gt; c</span></span><br></pre></td></tr></tbody></table></figure><p>   如果你只要获取到可枚举属性，查看Object.keys或用for…in循环（还会获取到原型链上的可枚举属性，不过可以使用hasOwnProperty()方法过滤掉）。getOwnPropertyNames()并不会获取到原型链上的属性。<br>如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ParentClass</span>(<span class="params"></span>) </span>{}</span><br><span class="line">ParentClass.prototype.inheritedMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChildClass</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">this</span>.prop = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ChildClass.prototype = <span class="keyword">new</span> ParentClass;</span><br><span class="line">ChildClass.prototype.prototypeMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{};</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyNames(</span><br><span class="line">    <span class="keyword">new</span> ChildClass()  <span class="comment">// ["prop", "method"]</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js简单实现轮播图</title>
      <link href="/articl/98cfcd17.html"/>
      <url>/articl/98cfcd17.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/5ddc1a4438e546e0bd480c83cc37b5c1.jpg" alt=""></p><a id="more"></a><br>index.html<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    * {</span><br><span class="line">        padding: <span class="number">0</span>px;</span><br><span class="line">        margin: <span class="number">0</span>px;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    #out {</span><br><span class="line">        width: <span class="number">520</span>px;</span><br><span class="line">        height: <span class="number">333</span>px;</span><br><span class="line">        background-color: #bfa;</span><br><span class="line">        margin: <span class="number">50</span>px auto;</span><br><span class="line">        padding: <span class="number">10</span>px <span class="number">0</span>px;</span><br><span class="line">        position: relative;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    #imglist {</span><br><span class="line">        list-style: none;</span><br><span class="line">        <span class="comment">/* width: 2600px; */</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        left: <span class="number">0</span>px;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    #imglist li {</span><br><span class="line">        float: left;</span><br><span class="line">        margin: <span class="number">0</span>px <span class="number">10</span>px;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    #navdiv {</span><br><span class="line">        position: absolute;</span><br><span class="line">        bottom: <span class="number">15</span>px;</span><br><span class="line">        <span class="comment">/* left: 200px; */</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    #navdiv a {</span><br><span class="line">        float: left;</span><br><span class="line">        width: <span class="number">15</span>px;</span><br><span class="line">        height: <span class="number">15</span>px;</span><br><span class="line">        background-color: red;</span><br><span class="line">        margin: <span class="number">0</span> <span class="number">5</span>px;</span><br><span class="line">        opacity: <span class="number">0.5</span>;</span><br><span class="line">        border-radius: <span class="number">50</span>%;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    #navdiv a:hover {</span><br><span class="line">        background-color: #686269;</span><br><span class="line">    }</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="js/</span>tool.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    window.onload = function() {</span></span><br><span class="line"><span class="string">        var img = document.getElementsByTagName("</span>img<span class="string">");</span></span><br><span class="line"><span class="string">        var imglist = document.getElementById("</span>imglist<span class="string">");</span></span><br><span class="line"><span class="string">        imglist.style.width = 520 * img.length + "</span>px<span class="string">";</span></span><br><span class="line"><span class="string">        // 设置导航块居中</span></span><br><span class="line"><span class="string">        var navdiv = document.getElementById("</span>navdiv<span class="string">");</span></span><br><span class="line"><span class="string">        var out = document.getElementById("</span>out<span class="string">");</span></span><br><span class="line"><span class="string">        navdiv.style.left = (out.offsetWidth - navdiv.offsetWidth) / 2 + "</span>px<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var index = 0;</span></span><br><span class="line"><span class="string">        var arra = document.getElementsByTagName("</span>a<span class="string">");</span></span><br><span class="line">        arra[index].style.backgroundColor = "#686269";</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为每一个超链接添加单机响应事件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arra.length; i++) {</span><br><span class="line">            arra[i].num = i;</span><br><span class="line">            arra[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                <span class="comment">// 当我们手动去切换的时候，去停止轮播图</span></span><br><span class="line">                clearInterval(timer);</span><br><span class="line">                <span class="comment">// 为每个超链接做标记</span></span><br><span class="line">                index = <span class="keyword">this</span>.num;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// imglist.style.left = -520 * index + "px";</span></span><br><span class="line">                setA();</span><br><span class="line">                move(imglist, <span class="string">"left"</span>, <span class="number">-520</span> * index, <span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                    <span class="comment">// 手动点击切换结束之后，再次开启定时器。</span></span><br><span class="line">                    autoChenge();</span><br><span class="line"></span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        autoChenge();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setA</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="comment">// 判断索引是否是最后一张</span></span><br><span class="line">            <span class="keyword">if</span> (index &gt;= arra.length) {</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//如果为最后一张，直接将imglist的left设置为0，</span></span><br><span class="line">                imglist.style.left = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arra.length; i++) {</span><br><span class="line">                <span class="comment">// 设置为空，防止设置颜色之后，在内联样式里优先级过高，</span></span><br><span class="line">                arra[i].style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">            }</span><br><span class="line">            arra[index].style.backgroundColor = <span class="string">"#686269"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 设置定时器</span></span><br><span class="line">        <span class="comment">// 定义定时器标识</span></span><br><span class="line">        <span class="keyword">var</span> timer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">autoChenge</span>(<span class="params"></span>) </span>{</span><br><span class="line">            timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                index++;</span><br><span class="line">                <span class="comment">//  %= 算法 判断index的长度是否超过img的长度，如果超过就返回0</span></span><br><span class="line">                index %= img.length;</span><br><span class="line">                move(imglist, <span class="string">"left"</span>, <span class="number">-520</span> * index, <span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                    setA();</span><br><span class="line">                });</span><br><span class="line">            }, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;div id="out"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul id="imglist"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;&lt;img src="img/</span><span class="number">1.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;img src="</span>img/<span class="number">2.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;img src="</span>img/<span class="number">3.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;img src="</span>img/<span class="number">4.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;img src="</span>img/<span class="number">5.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&lt;img src="</span>img/<span class="number">1.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;div id="</span>navdiv<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="</span>javascript:;<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="</span>javascript:;<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="</span>javascript:;<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="</span>javascript:;<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="</span>javascript:;<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>tool.js</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现动画效果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj, arrtr, target, speed, callback</span>) </span>{</span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">// 获取当前位置</span></span><br><span class="line">    <span class="keyword">var</span> current = <span class="built_in">parseInt</span>(getstyle(obj, arrtr));</span><br><span class="line">    <span class="comment">// 判断speed正负</span></span><br><span class="line">    <span class="comment">// 0-800 向左移</span></span><br><span class="line">    <span class="comment">//800-0 向右移</span></span><br><span class="line">    <span class="keyword">if</span> (current &gt; target) {</span><br><span class="line">        speed = -speed;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 将timer作为属性 给自身的obj元素。</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> oldvalue = <span class="built_in">parseInt</span>(getstyle(obj, arrtr));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newvalue = oldvalue + speed;</span><br><span class="line">        <span class="comment">// 向左移时，需要判断newvalue是否小于target</span></span><br><span class="line">        <span class="comment">// 向右移时，需要判断newvalue是否大于target</span></span><br><span class="line">        <span class="keyword">if</span> ((speed &lt; <span class="number">0</span> &amp;&amp; newvalue &lt; target) || (speed &gt; <span class="number">0</span> &amp;&amp; newvalue &gt; target)) {</span><br><span class="line">            newvalue = target;</span><br><span class="line">        }</span><br><span class="line">        obj.style[arrtr] = newvalue + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">if</span> (newvalue == target) {</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 如果有回调函数就调用，没有则不调用。</span></span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// return false;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素的样式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getstyle</span>(<span class="params">obj, name</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) {</span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">null</span>)[name];</span><br><span class="line"></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript元素类的操作总结。</title>
      <link href="/articl/d543c76c.html"/>
      <url>/articl/d543c76c.html</url>
      
        <content type="html"><![CDATA[<p>I<img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/7e750125367b4afca94b08fb2e19d6da.jpg" alt=""></p><a id="more"></a><br>封装成方法如下：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  定义一个函数 addClass() 用来向元素中添加指定的class属性值</span></span><br><span class="line"><span class="comment">            参数：</span></span><br><span class="line"><span class="comment">                obj ：要添加class属性值的元素</span></span><br><span class="line"><span class="comment">                cn ： 套添加的class属性      为字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">obj, cn</span>) </span>{</span><br><span class="line">            <span class="keyword">if</span> (!hasClass(obj, cn)) {</span><br><span class="line">                obj.className += <span class="string">" "</span> + cn;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 判断一个class中是否含有指定的class属性值</span></span><br><span class="line"><span class="comment">        * 参数：</span></span><br><span class="line"><span class="comment">                obj ：要检查的元素</span></span><br><span class="line"><span class="comment">                cn ： 检查的class属性         为字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">obj, cn</span>) </span>{</span><br><span class="line">            <span class="comment">// 检查obj中是否含有cn</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + cn + <span class="string">"\\b"</span>);</span><br><span class="line">            <span class="keyword">return</span> reg.test(obj.className);</span><br><span class="line"></span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 移除指定元素中指定的class属性值</span></span><br><span class="line"><span class="comment">         * 参数：</span></span><br><span class="line"><span class="comment">                obj ：要检查的元素</span></span><br><span class="line"><span class="comment">                cn ： 检查的class属性           为字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">moveClass</span>(<span class="params">obj, cn</span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + cn + <span class="string">"\\b"</span>);</span><br><span class="line">            obj.className = obj.className.replace(reg, <span class="string">""</span>);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 切换class属性值</span></span><br><span class="line"><span class="comment">        * 参数：</span></span><br><span class="line"><span class="comment">                obj ：要检查的元素</span></span><br><span class="line"><span class="comment">                cn  ：检查的class属性          为字符串</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span>(<span class="params">obj, cn</span>) </span>{</span><br><span class="line">            <span class="keyword">if</span> (hasClass(obj, cn)) {</span><br><span class="line">                moveClass(obj, cn);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                addClass(obj, cn);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        };</span><br></pre></td></tr></tbody></table></figure><br>愿你的坚持终有收获。<br><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ---鼠标拖拽元素问题总结</title>
      <link href="/articl/a5532de6.html"/>
      <url>/articl/a5532de6.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/6982b2ca728b489ead7ed596fe50552c.jpg" alt=""></p><a id="more"></a><p>大致分为三个步骤：</p><ol><li>鼠标摁下 onmousedown</li><li>鼠标移动 onmousemove</li><li>鼠标抬起 onmouseup</li></ol><p><strong>注意的一点是 onmousemove事件和onmouseup事件是在onmousedown事件里面的</strong></p><h2 id="代码如下（不支持IE8及以下浏览器）：代码一"><a href="#代码如下（不支持IE8及以下浏览器）：代码一" class="headerlink" title="代码如下（不支持IE8及以下浏览器）：代码一"></a>代码如下（不支持IE8及以下浏览器）：代码一</h2><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body {</span><br><span class="line">            height: <span class="number">3000</span>px;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        #box1 {</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: #bbffaa;</span><br><span class="line">            position: absolute;</span><br><span class="line">            margin-left: <span class="number">100</span>px;</span><br><span class="line">            z-index: <span class="number">33</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        #box2 {</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: <span class="number">300</span>px;</span><br><span class="line">            left: <span class="number">300</span>px;</span><br><span class="line">        }</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function() {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> box1 = document.getElementById(<span class="string">"box1"</span>);</span><br><span class="line">            dary(box1);</span><br><span class="line">            dary(box2);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="function">function <span class="title">dary</span><span class="params">(obj)</span> </span>{</span><br><span class="line">            <span class="comment">// 为box设置鼠标按下事件  </span></span><br><span class="line">            obj.onmousedown = function(event) {</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 解决 event兼容性</span></span><br><span class="line">                event = event || window.event;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//元素上偏移量 = 鼠标.clientY-元素。offsetTop +元素的上外边距 </span></span><br><span class="line">                <span class="comment">//元素左偏移量 = 鼠标.clientX-元素。offsetleft +元素的下外边距</span></span><br><span class="line">                <span class="keyword">var</span> ot = event.pageY - obj.offsetTop + parseInt(getComputedStyle(obj, <span class="keyword">null</span>)[<span class="string">"margin-top"</span>]);</span><br><span class="line">                <span class="keyword">var</span> ol = event.pageX - obj.offsetLeft + parseInt(getComputedStyle(obj, <span class="keyword">null</span>)[<span class="string">"margin-left"</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置鼠标在box上的移动事件</span></span><br><span class="line">                document.onmousemove = function(event) {</span><br><span class="line">                    event = event || window.event;</span><br><span class="line">                    <span class="comment">// 获取鼠标的位置坐标</span></span><br><span class="line">                    <span class="keyword">var</span> top = event.pageY - ot;</span><br><span class="line">                    <span class="keyword">var</span> left = event.pageX - ol;</span><br><span class="line">                    <span class="comment">// 设置元素的位置</span></span><br><span class="line">                    obj.style.top = top + <span class="string">"px"</span>;</span><br><span class="line">                    obj.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">                };</span><br><span class="line">                <span class="comment">// 设置鼠标在box上的抬起事件</span></span><br><span class="line">                document.onmouseup = function() {</span><br><span class="line">                    <span class="comment">// 当鼠标抬起时，取消onmousemove事件</span></span><br><span class="line">                    document.onmousemove = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 当鼠标抬起时，取消onmouseup事件</span></span><br><span class="line">                    document.onmouseup = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                };</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎汇总的搜索内容，</span></span><br><span class="line"><span class="comment">                        此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，</span></span><br><span class="line"><span class="comment">                        如果不希望发生这个行为 ，则可以通过return false来取消默认行为</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">                        该方法解决对IE8及以下浏览器 不适用， 其他都好使</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;asdfasd&lt;/p&gt;</span><br><span class="line">    &lt;div id="box1"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id="box2"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><br><hr><br><br><br>愿你的坚持终有收获。<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ---事件的委派</title>
      <link href="/articl/e9bff574.html"/>
      <url>/articl/e9bff574.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/f2aedd087b1941baa9f31ee14591f6c7.jpg" alt=""></p><a id="more"></a><br><br><ul><li>指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的时间触发时，会一直冒泡到祖先元素。从而通过祖先元素的响应事件来处理事件。</li><li>事件委派是利用了冒泡，通过委派可以减少事件的绑定次数，提高程序的性能。</li></ul><p>target：<br>target 事件属性可返回事件的目标节点（触发该事件的节点），如生成事件的元素、文档或窗口。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function() {</span><br><span class="line">            <span class="keyword">var</span> lis = document.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">            <span class="keyword">var</span> u1 = document.getElementById(<span class="string">"u1"</span>);</span><br><span class="line">            <span class="keyword">var</span> btn = document.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">            <span class="comment">// for (var i = 0; i &lt; lis.length; i++) {</span></span><br><span class="line">            <span class="comment">//     lis[i].onclick = function() {</span></span><br><span class="line">            <span class="comment">//         alert("我是超链接");</span></span><br><span class="line">            <span class="comment">//     }</span></span><br><span class="line">            <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">            u1.onclick = function(event) {</span><br><span class="line">                <span class="comment">//解决event浏览器兼容性问题</span></span><br><span class="line">                event = event || window.event;</span><br><span class="line">                <span class="comment">//如果触发的事件是我们期望的元素，否则不执行。</span></span><br><span class="line">                <span class="comment">//创建一个正则表达式，判断一下含有link的class才能被触发。</span></span><br><span class="line">                <span class="keyword">var</span> patt1 = /[link]/ig;</span><br><span class="line">                <span class="keyword">if</span> (patt1.test(event.target.className)) {</span><br><span class="line">                    alert(<span class="string">"我是超链接"</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            btn.onclick = function() {</span><br><span class="line">                <span class="keyword">var</span> li = document.createElement(<span class="string">"li"</span>);</span><br><span class="line">                li.innerHTML = <span class="string">"&lt;a href='javascript: ;'class='link'&gt;新的超链接&lt;/a&gt;"</span>;</span><br><span class="line">                u1.appendChild(li);</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id="btn"&gt;点击&lt;/button&gt;</span><br><span class="line">    &lt;ul id=<span class="string">"u1"</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="javascript:;" class="s link s"&gt;超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="javascript:;" class="link"&gt;超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="javascript:;" class="link"&gt;超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="javascript:;" class="link"&gt;超链接&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中 --- 绑定多事件问题  浏览器兼容性解决方法。</title>
      <link href="/articl/93dacab2.html"/>
      <url>/articl/93dacab2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/638e2a86cc874421a2228f49e3d543d1.jpg" alt=""></p><a id="more"></a><br><br>  为一个元素绑定多事件有两种方法：addEventListener（）和 attachEvent()<p>addEventListener（） —IE8及以下不支持</p><ul><li>通过这个方法也可以为元素绑定响应函数</li><li>参数：<br>  1.事件的字符串，不要on<br>  2.回调函数，当事件触发时该函数会被调用<br>  3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false</li><li>使用addEventListener () 可以同时为一个元素的相同事件同时绑定多个响应函数，这样当事件被触发时，响应函数将会按照函数的绑定顺序执行。</li></ul><p>attachEvent()</p><ul><li>在IE8中可以使用attachEvent()来绑定事件</li><li>参数：<br>  1.事件的字符串，要on。<br>  2.回调函数。</li><li>这个方法也可以同时为一个事件绑定多个处理函数。<br>不同的是它是后绑定的先执行，执行顺序和addEventListener()相反。br</li></ul><br>  但是这样就出现了浏览器不兼容的问题，我们可以自己定义一个方法来解决该问题。<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function() {</span><br><span class="line">            <span class="keyword">var</span> btn = document.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">            <span class="comment">// btn.onclick = function() {</span></span><br><span class="line">            <span class="comment">//     alert("1");</span></span><br><span class="line">            <span class="comment">// };</span></span><br><span class="line">            <span class="comment">// btn.onclick = function() {</span></span><br><span class="line">            <span class="comment">//     alert("2");</span></span><br><span class="line">            <span class="comment">// };</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// btn.addEventListener("click", function() {</span></span><br><span class="line">            <span class="comment">//     alert("1");</span></span><br><span class="line">            <span class="comment">// }, false);</span></span><br><span class="line">            <span class="comment">// btn.addEventListener("click", function() {</span></span><br><span class="line">            <span class="comment">//     alert("2");</span></span><br><span class="line">            <span class="comment">// }, false);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// btn.attachEvent("onclick", function() {</span></span><br><span class="line">            <span class="comment">//     alert("1");</span></span><br><span class="line">            <span class="comment">// });</span></span><br><span class="line">            <span class="comment">// btn.attachEvent("onclick", function() {</span></span><br><span class="line">            <span class="comment">//     alert("2");</span></span><br><span class="line">            <span class="comment">// });</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// btn.addEventListener("click", function () {</span></span><br><span class="line">            <span class="comment">//     alert(this);</span></span><br><span class="line">            <span class="comment">// }, false);</span></span><br><span class="line">            <span class="comment">// btn.attachEvent("onclick", function() {</span></span><br><span class="line">            <span class="comment">//     alert(this);</span></span><br><span class="line">            <span class="comment">// });</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 测试this是指向的谁</span></span><br><span class="line">            <span class="comment">// bing(btn, "click", function() {</span></span><br><span class="line">            <span class="comment">//     alert(this);</span></span><br><span class="line">            <span class="comment">// });</span></span><br><span class="line"></span><br><span class="line">            bing(btn, <span class="string">"click"</span>, function() {</span><br><span class="line">                alert(<span class="string">"1"</span>);</span><br><span class="line">            });</span><br><span class="line">            bing(btn, <span class="string">"click"</span>, function() {</span><br><span class="line">                alert(<span class="string">"2"</span>);</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我们可以自己定义一个函数，来兼容这个问题：</span></span><br><span class="line">        <span class="comment">//     addEventListener()中的this，是绑定事件的对象。</span></span><br><span class="line">        <span class="comment">//     attachEvent()    中的this，是window。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数：</span></span><br><span class="line">        <span class="comment">//       obj       绑定的事件对象</span></span><br><span class="line">        <span class="comment">//       eventStr  事件的字符串(不要on)</span></span><br><span class="line">        <span class="comment">//       callback  回调函数</span></span><br><span class="line"></span><br><span class="line">        <span class="function">function <span class="title">bing</span><span class="params">(obj, eventStr, callback)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (obj.addEventListener) {</span><br><span class="line">                obj.addEventListener(eventStr, callback, <span class="keyword">false</span>)</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 创建一个匿名函数来调用callback，去指定this指向的元素</span></span><br><span class="line">                obj.attachEvent(<span class="string">"on"</span> + eventStr, function() {</span><br><span class="line">                    callback.call(obj);</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        };</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id="btn"&gt;点击&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><br><br>愿你的坚持终有收获。<br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ---div跟随鼠标移动</title>
      <link href="/articl/640b2ed0.html"/>
      <url>/articl/640b2ed0.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/7e789bd443864d498691b293299f68fc.jpg" alt=""></p><a id="more"></a><br><br><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        body {</span></span><br><span class="line"><span class="regexp">            height: 3000px;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        #box {</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            height: 100px;</span></span><br><span class="line"><span class="regexp">            background-color: #bfa;</span></span><br><span class="line"><span class="regexp">            /</span>* 开启box的绝对定位 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="comment">// 获取box元素</span></span><br><span class="line">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为window绑定鼠标事件</span></span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>{</span><br><span class="line">                <span class="comment">// 解决兼容性问题</span></span><br><span class="line">                event = event || <span class="built_in">window</span>.event;</span><br><span class="line">                <span class="comment">//获取滚动条滚动的距离</span></span><br><span class="line">                <span class="comment">//chromer认为浏览器的滚动条是body的，可以通过Body.scrollTop来获取</span></span><br><span class="line">                <span class="comment">// 火狐等浏览器认为浏览器的滚动条是html的</span></span><br><span class="line">                <span class="comment">// 所以我们就提前进行一个判断</span></span><br><span class="line">                <span class="keyword">var</span> st = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">                <span class="keyword">var</span> sl = <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取鼠标的位置</span></span><br><span class="line">                <span class="keyword">var</span> top = event.clientY;</span><br><span class="line">                <span class="keyword">var</span> left = event.clientX;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置偏移量</span></span><br><span class="line">                box.style.top = top + st + <span class="string">"px"</span>;</span><br><span class="line">                box.style.left = left + sl + <span class="string">"px"</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"box"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></tbody></table></figure><br><p>为什么要获取滚动条长度：如下<br><img src="https://img-blog.csdnimg.cn/20200423212604230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><br>愿你的坚持终有收获。<br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 庖丁解牛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用CSS来解决“高度塌陷”问题</title>
      <link href="/articl/d5e6ae6f.html"/>
      <url>/articl/d5e6ae6f.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/bfcaae14535d4f188713af70e9ed94eb.jpeg" alt=""></p><a id="more"></a><br><br>通用代码：<br><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>,</span><br><span class="line">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span> {</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">        <span class="attribute">display</span>: table;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><br><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript---检测滚动条是否到底</title>
      <link href="/articl/cd9a2c1b.html"/>
      <url>/articl/cd9a2c1b.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/37e3546a3e404a2eb6318a11074dcdfb.jpg" alt=""></p><a id="more"></a><p>disabled 属性可设置或返回是否禁用 checkbox。<br>语法：Object.disabled=true|false<br>true表示禁用 false表示可用</p><p>clientWidth clientHeight<br>这两个属性都可以获取元素的可见高度和宽度<br>会获取元素的宽度和高度，包括内容区和内边距</p><p>offsetWidth offsetHeight<br>获取元素的整个宽度和高度，包括内容区和内边距，边框</p><p>scrollLeft 可以获取水平滚动条的距离<br>scrollTop 可以获取垂直滚动条的距离</p><p>scrollWidth scrollHeight<br>可以获取元素整个滚动区域的宽度和高度</p><p>等式成立时表示垂直滚动条到达最底部<br>Object.scrollHeight-Object.scrollTop==Object.clientHeight</p><p>等式成立时表示水平滚动条到达最右端<br>当满足Object.scrollWidth-Object.scrollLeft==Object.clientWidth</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;滚动条练习&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #info {</span></span><br><span class="line"><span class="regexp">            width: 300px;</span></span><br><span class="line"><span class="regexp">            height: 500px;</span></span><br><span class="line"><span class="regexp">            background-color: #bfa;</span></span><br><span class="line"><span class="regexp">            overflow: auto;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            当垂直滚动条到底时使表单项可用</span></span><br><span class="line"><span class="comment">            onscroll</span></span><br><span class="line"><span class="comment">            该事件会在元素的滚动的时候触发</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">//获取id为info的p元素</span></span><br><span class="line">            <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>);</span><br><span class="line">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span><br><span class="line">            <span class="keyword">var</span> btn02 = <span class="built_in">document</span>.getElementById(<span class="string">"btn02"</span>);</span><br><span class="line">            <span class="comment">//为info绑定一个滚动条滚动事件</span></span><br><span class="line">            info.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                <span class="comment">//检查垂直滚动条是否到底部</span></span><br><span class="line">                <span class="keyword">if</span> (info.scrollHeight - info.scrollTop == info.clientHeight) {</span><br><span class="line">                    <span class="comment">//到底部使表单项可用</span></span><br><span class="line">                    btn01.disabled = <span class="literal">false</span>;</span><br><span class="line">                    btn02.disabled = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//我们还要实现必须要勾选第一个按钮，才能按下提交按钮</span></span><br><span class="line">            btn02.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (btn01.checked == <span class="literal">true</span>) {</span><br><span class="line">                    alert(<span class="string">"恭喜您注册成功！"</span>);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    alert(<span class="string">"请勾选前面的协议条款，谢谢！"</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;欢迎亲爱的用户注册&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p id="info"&gt;</span></span><br><span class="line"><span class="regexp">        巷口灯光忽明忽灭 手中甜咖啡已冷却 嘴角不经意泄露想念 在发呆的窗前凝结 其实不爱漫漫长夜 因为你才多了情结 可是蜷缩的回忆不热烈 我如何把孤单融解 你看啊春日的蝴蝶 你看它颤抖着飞越 和风与暖阳倾斜 却冰冷 的季节 你看啊仲夏的弯月 你看它把欢愉偷窃 倒挂天际的笑靥 故事里的最后一页 过往和光阴都重叠 我用尽所有字眼去描写 无法留你片刻停歇 你听啊秋末的落叶 你听它叹息着离别 只剩我独自领略 海与山 风和月 你听啊冬至的白雪 你听它掩饰着哽咽 在没有你的世界 你听啊秋末的落叶 你听它叹息着离别</span></span><br><span class="line"><span class="regexp">        只剩我独自领略 海与山 风和月 你听啊冬至的白雪 你听它掩饰着哽咽 在没有你的世界 再没有你的冬眠巷口灯光忽明忽灭 手中甜咖啡已冷却 嘴角不经意泄露想念 在发呆的窗前凝结 其实不爱漫漫长夜 因为你才多了情结 可是蜷缩的回忆不热烈 我如何把孤单融解 你看啊春日的蝴蝶 你看它颤抖着飞越 和风与暖阳倾斜 却冰冷 的季节 你看啊仲夏的弯月 你看它把欢愉偷窃 倒挂天际的笑靥 故事里的最后一页 过往和光阴都重叠 我用尽所有字眼去描写 无法留你片刻停歇 你听啊秋末的落叶 你听它叹息着离别 只剩我独自领略</span></span><br><span class="line"><span class="regexp">        海与山 风和月 你听啊冬至的白雪 你听它掩饰着哽咽 在没有你的世界 你听啊秋末的落叶 你听它叹息着离别 只剩我独自领略 海与山 风和月 你听啊冬至的白雪 你听它掩饰着哽咽 在没有你的世界 再没有你的冬眠巷口灯光忽明忽灭 手中甜咖啡已冷却 嘴角不经意泄露想念 在发呆的窗前凝结 其实不爱漫漫长夜 因为你才多了情结 可是蜷缩的回忆不热烈 我如何把孤单融解 你看啊春日的蝴蝶 你看它颤抖着飞越 和风与暖阳倾斜 却冰冷 的季节 你看啊仲夏的弯月 你看它把欢愉偷窃 倒挂天际的笑靥 故事里的最后一页</span></span><br><span class="line"><span class="regexp">        过往和光阴都重叠 我用尽所有字眼去描写 无法留你片刻停歇 你听啊秋末的落叶 你听它叹息着离别 只剩我独自领略 海与山 风和月 你听啊冬至的白雪 你听它掩饰着哽咽 在没有你的世界 你听啊秋末的落叶 你听它叹息着离别 只剩我独自领略 海与山 风和月 你听啊冬至的白雪 你听它掩饰着哽咽 在没有你的世界 再没有你的冬眠说巷口灯光忽明忽灭 手中甜咖啡已冷却 嘴角不经意泄露想念 在发呆的窗前凝结 其实不爱漫漫长夜 因为你才多了情结 可是蜷缩的回忆不热烈 我如何把孤单融解 你看啊春日的蝴蝶 你看它颤抖着飞越</span></span><br><span class="line"><span class="regexp">        和风与暖阳倾斜 却冰冷 的季节 你看啊仲夏的弯月 你看它把欢愉偷窃 倒挂天际的笑靥 故事里的最后一页 过往和光阴都重叠 我用尽所有字眼去描写 无法留你片刻停歇 你听啊秋末的落叶 你听它叹息着离别 只剩我独自领略 海与山 风和月 你听啊冬至的白雪 你听它掩饰着哽咽 在没有你的世界 你听啊秋末的落叶 你听它叹息着离别 只剩我独自领略 海与山 风和月 你听啊冬至的白雪 你听它掩饰着哽咽 在没有你的世界 再没有你的冬眠</span></span><br><span class="line"><span class="regexp">    &lt;/</span>p&gt;</span><br><span class="line">    &lt;!--如果表单项添加disabled=<span class="string">"disabled"</span>，则表单项将变为不可用状态--&gt;</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> disabled=<span class="string">"disabled"</span> id=<span class="string">"btn01"</span>&gt;我已仔细阅读该协议并遵守</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> disabled=<span class="string">"disabled"</span> value=<span class="string">"注册"</span> id=<span class="string">"btn02"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></tbody></table></figure><p>其他浏览器都可以除了chrome<br><br><br>愿你的坚持终有收获<br><br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 庖丁解牛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中如何获取元素的当前显示样式----简单总结。</title>
      <link href="/articl/a5b066ce.html"/>
      <url>/articl/a5b066ce.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/08d9ee6fdc474a60ad76867b8785a129.jpg" alt=""></p><a id="more"></a><p>有两种方法：<br>第一种：currentStyle<br>  语法：元素.currentStyle.样式名<br>  他可以用来读取当前元素正在显示的样式<br>  如果当前元素没有设置该样式，则获取它的默认值<br>  <strong>currentStyle只有在IE浏览器中支持，其他浏览器都不支持。</strong></p><p>第二种：getComputedStyle()方法<br>  getComputedStyle()这个方法来获取元素当前的样式<br>    这个方法是window的方法，可以直接使用<br>  需要两个参数<br>    第一个：要获取样式的元素<br>    第二个：可以传递一个伪元素，一般都传null<br>  该方法会返回一个对象，对象中封装了当前元素对应的样式<br>    可以通过 对象.样式名 来读取样式<br>  如果没有设置样式则会获取到真实的值，而不是默认值<br>  比如：没有设置width，它不会获取到auto，而是一个长度<br>  <strong>该方法不支持IE8及以下浏览器</strong></p><br>但是我们需要都兼容怎么办？ 那我们就自己写一个方法。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        .box1 {</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            height: 100px;</span></span><br><span class="line"><span class="regexp">            background-color: #bfa;</span></span><br><span class="line"><span class="regexp">        }</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box1"</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"btn01"</span>)[<span class="number">0</span>];</span><br><span class="line">            btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                <span class="comment">// alert(box1.currentStyle.width);</span></span><br><span class="line">                <span class="comment">// var box = getComputedStyle(box1, null);</span></span><br><span class="line">                alert(getStyle(box1, <span class="string">"width"</span>));</span><br><span class="line">            };</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, name</span>) </span>{</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) {</span><br><span class="line">                <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">null</span>)[name];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> obj.currentStyle.width;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn01"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="box1"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></tbody></table></figure><p>把方法分离出来：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, name</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) {</span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">null</span>)[name];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle.width;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>  当调用该方法的时候，它会检查浏览器中是否有getComputedStyle，如果又我们会使用getComputedStyle，否则会使用currentStyle，这样就完美解决了，所有的浏览器都能兼容。<br>  但是我们为什么要在getComputedStyle前加一个window呢？说明一下：</p><ul><li>当不加window时，getComputedStyle 是作为一个变量来判断的，如果没有就会报错，结束下面的程序。</li><li>加上windon时，getComputedStyle是作为一个属性来判断了，如果没有返回underfind。执行else</li></ul><br>**注意：通过currentStyle和getComputedStyle()读取到的样式都只是读的,不能修改，如果要修改可以通过修改style属性。**<br><br>愿你的坚持终有收获。<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 庖丁解牛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中正则表达式的常用总结</title>
      <link href="/articl/41497438.html"/>
      <url>/articl/41497438.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/51479d14d0014d2ebbc2c58d5f0c478d.jpg" alt=""></p><p>正则表达式的思维导图：<br><img src="https://img-blog.csdnimg.cn/20200420100401772.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="正则的捕获exec"><a href="#正则的捕获exec" class="headerlink" title="正则的捕获exec()"></a>正则的捕获exec()</h2><p>  exec() 方法用于检索字符串中的正则表达式的匹配。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RegExpObject.exec(string)</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。要检索的字符串。</td></tr><tr><td>返回值：返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</td><td></td></tr></tbody></table><h2 id="（1）懒惰性"><a href="#（1）懒惰性" class="headerlink" title="（1）懒惰性"></a>（1）懒惰性</h2><p>  我们先看一个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'112hello456world789'</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></tbody></table></figure><p>  上述三个打印输出的都是一样的：<br><img src="https://img-blog.csdnimg.cn/20200420101034504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  我们可以发现，每次匹配到的结果都是相同的，而且索引index的值一直没变，始终指向第一次匹配到的字符串的起始位置，这就是正则的懒惰性，只匹配第一次匹配到的结果，不再向后匹配。<br><br><br>  怎么解决懒惰性问题呢？很容易，加个全局修饰符即可。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'112hello456world789'</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></tbody></table></figure><p>  如上，我们加上全局修饰符之后，再来看输出结果：<br><img src="https://img-blog.csdnimg.cn/2020042010115215.png" alt="在这里插入图片描述"><br>  我们可以看到，112，456，789这三个数字在原始字符串中都被捕获到了，并且每次的index值也发生了变化；第四个输出为null，表示捕获结束，后面再没有可以捕获的内容了。如此就解决了正则的懒惰性问题。</p><h2 id="（2）贪婪性"><a href="#（2）贪婪性" class="headerlink" title="（2）贪婪性"></a>（2）贪婪性</h2><p>正则捕获贪婪性的定义：默认情况下，正则捕获的时候，是按照当前正则所匹配的最长结果来获取的。<br>  还是以上述例子来讲：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'112hello456world789'</span></span><br></pre></td></tr></tbody></table></figure><p>  如果，我们现在想单独捕获到每一个数字，即1，1，2，4，5，6，7，8，9，此时该怎么办呢？</p><p>  若像上述例子中那样捕获到，则捕获到的内容是数字112，456，789，这三个三位数，显然这把满足要求的连续数字都给一次性捕获到了，这其实就是正则的贪婪性。</p><p>  那么，如何解决正则的贪婪性呢？即，我们要单独获取到1，1，2，4，5，6，7，8，9这些单个数字：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+?/g</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'112hello456world789'</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></tbody></table></figure><p>  解决贪婪性也很简单，即在+后面加一个问号（？）即可。</p><p>  我们来看加了问号之后的输出：<br><img src="https://img-blog.csdnimg.cn/20200420101444766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  解决正则的贪婪性很简单，即在量词元字符的后面加问号（？）即可，此例中的量词元字符为+</p><h2 id="最常用的15个前端表单验证JS正则表达式"><a href="#最常用的15个前端表单验证JS正则表达式" class="headerlink" title="最常用的15个前端表单验证JS正则表达式"></a>最常用的15个前端表单验证JS正则表达式</h2><p>1、 用户名正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户名正则，4到16位（字母，数字，下划线，减号）</span></span><br><span class="line"><span class="keyword">var</span> uPattern = <span class="regexp">/^[a-zA-Z0-9_-]{4,16}$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(uPattern.test(<span class="string">"caibaojian"</span>));</span><br></pre></td></tr></tbody></table></figure><p>2、密码强度正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</span></span><br><span class="line"><span class="keyword">var</span> pPattern = <span class="regexp">/^.*(?=.{6,})(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"=="</span>+pPattern.test(<span class="string">"caibaojian#"</span>));</span><br></pre></td></tr></tbody></table></figure><p>3、整数正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正整数正则</span></span><br><span class="line"><span class="keyword">var</span> posPattern = <span class="regexp">/^\d+$/</span>;</span><br><span class="line"><span class="comment">//负整数正则</span></span><br><span class="line"><span class="keyword">var</span> negPattern = <span class="regexp">/^-\d+$/</span>;</span><br><span class="line"><span class="comment">//整数正则</span></span><br><span class="line"><span class="keyword">var</span> intPattern = <span class="regexp">/^-?\d+$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(posPattern.test(<span class="string">"42"</span>));</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(negPattern.test(<span class="string">"-42"</span>));</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(intPattern.test(<span class="string">"-42"</span>));</span><br></pre></td></tr></tbody></table></figure><p>4、数字正则</p><p>可以是整数也可以是浮点数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正数正则</span></span><br><span class="line"><span class="keyword">var</span> posPattern = <span class="regexp">/^\d*\.?\d+$/</span>;</span><br><span class="line"><span class="comment">//负数正则</span></span><br><span class="line"><span class="keyword">var</span> negPattern = <span class="regexp">/^-\d*\.?\d+$/</span>;</span><br><span class="line"><span class="comment">//数字正则</span></span><br><span class="line"><span class="keyword">var</span> numPattern = <span class="regexp">/^-?\d*\.?\d+$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(posPattern.test(<span class="string">"42.2"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(negPattern.test(<span class="string">"-42.2"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(numPattern.test(<span class="string">"-42.2"</span>));</span><br></pre></td></tr></tbody></table></figure><p>5、 Email正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Email正则</span></span><br><span class="line"><span class="keyword">var</span> ePattern = <span class="regexp">/^\w+((-\w+)|(\.\w+))*@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(ePattern.test(<span class="number">99154507</span>@qq.com));</span><br></pre></td></tr></tbody></table></figure><p>6、手机号码正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机号正则</span></span><br><span class="line"><span class="keyword">var</span> mPattern = <span class="regexp">/^1[34578]\d{9}$/</span>; <span class="comment">//http://caibaojian.com/regexp-example.html</span></span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(mPattern.test(<span class="string">"15507621888"</span>));</span><br></pre></td></tr></tbody></table></figure><p>7、身份证号正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//身份证号（18位）正则</span></span><br><span class="line"><span class="keyword">var</span> cP = <span class="regexp">/^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(cP.test(<span class="string">"11010519880605371X"</span>));</span><br></pre></td></tr></tbody></table></figure><p>8、URL正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//URL正则</span></span><br><span class="line"><span class="keyword">var</span> urlP= <span class="regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(urlP.test(http:<span class="comment">//caibaojian.com));</span></span><br></pre></td></tr></tbody></table></figure><p>9、IPv4地址正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ipv4地址正则</span></span><br><span class="line"><span class="keyword">var</span> ipP = <span class="regexp">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(ipP.test(<span class="string">"115.28.47.26"</span>));</span><br></pre></td></tr></tbody></table></figure><p>10、十六进制颜色正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RGB Hex颜色正则</span></span><br><span class="line"><span class="keyword">var</span> cPattern = <span class="regexp">/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(cPattern.test(<span class="string">"#b8b8b8"</span>));</span><br></pre></td></tr></tbody></table></figure><p>11、日期正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期正则，简单判定,未做月份及日期的判定</span></span><br><span class="line"><span class="keyword">var</span> dP1 = <span class="regexp">/^\d{4}(\-)\d{1,2}\1\d{1,2}$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(dP1.test(<span class="string">"2017-05-11"</span>));</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(dP1.test(<span class="string">"2017-15-11"</span>));</span><br><span class="line"><span class="comment">//日期正则，复杂判定</span></span><br><span class="line"><span class="keyword">var</span> dP2 = <span class="regexp">/^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(dP2.test(<span class="string">"2017-02-11"</span>));</span><br><span class="line"><span class="comment">//输出 false</span></span><br><span class="line"><span class="built_in">console</span>.log(dP2.test(<span class="string">"2017-15-11"</span>));</span><br><span class="line"><span class="comment">//输出 false</span></span><br><span class="line"><span class="built_in">console</span>.log(dP2.test(<span class="string">"2017-02-29"</span>));</span><br></pre></td></tr></tbody></table></figure><p>12、QQ号码正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QQ号正则，5至11位</span></span><br><span class="line"><span class="keyword">var</span> qqPattern = <span class="regexp">/^[1-9][0-9]{4,10}$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(qqPattern.test(<span class="string">"65974040"</span>));</span><br></pre></td></tr></tbody></table></figure><p>13、微信号正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span></span><br><span class="line"><span class="keyword">var</span> wxPattern = <span class="regexp">/^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(wxPattern.test(<span class="string">"caibaojian_com"</span>));</span><br></pre></td></tr></tbody></table></figure><p>14、车牌号正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//车牌号正则</span></span><br><span class="line"><span class="keyword">var</span> cPattern = <span class="regexp">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(cPattern.test(<span class="string">"粤B39006"</span>));</span><br></pre></td></tr></tbody></table></figure><p>15、包含中文正则</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含中文正则</span></span><br><span class="line"><span class="keyword">var</span> cnPattern = <span class="regexp">/[\u4E00-\u9FA5]/</span>;</span><br><span class="line"><span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(cnPattern.test(<span class="string">"董董董"</span>));</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">整数或者小数：^[<span class="number">0</span><span class="number">-9</span>]+\.{<span class="number">0</span>,<span class="number">1</span>}[<span class="number">0</span><span class="number">-9</span>]{<span class="number">0</span>,<span class="number">2</span>}$</span><br><span class="line">只能输入数字：<span class="string">"^[0-9]*$"</span>。</span><br><span class="line">只能输入n位的数字：<span class="string">"^\d{n}$"</span>。</span><br><span class="line">只能输入至少n位的数字：<span class="string">"^\d{n,}$"</span>。</span><br><span class="line">只能输入m~n位的数字：。<span class="string">"^\d{m,n}$"</span></span><br><span class="line">只能输入零和非零开头的数字：<span class="string">"^(0|[1-9][0-9]*)$"</span>。</span><br><span class="line">只能输入有两位小数的正实数：<span class="string">"^[0-9]+(.[0-9]{2})?$"</span>。</span><br><span class="line">只能输入有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：<span class="string">"^[0-9]+(.[0-9]{1,3})?$"</span>。</span><br><span class="line">只能输入非零的正整数：<span class="string">"^\+?[1-9][0-9]*$"</span>。</span><br><span class="line">只能输入非零的负整数：<span class="string">"^\-[1-9][]0-9"</span>*$。</span><br><span class="line">只能输入长度为<span class="number">3</span>的字符：<span class="string">"^.{3}$"</span>。</span><br><span class="line">只能输入由<span class="number">26</span>个英文字母组成的字符串：<span class="string">"^[A-Za-z]+$"</span>。</span><br><span class="line">只能输入由<span class="number">26</span>个大写英文字母组成的字符串：<span class="string">"^[A-Z]+$"</span>。</span><br><span class="line">只能输入由<span class="number">26</span>个小写英文字母组成的字符串：<span class="string">"^[a-z]+$"</span>。</span><br><span class="line">只能输入由数字和<span class="number">26</span>个英文字母组成的字符串：<span class="string">"^[A-Za-z0-9]+$"</span>。</span><br><span class="line">只能输入由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：<span class="string">"^\w+$"</span>。</span><br><span class="line">验证用户密码：<span class="string">"^[a-zA-Z]\w{5,17}$"</span>正确格式为：以字母开头，长度在<span class="number">6</span>~<span class="number">18</span>之间，只能包含字符、数字和下划线。</span><br><span class="line">验证是否含有^%&amp;<span class="string">''</span>,;=?$\<span class="string">"等字符："</span>[^%&amp;<span class="string">''</span>,;=?$\x22]+<span class="string">"。</span></span><br><span class="line"><span class="string">只能输入汉字："</span>^[\u4e00-\u9fa5]{<span class="number">0</span>,}$<span class="string">"</span></span><br><span class="line"><span class="string">验证Email地址："</span>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$<span class="string">"。</span></span><br><span class="line"><span class="string">验证InternetURL："</span>^http:<span class="comment">//([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$"。</span></span><br><span class="line">验证电话号码：<span class="string">"^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$"</span>正确格式为：<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXXX- XXXXXXXX"</span>、<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXX-XXXXXXXX"</span>、<span class="string">"XXXXXXX"</span>和<span class="string">"XXXXXXXX"</span>。</span><br><span class="line">验证身份证号（<span class="number">15</span>位或<span class="number">18</span>位数字）：<span class="string">"^\d{15}|\d{18}$"</span>。</span><br><span class="line">验证一年的<span class="number">12</span>个月：<span class="string">"^(0?[1-9]|1[0-2])$"</span>正确格式为：<span class="string">"01"</span>～<span class="string">"09"</span>和<span class="string">"1"</span>～<span class="string">"12"</span>。</span><br><span class="line">验证一个月的<span class="number">31</span>天：<span class="string">"^((0?[1-9])|((1|2)[0-9])|30|31)$"</span>正确格式为；<span class="string">"01"</span>～<span class="string">"09"</span>和<span class="string">"1"</span>～<span class="string">"31"</span>。整数或者小数：^[<span class="number">0</span><span class="number">-9</span>]+\.{<span class="number">0</span>,<span class="number">1</span>}[<span class="number">0</span><span class="number">-9</span>]{<span class="number">0</span>,<span class="number">2</span>}$</span><br><span class="line">只能输入数字：<span class="string">"^[0-9]*$"</span>。</span><br><span class="line">只能输入n位的数字：<span class="string">"^\d{n}$"</span>。</span><br><span class="line">只能输入至少n位的数字：<span class="string">"^\d{n,}$"</span>。</span><br><span class="line">只能输入m~n位的数字：。<span class="string">"^\d{m,n}$"</span></span><br><span class="line">只能输入零和非零开头的数字：<span class="string">"^(0|[1-9][0-9]*)$"</span>。</span><br><span class="line">只能输入有两位小数的正实数：<span class="string">"^[0-9]+(.[0-9]{2})?$"</span>。</span><br><span class="line">只能输入有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：<span class="string">"^[0-9]+(.[0-9]{1,3})?$"</span>。</span><br><span class="line">只能输入非零的正整数：<span class="string">"^\+?[1-9][0-9]*$"</span>。</span><br><span class="line">只能输入非零的负整数：<span class="string">"^\-[1-9][]0-9"</span>*$。</span><br><span class="line">只能输入长度为<span class="number">3</span>的字符：<span class="string">"^.{3}$"</span>。</span><br><span class="line">只能输入由<span class="number">26</span>个英文字母组成的字符串：<span class="string">"^[A-Za-z]+$"</span>。</span><br><span class="line">只能输入由<span class="number">26</span>个大写英文字母组成的字符串：<span class="string">"^[A-Z]+$"</span>。</span><br><span class="line">只能输入由<span class="number">26</span>个小写英文字母组成的字符串：<span class="string">"^[a-z]+$"</span>。</span><br><span class="line">只能输入由数字和<span class="number">26</span>个英文字母组成的字符串：<span class="string">"^[A-Za-z0-9]+$"</span>。</span><br><span class="line">只能输入由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：<span class="string">"^\w+$"</span>。</span><br><span class="line">验证用户密码：<span class="string">"^[a-zA-Z]\w{5,17}$"</span>正确格式为：以字母开头，长度在<span class="number">6</span>~<span class="number">18</span>之间，只能包含字符、数字和下划线。</span><br><span class="line">验证是否含有^%&amp;<span class="string">''</span>,;=?$\<span class="string">"等字符："</span>[^%&amp;<span class="string">''</span>,;=?$\x22]+<span class="string">"。</span></span><br><span class="line"><span class="string">只能输入汉字："</span>^[\u4e00-\u9fa5]{<span class="number">0</span>,}$<span class="string">"</span></span><br><span class="line"><span class="string">验证Email地址："</span>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$<span class="string">"。</span></span><br><span class="line"><span class="string">验证InternetURL："</span>^http:<span class="comment">//([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$"。</span></span><br><span class="line">验证电话号码：<span class="string">"^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$"</span>正确格式为：<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXXX- XXXXXXXX"</span>、<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXX-XXXXXXXX"</span>、<span class="string">"XXXXXXX"</span>和<span class="string">"XXXXXXXX"</span>。</span><br><span class="line">验证身份证号（<span class="number">15</span>位或<span class="number">18</span>位数字）：<span class="string">"^\d{15}|\d{18}$"</span>。</span><br><span class="line">验证一年的<span class="number">12</span>个月：<span class="string">"^(0?[1-9]|1[0-2])$"</span>正确格式为：<span class="string">"01"</span>～<span class="string">"09"</span>和<span class="string">"1"</span>～<span class="string">"12"</span>。</span><br><span class="line">验证一个月的<span class="number">31</span>天：<span class="string">"^((0?[1-9])|((1|2)[0-9])|30|31)$"</span>正确格式为；<span class="string">"01"</span>～<span class="string">"09"</span>和<span class="string">"1"</span>～<span class="string">"31"</span>。</span><br></pre></td></tr></tbody></table></figure><br><br><p>愿你的坚持总有回报。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细谈apply()与call()</title>
      <link href="/articl/80e4527b.html"/>
      <url>/articl/80e4527b.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/94b7a45ee1c049bda243f034e6172c19.jpg" alt=""></p><a id="more"></a><p><strong>两者使用的目的</strong>：改变调用的函数体内部的this的指向。<br>  相同点：均是调用某对象的方法，格式：obj.函数名.call()<br>  call(obj,参数1，参数2）:两个参数,前者将代替Function类里this对象，后者（多个元素）作为参数传递给被调用的函数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = {</span><br><span class="line">  name:<span class="string">"name1"</span>,</span><br><span class="line">  logName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> bar={</span><br><span class="line">  name:<span class="string">"name2"</span></span><br><span class="line">};</span><br><span class="line">foo.logName.call(bar);<span class="comment">//name2</span></span><br></pre></td></tr></tbody></table></figure><p>  apply（obj，[参数1，参数2]），同上，不同点是第二个参数是数组。（将数组的每个元素作为一个个参数传递给被调用的函数，性质与call（）方法一样）</p><p>  利用apply（）这一特性的一些小场景：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求数组的最大值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">34</span>,<span class="number">8</span>]     </span><br><span class="line"><span class="keyword">var</span> max=<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)  <span class="comment">//34   Math.max（）参数不能为数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组的最小值</span></span><br><span class="line"><span class="keyword">var</span> max=<span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,arr)  <span class="comment">//1   </span></span><br><span class="line"><span class="comment">//合并数组并返回新数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>);</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1,arr2); <span class="comment">//6</span></span><br></pre></td></tr></tbody></table></figure><br><br>没事可以来看看，万一有收获呢。<p><a href="https://aqingya.cn" target="_blank" rel="noopener">个人博客地址https://aqingya.cn</a><br><br><br>愿你的坚持终有回报。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础---原型对象概念详解(仔细理解一下)</title>
      <link href="/articl/a7b4e42e.html"/>
      <url>/articl/a7b4e42e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/7cdb4aa46fd84fe58cc7d47718ea0e97.jpg" alt=""></p><a id="more"></a><h2 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h2><hr><p>每一个对象都有一个内置的 <strong>proto</strong> 属性指向构造它的函数prototype属性. 而构造函数的prototype.constructor 则指向构造函数本生。一个对象的属性的寻找过程由以下几个部分组成:</p><ol><li><strong>寻找对象属性的数据描述符(writable, value)或存取描述符(getter, setter)，如果查询到了，则返回 对应的值。如果查询不到，则进入第2步骤</strong>。</li><li><strong>寻找对象属性的值是否有被显示定义 (可以通过 Object.getOwnPropertyNames)检测，如果对象属性定义了，则返回定义的值。 如果没有，则进入第3步骤</strong>。</li><li><strong>寻找对象的隐藏原型<strong>proto</strong>对象的属性，规则同1，2步骤。如果还未找到，则重复第3步骤， 直到<strong>proto</strong> 为null 为止。</strong><br></li></ol><hr><p>  我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">console</span>.log(Person.prototype); <span class="comment">//返回一个对象[Object Obkect]</span></span><br><span class="line">      <span class="built_in">console</span>.log(MyClass.prototype); <span class="comment">//返回一个对象[Object Obkect]       </span></span><br><span class="line">      <span class="built_in">console</span>.log(MyClass.prototype == Person.prototype); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><p>  每一个构造函数的prototype是惟一的，他们是不相等的。这个属性对应着一个对象，这个对象就是我们所谓的原形对象。<br>下面我们画图来分析一下：<br><img src="https://img-blog.csdnimg.cn/20200415143653690.png" alt="在这里插入图片描述">  这里prototype属性就是保存原型对象的地址，在MyClass函数里有一个属性指向原型对象。</p><hr><p>  如果函数作为普通函数调用prototype没有任何作用<br>  当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的 原型对象，我们可以通过<strong>proto</strong>来访问该属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line">      <span class="keyword">var</span> mc1 = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class="line">      <span class="built_in">console</span>.log(mc.__proto__); <span class="comment">// 返回一个对象[Object Obkect]</span></span><br><span class="line">      <span class="built_in">console</span>.log(mc.__proto__ == MyClass.prototype); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><p>  通过<strong>proto</strong>来访问该属性，而且该属性和 MyClass.prototype指向的对象的同一个。不仅仅是mc，我再创建一个mc2，它也有<strong>proto</strong>,它指向的也是prototype。<br>  只要通过MyClass创建的对象，他们都有一个隐含属性指向原形对象。<br>画图来理解一下：<br><img src="https://img-blog.csdnimg.cn/20200415144313404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><br></p><p>  原型对象就相当于一个公共区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中的公有的内容，统一设置到原型对象中。<br>看下列代码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line"><span class="keyword">var</span> mc1 = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class="line">MyClass.prototype.a = <span class="number">123</span>; <span class="comment">//向MyClass的原型对象中添加属性a</span></span><br><span class="line"><span class="built_in">console</span>.log(mc.a); <span class="comment">//123</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200415150759255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  我们向MyClass的原型对象中添加属性a，我们并没有向对象mc中添加a，此时mc中没有a，他就会向原型对象中寻找。<br>  当我们访问对象的一个属性时，会现在对象自身中寻找，如果有则直接使用，如果没有，则会去原型对象中寻找，如果找到则会直接使用。</p><p>再看，当我们想mc中添加a，如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line">      <span class="keyword">var</span> mc1 = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class="line">      MyClass.prototype.a = <span class="number">123</span>; <span class="comment">//向MyClass的原型对象中添加属性a</span></span><br><span class="line">      mc.a = <span class="string">"我是mc中的a"</span>; <span class="comment">//向mc中添加属性a</span></span><br><span class="line">      <span class="built_in">console</span>.log(mc.a); <span class="comment">//我是mc中的a</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200415151547307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">  因为mc中有a，则会优先使用自身中的a。所以会输出“我是mc中的a”<br>再看：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line">      <span class="keyword">var</span> mc1 = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class="line">      MyClass.prototype.a = <span class="number">123</span>; <span class="comment">//向MyClass的原型对象中添加属性a</span></span><br><span class="line">      mc.a = <span class="string">"我是mc中的a"</span>; <span class="comment">//向mc中添加属性a</span></span><br><span class="line">      <span class="built_in">console</span>.log(mc1.a); <span class="comment">//123</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200415151942167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  当我们查看mc2中的a时，返回的是123，这是因为此时mc2中没有a，自身没有，它会向它的原型对象中去寻找a。</p><br>  到现在你应该能感觉到了，原型对象就是一个公共区域，所有对象（这里的所有对象指的是同一个构造函数产生的对象）都能访问到原型对象里面的属性。<br>  既然属性能访问到，那我们来试试方法。<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line">        <span class="keyword">var</span> mc1 = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class="line">        MyClass.prototype.sayhello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">        }                        <span class="comment">//向MyClass原型中添加一个方法。</span></span><br><span class="line">        mc.sayhello();           <span class="comment">//hello</span></span><br></pre></td></tr></tbody></table></figure><p>  显而易见，方法也是能访问到的，进一步说明了原型对象就是一个公共区域。<br><br><br>  <strong>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的 原型对象中，这不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法</strong></p><br><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明:"></a>补充说明:</h2><br>  前面我们说到：我们向MyClass的原型对象中添加属性a，我们并没有向对象mc中添加a，那这样的话我们可以使用 in运算符 来检查一下。<p>什么是in运算符：</p><ul><li>通过该运算符可以检查一个对象中是否含有指定的属性<pre><code>如果有则返回true ，没有则返回false</code></pre></li><li>语法：<pre><code>“属性名” in 对象</code></pre><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line"><span class="keyword">var</span> mc1 = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class="line">MyClass.prototype.a = <span class="number">123</span>; <span class="comment">//向MyClass的原型对象中添加属性a</span></span><br><span class="line"><span class="built_in">console</span>.log(mc.a); <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span> <span class="keyword">in</span> mc); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>  ？？？这也不对鸭，mc中不是没有a吗？怎么会返回true呢？。<br>这是因为使用in检查对像中是否有某个属性时，如果对象中没有但是原型中有，也会返回true。<br>  可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性。使用该方法时，只有对象自身中含有属性时才会返回true。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line">MyClass.prototype.a = <span class="number">123</span>; <span class="comment">//向MyClass的原型对象中添加属性a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">"a"</span>)); <span class="comment">//flase</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line">MyClass.prototype.a = <span class="number">123</span>; <span class="comment">//向MyClass的原型对象中添加属性a</span></span><br><span class="line"></span><br><span class="line">mc.b = <span class="number">100</span>; <span class="comment">//向mc中添加属性b</span></span><br><span class="line"><span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">"b"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><br>  那又有疑问了，mc中有hasOwnProperty()吗？好像我们没有添加，那mc的原型对象里有hasOwnProperty()吗？好像我们也没有添加。测试一下：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line">      <span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">//false</span></span><br><span class="line">      <span class="built_in">console</span>.log(mc.__proto__.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><p>  那连mc原型对象里也没有，那hasOwnProperty()到底是谁的?<br>  我们想一下，原型对象也是对象，那原形对象也没有原型对象呢？我们试一下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>{ <span class="comment">//创建构造函数</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass(); <span class="comment">//通过构造函数MyClass创建一个对象mc</span></span><br><span class="line"><span class="built_in">console</span>.log(mc.__proto__.__proto__.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><p>  看来这个hasOwnProperty()是属于原型对象的原型对象。<br>  说明一下：<br><img src="https://img-blog.csdnimg.cn/20200415161035450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>原型对象也是对象，所以它也有原型，</p><ul><li>当我们使用一个对象的属性或者方法时，会先在自身中寻找，如果有直接使用。</li><li>如果自身中没有则去原型对象中寻找，如果原型对象中有，则使用。</li><li>如果没有则去原型的原型中寻找，直到找到Object对象的原型。</li><li>Object对象的原型没有原型，如果在Object中依然没有找到，则会返回Undefined。</li></ul><hr><p>一个对象的属性的寻找过程由以下几个部分组成:</p><ol><li><strong>寻找对象属性的数据描述符(writable, value)或存取描述符(getter, setter)，如果查询到了，则返回 对应的值。如果查询不到，则进入第2步骤</strong>。</li><li><strong>寻找对象属性的值是否有被显示定义 (可以通过 Object.getOwnPropertyNames)检测，如果对象属性定义了，则返回定义的值。 如果没有，则进入第3步骤</strong>。</li><li><strong>寻找对象的隐藏原型<strong>proto</strong>对象的属性，规则同1，2步骤。如果还未找到，则重复第3步骤， 直到<strong>proto</strong> 为null 为止。</strong></li></ol><br><br><br>愿你的坚持终有收获。<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底理解js中this的指向，理解记忆，不用死记硬背。</title>
      <link href="/articl/33d7b1fa.html"/>
      <url>/articl/33d7b1fa.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/41758b5c2f7b402d897c4d6154f6156e.jpg" alt=""></p><a id="more"></a><p>  首先必须要说的是，<strong>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象</strong>（这句话有些问题，后面会解释为什么会有问题，虽然网上大部分的文章都是这样说的，虽然在很多情况下那样去理解不会出什么问题，但是实际上那样理解是不准确的，所以在你理解this的时候会有种琢磨不透的感觉），那么接下来我会深入的探讨这个问题。<br>  为什么要学习this？如果你学过面向对象编程，那你肯定知道干什么用的，如果你没有学过，那么暂时可以不用看这篇文章，当然如果你有兴趣也可以看看，毕竟这是js中必须要掌握的东西。<br><br><br> 例子1：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> user = <span class="string">"阿清"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//Window</span></span><br><span class="line">}</span><br><span class="line">a();</span><br></pre></td></tr></tbody></table></figure><p>  按照我们上面说的this最终指向的是调用它的对象，这里的函数a实际是被Window对象所点出来的，下面的代码就可以证明。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> user = <span class="string">"阿清"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);　　<span class="comment">//Window</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">window</span>.a();</span><br></pre></td></tr></tbody></table></figure><p>  和上面代码一样吧，其实alert也是window的一个属性，也是window点出来的。<br><br><br> 例子2：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    user:<span class="string">"阿清"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.user);  <span class="comment">//阿清</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">o.fn();</span><br></pre></td></tr></tbody></table></figure><p>  这里的this指向的是对象o，因为你调用这个fn是通过o.fn()执行的，那自然指向就是对象o，这里再次强调一点，this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁，一定要搞清楚这个。<br><br><br>  其实例子1和例子2说的并不够准确，下面这个例子就可以推翻上面的理论。</p><p>  如果要彻底的搞懂this必须看接下来的几个例子<br>例子3：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    user:<span class="string">"阿清"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//阿清</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">window</span>.o.fn();</span><br></pre></td></tr></tbody></table></figure><p>  这段代码和上面的那段代码几乎是一样的，但是这里的this为什么不是指向window，如果按照上面的理论，最终this指向的是调用它的对象，这里先说个而外话，window是js中的全局对象，我们创建的变量实际上是给window添加属性，所以这里可以用window点o对象。<br>  这里先不解释为什么上面的那段代码this为什么没有指向window，我们再来看一段代码。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:{</span><br><span class="line">        a:<span class="number">12</span>,</span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//12</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">o.b.fn();</span><br></pre></td></tr></tbody></table></figure><p>  这里同样也是对象o点出来的，但是同样this并没有执行它，那你肯定会说我一开始说的那些不就都是错误的吗？其实也不是，只是一开始说的不准确，接下来我将补充一句话，我相信你就可以彻底的理解this的指向的问题。<br><br><br>  情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。</p><p>  情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。</p><p>  情况3：如果一个函数中有this，<strong>==这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象==</strong>，例子3可以证明，如果不相信，那么接下来我们继续看几个例子。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:{</span><br><span class="line">        <span class="comment">// a:12,</span></span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">o.b.fn();</span><br></pre></td></tr></tbody></table></figure><p>  尽管对象b中没有属性a，这个this指向的也是对象b，因为this只会指向它的上一级对象，不管这个对象中有没有this要的东西。<br>还有一种比较特殊的情况，例子4：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = {</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:{</span><br><span class="line">        a:<span class="number">12</span>,</span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> j = o.b.fn;</span><br><span class="line">j();</span><br></pre></td></tr></tbody></table></figure><p>  这里this指向的是window，是不是有些蒙了？其实是因为你没有理解一句话，这句话同样至关重要。</p><p>  this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的，例子4中虽然函数fn是被对象b所引用，但是在将fn赋值给变量j的时候并没有执行所以最终指向的是window，这和例子3是不一样的，例子3是直接执行了fn。</p><p>  this讲来讲去其实就是那么一回事，只不过在不同的情况下指向的会有些不同，上面的总结每个地方都有些小错误，也不能说是错误，而是在不同环境下情况就会有不同，所以我也没有办法一次解释清楚，只能你慢慢地的去体会。</p><br> 构造函数版this：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">"阿清"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//阿清</span></span><br></pre></td></tr></tbody></table></figure><p>  这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，为什么我说a是对象，因为用了new关键字就是创建一个对象实例，理解这句话可以想想我们的例子3，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象a中会有user，因为你已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。<br><br><br> 当this碰到return时:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'阿清'</span>;  </span><br><span class="line">    <span class="keyword">return</span> {};  </span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure><p> 再看一个</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'阿清'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{};</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure><p> 再来</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'阿清'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//阿清</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'阿清'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//阿清</span></span><br></pre></td></tr></tbody></table></figure><p>  这是什么意思呢？<br>  如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。 　　</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'阿清'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//fn {user: "阿清"}</span></span><br></pre></td></tr></tbody></table></figure><p>  还有一点就是虽然null也是对象，但是在这里this还是指向那个函数的实例，因为null比较特殊。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'阿清'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//阿清</span></span><br></pre></td></tr></tbody></table></figure><p><strong>知识点补充：</strong></p><p>  1.在严格版中的默认的this不再是window，而是undefined。</p><p>  2.new操作符会改变函数this的指向问题，虽然我们上面讲解过了，但是并没有深入的讨论这个问题，网上也很少说，所以在这里有必要说一下。</p><br><br><br><br>转载自：https://www.cnblogs.com/pssp/p/5216085.html<p>　　</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中基本数据类型和引用数据类型的区别？</title>
      <link href="/articl/ed2aba25.html"/>
      <url>/articl/ed2aba25.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/75d8967b261c491bae60a5efba8c52e1.jpg" alt=""></p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;基本类型：String、Number、Boolean、Null、Undefined<br>&nbsp;&nbsp;&nbsp;&nbsp;应用数据类型：Object<br>他们有什么区别呢？<br><br><br>&nbsp;&nbsp;我们先看一个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a++;                         修改a的值</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a="</span> + a);      <span class="comment">//a=11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b="</span> + b);      <span class="comment">//b=10</span></span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;我们发现a的值发生了改变，但是b的值并没有发生改变。这是就说明a和b是完全独立的，一个值的改变不会影响其他值。<br><br><br>&nbsp;&nbsp;我们再看一个例子：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">      obj1.name = <span class="string">"阿清"</span>;</span><br><span class="line">      <span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">      <span class="built_in">console</span>.log(obj1.name);<span class="comment">// 阿清</span></span><br><span class="line">      <span class="built_in">console</span>.log(obj2.name); <span class="comment">// 阿清</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改obj1对象中name中的值</span></span><br><span class="line">obj1.name = <span class="string">"大大怪将军"</span></span><br><span class="line">      <span class="built_in">console</span>.log(obj1.name); <span class="comment">// 大大怪将军</span></span><br><span class="line">      <span class="built_in">console</span>.log(obj2.name); <span class="comment">// 大大怪将军</span></span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;修改之前输出了相同的结果，但是修改之后还是输出相同的结果，我们只是修改了obj1中name的值，并没有修改obj2中name的值，此时输出还是相同的。这是为什么呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;这就是基本数据类型和引用数据类型的区别。为了方便说明，我们画一个图。</p><p>&nbsp;&nbsp;JS中的变量和值都是保存到内存中存储。我们可大致理解为 把内存分为栈内存和堆内存。</p><ol><li>基本数据类型的值直接在栈内存中存储</li></ol><p><img src="https://img-blog.csdnimg.cn/20200411213852525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&nbsp;&nbsp;图中可以看出我们声明了两个变量，将a的值复制给b，值都是123，但是a和b的123他们没有关系，互不干扰，是相互独立的。<br><img src="https://img-blog.csdnimg.cn/20200411214348602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&nbsp;&nbsp;当我们进行a++的时候，a的值变为124，此时b的值并没有受到影响。只要不动b，a不管怎么变，都不会影响到b。<br>&nbsp;&nbsp;由此可见，基本数据类型的值直接在栈内存中存储，值与值之间都是独立存在的，修改变量不会影响到其他的变量。<br><br></p><ol start="2"><li>对象是保存到堆内存中的。<br><img src="https://img-blog.csdnimg.cn/2020041121541617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&nbsp;&nbsp;对象是保存到堆内存中的，每创建一个新的对象，就会在堆内存中开辟一个新的空间。而变量保存的是对象的内存地址（对象的引用），他们两个保存的是同一个地址，指向相同的内存。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200411215718841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;当改变obj中name的值时，因为他们是指向相同的地址，所以obj1中的name也会跟着改变。<br>&nbsp;&nbsp;这就说明了，如果两个变量保存的是同一个对象的引用，当一个变量通过一个变量修改属性时，另一个也会受到影响。<br><br></p><p>我再在看一种情况：<img src="https://img-blog.csdnimg.cn/20200411220621872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&nbsp;&nbsp;我们将obj2的值修改为null，也就是我们将变量obj2和内存的联系给断开了，这样并不会影响受到obj1.</p><br>&nbsp;&nbsp;接下来再看：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c == d);    <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;当比较两个基本数据类型的值时，就是比较他们的值。毫无疑问，这两个是相等了，结果为true。</p><br><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj3.name = <span class="string">"shs"</span></span><br><span class="line">obj4.name = <span class="string">"shs"</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3); <span class="comment">//{name:"shs"}</span></span><br><span class="line"><span class="built_in">console</span>.log(obj4);    <span class="comment">//{name:"shs"}</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj3 == obj4);       <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;当我们声明两个变量的时候，name值一样。输出都为{name:”shs”}，但是当他们进行比较的时候，结果就是false。<br>&nbsp;&nbsp;例如：这就像一对双胞胎，长的一模一样，但是还是两个人，他们是不相同。<br>&nbsp;&nbsp;我们画图来解释一下。<br><img src="https://img-blog.csdnimg.cn/20200411222754350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&nbsp;&nbsp;当看见new时，就是在堆内存里开辟一个新的空间。<br>&nbsp;&nbsp;比较两个引用数据类型时，它就是比较对象的内存地址，，如果两个对象是一模一样的，但是地址不同，它会返回false。<br>&nbsp;&nbsp;例如:人的身份证，就算两个人再像，名字一样，一看身份证不一样，你们其他的就不用看了。</p><br>&nbsp;&nbsp;总结一下，基本数据类型和引用数据类型根本区别：基本数据类型保存的是值，而引用数据类型保存的是地址（引用）。<p>&nbsp;&nbsp;我们一定要捋清楚他们的概念。好好消化一下吧。<br><br><br>&nbsp;&nbsp;愿你的坚持终有收获。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo博客时，在git上执行 hexo d _hexo g 报错_ERROR Local hexo not found in D__blog 解决方法</title>
      <link href="/articl/9bdc0929.html"/>
      <url>/articl/9bdc0929.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/8fb68c7a016b4e24843bc8723333509b.jpg" alt=""></p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;Hexo搭建博客的时候,已经使用命令在cmd中下载了依赖包,但是执行 hexo d 和hexo g 报错,报错如下:<br><img src="https://img-blog.csdnimg.cn/20200410101504126.png" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;导致这个原因为在自己的博客文件夹中,.gitignore文件中添加了node_modules/,导致更新的时候,这个文件夹被忽略,没有被更新上去。<br>解决方案:</p><ol><li>进入博客根目录</li><li>执行 cnpm install</li><li>执行 hexo s</li><li>执行成功后,再到博客下的git中执行 hexo d /hexo g 发现可以执行成功了。<br><img src="https://img-blog.csdnimg.cn/20200410101801820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><br>&nbsp;&nbsp;&nbsp;&nbsp;愿你的坚持终有收获。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详谈js中toString()和valueOf()</title>
      <link href="/articl/7934680a.html"/>
      <url>/articl/7934680a.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/f93fb2ef5038487393b59cd188d34638.jpg" alt=""></p><a id="more"></a><h2 id="详谈js中toString-和valueOf"><a href="#详谈js中toString-和valueOf" class="headerlink" title="详谈js中toString()和valueOf()"></a>详谈js中toString()和valueOf()</h2><p>他们主要用于数据转换，并且所有对象都继承了这两个方法：</p><p><em>第一个是toString(),它的作用是返回一个反映这个对象的字符串<br>第二个是valueOf(),它的作用是返回它相应的原始值</em><br>什么是原始值：</p><blockquote><p>原始值：不可变更的值，包括undefined、null、布尔值、数字、和字符串。 看下面这张图，列出了一些基本的类型转换。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200407222422403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>==1、toString()==<br><img src="https://img-blog.csdnimg.cn/20200407221957379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>很多类定义了更多特定版本的toString()方法。例如，数组类(Array class)的toString()方法将每个数组元素转换为-一个字符串，并在元素之间添加逗号后合并成结果字符串。函数类(Function class) 的toString()方法返回这个函数的实现定义的表示方式。实际上，这里的实现方式是通常是将用户定义的函数转换为JavaScript源代码字符串。日期类(Date class)定义的toString()方法返回了一个可读的日期和时间字符串。RegExp类 定义的toString()方法将RegExp对象转换为表示正则表达式直接量的字符串。</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].toString());             <span class="comment">//  1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{f(x);}).toString());  <span class="comment">//  function(x) {f(x);}                      </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d+/g</span>.toString());                <span class="comment">//  /\d+/g</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>).toString());  <span class="comment">//  Sat Feb 01 2020 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></tbody></table></figure><p>==2、valueof()==</p><blockquote><p>另一个转换对象的函数是value0f()。这个方法的任务并未详细定义:如果存在任意原始值，它就默认将对象转换为表示它的原始值。对象是复合值，而且大多数对象无法真正表示为一个原始值，因此默认的value0f()方法简单地返回对象本身，而不是返回一个原始值。数组、函数和正则表达式简单地继承了这个默认方法，调用这些类型的实例的value0f()方法只是简单返回对象本身。日期类定义的valueOf()方法返回它的一个内部表示：2020年1月1日以来的毫秒数。</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(t.valueOf());           <span class="comment">//1580486400000</span></span><br></pre></td></tr></tbody></table></figure><hr><p>总的来说javaScript中对象到字符串的转换经过如下的这些步骤：</p><ol><li>如果对象具有toString()方法，则调用这个方法。如果它返回一个原始值，JavaScript将这个值转换为字符串(如果本身不是字符串的话)，并返回这个字符串结果。需要注意的是，原始值到字符串的转换在表3-2中已经有了详尽的说明。</li><li>如果对象没有toString()方法，或者这个方法并不返回一个原始值，那么JavaScript会调用value0f()方法。如果存在这个方法，则JavaScript调用它。 如果返回值是原始值，JavaScript将这 个值转换为字符串(如果本身不是字符串的话)，并返回这个字符串结果。</li><li>否则，JavaScript无法 从toString()或value0f()获得一一个 原始值，因此这时它将抛<br>出一个类型错误异常。</li></ol><p>从对象到数字的转换过程中，JavaScript做的相同的事情，只是会先使用valueOf()方法：</p><ol><li>如果对象具有value0f()方法，后者返回-一个原始值，则JavaScript将这 个原始值转换为数字( 如果需要的话)并返回这个数字。</li><li>否则，如果对象具有toString()方法，后者返回一个原始值，JavaScript将其转换并返回。</li><li>否则，JavaScript拋 出一个类型错误异常。</li></ol><hr><p>这就很好解释了下面的一个问题：为什么空数组会被转换为数字0，为什么具有单个元素的数组同样会转换成一个数字。</p><blockquote><p>对象转换为数字的细节解释了为什么空数组会被转换为数字0以及为什么具有单个元素的数组同样会转换成一个数字。数组继承了默认的value0f()方法，这个方法返回一个对象而不是一一个原始值，因此，数组到数字的转换则调用toString()方法。空数组转换成为空字符串，空字符串转换成为数字0。含有一个元素的数组转换为字符串的结果和这个元素转换字符串的结果一样。如果数组只包含-一个数字元素，这个数字转换为字符串，再转换回数字。</p></blockquote><p><em>愿你的坚持都有收获！！！</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈一谈javascript中函数定义表达式和函数声明的区别？</title>
      <link href="/articl/b6badf2f.html"/>
      <url>/articl/b6badf2f.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/30f0456ef7cb417f853dc766b21b34a8.jpg" alt=""></p><a id="more"></a><p>在javascript中，函数声明有定义表达式和函数声明这两种写法。比如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text1 = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;尽管函数定义表达式和函数声明语句包含相同的函数名，并且都创建了新的函数对象，但是这二者却有区别。函数声明语句中的函数名是一个变量名，变量指向函数对象。<br>&nbsp;&nbsp;函数定义表达式和通过var声明变量一样，其函数被提前到了脚本或函数的顶部，因此它在整个脚本和或函数内都是可见的。这样的话，只有函数变量声明提前了，函数的初始化代码仍然在原来的位置。但是使用函数声明的话，函数名称和函数体均提前了，即脚本中的函数和函数中嵌套的函数都会在当前上下文中其它代码之前声明，也就是说可以在声明一个函数之前调用它。</p><p>&nbsp;&nbsp;举个例子就明白了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="number">1</span>);</span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>)</span>{</span><br><span class="line">　　　　alert(x);</span><br><span class="line">　　}</span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;这是可以正常运行的，输出结果为1，因为对于函数的声明语句，函数的名称和函数体都提前到函数或者脚本的顶部声明了，可以在声明之前去调用它。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="number">1</span>);</span><br><span class="line">　　<span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>{</span><br><span class="line">　　　　alert(x);</span><br><span class="line">　　}</span><br><span class="line">　　<span class="comment">//报错Uncaught TypeError: test is not a function</span></span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;这个代码就不行了，出现了报错。<br>&nbsp;&nbsp;这是为啥子腻？？？ 这是因为对于函数定义的表达式只有函数变量声明提前了，但是函数变量的初始化仍然在原来的位置。</p><p>&nbsp;&nbsp;相当于如下代码：text函数变量声明提前了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test;   <span class="comment">//声明提前</span></span><br><span class="line">　　test(<span class="number">1</span>);</span><br><span class="line">　　<span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>{</span><br><span class="line">　　　　alert(x);</span><br><span class="line">　　}</span><br></pre></td></tr></tbody></table></figure><p>&nbsp;&nbsp;所以会报错Uncaught TypeError: test is not a function</p><br>&nbsp;&nbsp;先好好体会一下吧。<br><br><br>&nbsp;&nbsp;愿你的坚持都有收获！！！<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生若是如初见</title>
      <link href="/articl/9e485288.html"/>
      <url>/articl/9e485288.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wu_zhiguang/blog/raw/master/img/1732ee021d2e3247.png" alt=""></p><a id="more"></a><h2 id="nbsp-nbsp-nbsp-nbsp-nbsp-我丢，我感觉自己发现了新世界。来记录一下此刻的心情。"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-我丢，我感觉自己发现了新世界。来记录一下此刻的心情。" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我丢，我感觉自己发现了新世界。来记录一下此刻的心情。"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我丢，我感觉自己发现了新世界。来记录一下此刻的心情。</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—愿你岁月如初，愿你的坚持终有回报。(2020.4.9)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404 Not Found：该页无法显示</title>
      <link href="//404.html"/>
      <url>//404.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" homepagename="返回首页" homepageurl="https://aqingya.cn/"></script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/google3c051e54ebb96db2.html"/>
      <url>/google3c051e54ebb96db2.html</url>
      
        <content type="html"><![CDATA[google-site-verification: google3c051e54ebb96db2.html<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
    </entry>
    
    
  
</search>
